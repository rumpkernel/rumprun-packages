diff -ruN -x '.*' old/hotspot/agent/src/os/solaris/proc/salibproc.h new/hotspot/agent/src/os/solaris/proc/salibproc.h
--- old/hotspot/agent/src/os/solaris/proc/salibproc.h	2016-08-16 10:50:16.581038624 -0600
+++ new/hotspot/agent/src/os/solaris/proc/salibproc.h	2016-08-16 14:39:07.214646606 -0600
@@ -35,7 +35,11 @@
  * been left for reference and not used in build.
  */
 
+#ifndef STATIC_BUILD
 #include <dlfcn.h>
+#else
+#include "dlfcn_static.h"
+#endif
 #include <gelf.h>
 #include <procfs.h>
 #include <proc_service.h>
diff -ruN -x '.*' old/hotspot/agent/src/share/classes/sun/jvm/hotspot/oops/OopUtilities.java new/hotspot/agent/src/share/classes/sun/jvm/hotspot/oops/OopUtilities.java
--- old/hotspot/agent/src/share/classes/sun/jvm/hotspot/oops/OopUtilities.java	2016-08-16 10:50:16.649040627 -0600
+++ new/hotspot/agent/src/share/classes/sun/jvm/hotspot/oops/OopUtilities.java	2016-08-16 14:39:07.346652510 -0600
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
diff -ruN -x '.*' old/hotspot/agent/src/share/native/sadis.c new/hotspot/agent/src/share/native/sadis.c
--- old/hotspot/agent/src/share/native/sadis.c	2016-08-16 10:50:16.693041924 -0600
+++ new/hotspot/agent/src/share/native/sadis.c	2016-08-16 14:39:07.218646785 -0600
@@ -47,7 +47,11 @@
 #else
 
 #include <string.h>
+#ifndef STATIC_BUILD
 #include <dlfcn.h>
+#else
+#include "dlfcn_static.h"
+#endif
 
 #ifndef __APPLE__
 #include <link.h>
diff -ruN -x '.*' old/hotspot/make/bsd/makefiles/adjust-mflags.sh new/hotspot/make/bsd/makefiles/adjust-mflags.sh
--- old/hotspot/make/bsd/makefiles/adjust-mflags.sh	2016-08-16 10:50:16.701042159 -0600
+++ new/hotspot/make/bsd/makefiles/adjust-mflags.sh	2016-08-16 14:39:07.146643564 -0600
@@ -64,7 +64,6 @@
 	echo "$MFLAGS" \
 	| sed '
 		s/^-/ -/
-		s/ -\([^ 	I][^ 	I]*\)j/ -\1 -j/
 		s/ -j[0-9][0-9]*/ -j/
 		s/ -j\([^ 	]\)/ -j -\1/
 		s/ -j/ -j'${HOTSPOT_BUILD_JOBS:-${default_build_jobs}}'/
diff -ruN -x '.*' old/hotspot/make/bsd/makefiles/buildtree.make new/hotspot/make/bsd/makefiles/buildtree.make
--- old/hotspot/make/bsd/makefiles/buildtree.make	2016-08-16 10:50:16.705042277 -0600
+++ new/hotspot/make/bsd/makefiles/buildtree.make	2016-08-16 14:39:07.134643028 -0600
@@ -224,6 +224,11 @@
 	echo "OPENJDK = $(OPENJDK)"; \
 	echo "$(LP64_SETTING/$(DATA_MODE))"; \
 	echo; \
+	echo "STATIC_BUILD = $(STATIC_BUILD)"; \
+	echo "COMPILER_WARNINGS_FATAL = $(COMPILER_WARNINGS_FATAL)"; \
+	echo "EXTRA_LDFLAGS = $(EXTRA_LDFLAGS)"; \
+	echo "LIBRARY_SUFFIX = $(LIBRARY_SUFFIX)"; \
+	echo; \
 	echo "# Used for platform dispatching"; \
 	echo "TARGET_DEFINES  = -DTARGET_OS_FAMILY_\$$(Platform_os_family)"; \
 	echo "TARGET_DEFINES += -DTARGET_ARCH_\$$(Platform_arch)"; \
diff -ruN -x '.*' old/hotspot/make/bsd/makefiles/build_vm_def.sh new/hotspot/make/bsd/makefiles/build_vm_def.sh
--- old/hotspot/make/bsd/makefiles/build_vm_def.sh	2016-08-16 10:50:16.705042277 -0600
+++ new/hotspot/make/bsd/makefiles/build_vm_def.sh	2016-08-16 14:39:07.138643207 -0600
@@ -2,7 +2,7 @@
 
 # If we're cross compiling use that path for nm
 if [ "$CROSS_COMPILE_ARCH" != "" ]; then
-    NM=$ALT_COMPILER_PATH/nm
+	NM=$(RUMPRUN_TOOLCHAIN_TUPLE)-nm
 else
     NM=nm
 fi
diff -ruN -x '.*' old/hotspot/make/bsd/makefiles/defs.make new/hotspot/make/bsd/makefiles/defs.make
--- old/hotspot/make/bsd/makefiles/defs.make	2016-08-16 10:50:16.705042277 -0600
+++ new/hotspot/make/bsd/makefiles/defs.make	2016-08-16 22:23:57.531707949 -0600
@@ -273,16 +273,23 @@
 JDK_INCLUDE_SUBDIR=bsd
 
 # Library suffix
-ifeq ($(OS_VENDOR),Darwin)
-  LIBRARY_SUFFIX=dylib
+ifneq ($(STATIC_BUILD),true)
+  ifeq ($(OS_VENDOR),Darwin)
+    LIBRARY_SUFFIX=dylib
+  else
+    LIBRARY_SUFFIX=so
+  endif
 else
-  LIBRARY_SUFFIX=so
+  LIBRARY_SUFFIX=a
 endif
 
 EXPORT_LIST += $(EXPORT_DOCS_DIR)/platform/jvmti/jvmti.html
 
-# client and server subdirectories have symbolic links to ../libjsig.so
-EXPORT_LIST += $(EXPORT_JRE_LIB_ARCH_DIR)/libjsig.$(LIBRARY_SUFFIX)
+# jsig library not needed for static builds
+ifneq ($(STATIC_BUILD),true)
+  # client and server subdirectories have symbolic links to ../libjsig.so
+  EXPORT_LIST += $(EXPORT_JRE_LIB_ARCH_DIR)/libjsig.$(LIBRARY_SUFFIX)
+endif
 
 ifeq ($(ENABLE_FULL_DEBUG_SYMBOLS),1)
   ifeq ($(ZIP_DEBUGINFO_FILES),1)
@@ -417,7 +424,9 @@
     endif
 
     # Binaries to 'universalize' if built
-    UNIVERSAL_LIPO_LIST += $(EXPORT_JRE_LIB_DIR)/libjsig.$(LIBRARY_SUFFIX)
+    ifneq ($(STATIC_BUILD),true)
+      UNIVERSAL_LIPO_LIST += $(EXPORT_JRE_LIB_DIR)/libjsig.$(LIBRARY_SUFFIX)
+    endif
     UNIVERSAL_LIPO_LIST += $(EXPORT_JRE_LIB_DIR)/libsaproc.$(LIBRARY_SUFFIX)
     UNIVERSAL_LIPO_LIST += $(EXPORT_JRE_LIB_DIR)/server/libjvm.$(LIBRARY_SUFFIX)
     UNIVERSAL_LIPO_LIST += $(EXPORT_JRE_LIB_DIR)/client/libjvm.$(LIBRARY_SUFFIX)
diff -ruN -x '.*' old/hotspot/make/bsd/makefiles/dtrace.make new/hotspot/make/bsd/makefiles/dtrace.make
--- old/hotspot/make/bsd/makefiles/dtrace.make	2016-08-16 10:50:16.705042277 -0600
+++ new/hotspot/make/bsd/makefiles/dtrace.make	2016-08-16 14:39:07.146643564 -0600
@@ -37,15 +37,15 @@
 # Bsd does not build libjvm_db, does not compile on macosx
 # disabled in build: rule in vm.make
 JVM_DB = libjvm_db
-LIBJVM_DB = libjvm_db.dylib
+LIBJVM_DB = libjvm_db.$(LIBRARY_SUFFIX)
 
-LIBJVM_DB_DEBUGINFO   = libjvm_db.dylib.dSYM
+LIBJVM_DB_DEBUGINFO   = libjvm_db.$(LIBRARY_SUFFIX).dSYM
 LIBJVM_DB_DIZ         = libjvm_db.diz
 
 JVM_DTRACE = jvm_dtrace
-LIBJVM_DTRACE = libjvm_dtrace.dylib
+LIBJVM_DTRACE = libjvm_dtrace.$(LIBRARY_SUFFIX)
 
-LIBJVM_DTRACE_DEBUGINFO   = libjvm_dtrace.dylib.dSYM
+LIBJVM_DTRACE_DEBUGINFO   = libjvm_dtrace.$(LIBRARY_SUFFIX).dSYM
 LIBJVM_DTRACE_DIZ         = libjvm_dtrace.diz
 
 JVMOFFS = JvmOffsets
@@ -168,14 +168,14 @@
 
 LFLAGS_GENOFFS += -L.
 
-lib$(GENOFFS).dylib: $(DTRACE_SRCDIR)/$(GENOFFS).cpp $(DTRACE_SRCDIR)/$(GENOFFS).h \
+lib$(GENOFFS).$(LIBRARY_SUFFIX): $(DTRACE_SRCDIR)/$(GENOFFS).cpp $(DTRACE_SRCDIR)/$(GENOFFS).h \
                   $(LIBJVM.o)
 	$(QUIETLY) $(CXX) $(CXXFLAGS) $(GENOFFS_CFLAGS) $(SHARED_FLAG) $(PICFLAG) \
 		 $(LFLAGS_GENOFFS) -o $@ $(DTRACE_SRCDIR)/$(GENOFFS).cpp -ljvm
 
-$(GENOFFS): $(DTRACE_SRCDIR)/$(GENOFFS)Main.c lib$(GENOFFS).dylib
+$(GENOFFS): $(DTRACE_SRCDIR)/$(GENOFFS)Main.c lib$(GENOFFS).$(LIBRARY_SUFFIX)
 	$(QUIETLY) $(LINK.CXX) -o $@ $(DTRACE_SRCDIR)/$(GENOFFS)Main.c \
-		./lib$(GENOFFS).dylib
+		./lib$(GENOFFS).$(LIBRARY_SUFFIX)
 
 # $@.tmp is created first to avoid an empty $(JVMOFFS).h if an error occurs.
 $(JVMOFFS).h: $(GENOFFS)
diff -ruN -x '.*' old/hotspot/make/bsd/makefiles/gcc.make new/hotspot/make/bsd/makefiles/gcc.make
--- old/hotspot/make/bsd/makefiles/gcc.make	2016-08-16 10:50:16.705042277 -0600
+++ new/hotspot/make/bsd/makefiles/gcc.make	2016-08-16 14:39:07.134643028 -0600
@@ -188,7 +188,14 @@
   CFLAGS += $(LIBFFI_CFLAGS)
   CFLAGS += $(LLVM_CFLAGS)
 endif
-CFLAGS += $(VM_PICFLAG)
+
+ifeq ($(STATIC_BUILD),true)
+  CXXFLAGS += -DSTATIC_BUILD
+  CFLAGS += -DSTATIC_BUILD
+else
+  CFLAGS += $(VM_PICFLAG)
+endif
+
 CFLAGS += -fno-rtti
 CFLAGS += -fno-exceptions
 ifeq ($(USE_CLANG),)
@@ -331,6 +338,11 @@
   endif
 endif
 
+# Bug: it causes page fault error in Rump 
+ifeq ($(STATIC_BUILD),true)
+  OPT_CFLAGS/cppInterpreter_zero.o += $(OPT_CFLAGS/NOOPT)
+endif
+
 # Flags for generating make dependency flags.
 DEPFLAGS = -MMD -MP -MF $(DEP_DIR)/$(@:%=%.d)
 ifeq ($(USE_CLANG),)
diff -ruN -x '.*' old/hotspot/make/bsd/makefiles/jsig.make new/hotspot/make/bsd/makefiles/jsig.make
--- old/hotspot/make/bsd/makefiles/jsig.make	2016-08-16 10:50:16.705042277 -0600
+++ new/hotspot/make/bsd/makefiles/jsig.make	2016-08-16 14:39:07.134643028 -0600
@@ -28,12 +28,12 @@
 JSIG   = jsig
 
 ifeq ($(OS_VENDOR), Darwin)
-  LIBJSIG   = lib$(JSIG).dylib
+  LIBJSIG   = lib$(JSIG).$(LIBRARY_SUFFIX)
 
-  LIBJSIG_DEBUGINFO   = lib$(JSIG).dylib.dSYM
+  LIBJSIG_DEBUGINFO   = lib$(JSIG).$(LIBRARY_SUFFIX).dSYM
   LIBJSIG_DIZ         = lib$(JSIG).diz
 else
-  LIBJSIG   = lib$(JSIG).so
+  LIBJSIG   = lib$(JSIG).$(LIBRARY_SUFFIX)
 
   LIBJSIG_DEBUGINFO   = lib$(JSIG).debuginfo
   LIBJSIG_DIZ         = lib$(JSIG).diz
@@ -59,10 +59,22 @@
   JSIG_DEBUG_CFLAGS = -g
 endif
 
+ifeq ($(STATIC_BUILD),true)
+  STATICFLAG = -DSTATIC_BUILD
+else
+  STATICFLAG = 
+endif
+
 $(LIBJSIG): $(JSIGSRCDIR)/jsig.c $(LIBJSIG_MAPFILE)
 	@echo Making signal interposition lib...
+ifeq ($(STATIC_BUILD),true)
+	$(QUIETLY) $(CC) -c $(SYMFLAG) $(EXTRA_CFLAGS) $(ARCHFLAG) $(PICFLAG) \
+            $(STATICFLAG) $(LFLAGS_JSIG) $(JSIG_DEBUG_CFLAGS) -o $(JSIG).o $<
+	$(QUIETLY) $(LINK_LIB.CC) $@ $(JSIG).o
+else
 	$(QUIETLY) $(CC) $(SYMFLAG) $(ARCHFLAG) $(SHARED_FLAG) $(PICFLAG) \
                          $(LFLAGS_JSIG) $(JSIG_DEBUG_CFLAGS) -o $@ $<
+endif
 ifeq ($(ENABLE_FULL_DEBUG_SYMBOLS),1)
   ifeq ($(OS_VENDOR), Darwin)
 	$(DSYMUTIL) $@
diff -ruN -x '.*' old/hotspot/make/bsd/makefiles/rules.make new/hotspot/make/bsd/makefiles/rules.make
--- old/hotspot/make/bsd/makefiles/rules.make	2016-08-16 10:50:16.705042277 -0600
+++ new/hotspot/make/bsd/makefiles/rules.make	2016-08-16 14:39:07.134643028 -0600
@@ -39,7 +39,11 @@
 COMPILE.CC       = $(CC_COMPILE) -c
 GENASM.CC        = $(CC_COMPILE) -S
 LINK.CC          = $(CC) $(LFLAGS) $(AOUT_FLAGS) $(PROF_AOUT_FLAGS)
+ifeq ($(STATIC_BUILD),true)
+LINK_LIB.CC      = $(AR) $(ARFLAGS) $(AR_OUT_OPTION)
+else
 LINK_LIB.CC      = $(CC) $(LFLAGS) $(SHARED_FLAG)
+endif
 PREPROCESS.CC    = $(CC_COMPILE) -E
 
 COMPILE.CXX      = $(CXX_COMPILE) -c
diff -ruN -x '.*' old/hotspot/make/bsd/makefiles/saproc.make new/hotspot/make/bsd/makefiles/saproc.make
--- old/hotspot/make/bsd/makefiles/saproc.make	2016-08-16 10:50:16.705042277 -0600
+++ new/hotspot/make/bsd/makefiles/saproc.make	2016-08-16 14:39:07.146643564 -0600
@@ -28,12 +28,12 @@
 SAPROC   = saproc
 
 ifeq ($(OS_VENDOR), Darwin)
-  LIBSAPROC           = lib$(SAPROC).dylib
+  LIBSAPROC           = lib$(SAPROC).$(LIBRARY_SUFFIX)
 
-  LIBSAPROC_DEBUGINFO = lib$(SAPROC).dylib.dSYM
+  LIBSAPROC_DEBUGINFO = lib$(SAPROC).$(LIBRARY_SUFFIX).dSYM
   LIBSAPROC_DIZ       = lib$(SAPROC).diz
 else
-  LIBSAPROC           = lib$(SAPROC).so
+  LIBSAPROC           = lib$(SAPROC).$(LIBRARY_SUFFIX)
 
   LIBSAPROC_DEBUGINFO = lib$(SAPROC).debuginfo
   LIBSAPROC_DIZ       = lib$(SAPROC).diz
@@ -127,15 +127,16 @@
 	@echo Making SA debugger back-end...
 	$(QUIETLY) $(CC) -D$(BUILDARCH) -D_GNU_SOURCE                   \
 	           $(SA_SYSROOT_FLAGS)                                  \
-	           $(SYMFLAG) $(SAARCH) $(SHARED_FLAG) $(PICFLAG)       \
+	           -c $(SYMFLAG) $(SAARCH) $(SHARED_FLAG) $(PICFLAG)    \
 	           -I$(SASRCDIR)                                        \
 	           -I$(GENERATED)                                       \
 	           $(BOOT_JAVA_INCLUDES)                                \
 	           $(SASRCFILES)                                        \
 	           $(SA_LFLAGS)                                         \
 	           $(SA_DEBUG_CFLAGS)                                   \
-	           -o $@                                                \
+	           -o $(SAPROC).o                                       \
 	           $(SALIBS)
+	$(QUIETLY) $(AR) $(ARFLAGS) $(AR_OUT_OPTION) $@ $(SAPROC).o
 ifeq ($(ENABLE_FULL_DEBUG_SYMBOLS),1)
   ifeq ($(OS_VENDOR), Darwin)
 	$(DSYMUTIL) $@
diff -ruN -x '.*' old/hotspot/make/bsd/makefiles/vm.make new/hotspot/make/bsd/makefiles/vm.make
--- old/hotspot/make/bsd/makefiles/vm.make	2016-08-16 10:50:16.705042277 -0600
+++ new/hotspot/make/bsd/makefiles/vm.make	2016-08-16 14:39:07.146643564 -0600
@@ -120,6 +120,7 @@
 # Extra flags from gnumake's invocation or environment
 CFLAGS += $(EXTRA_CFLAGS)
 LFLAGS += $(EXTRA_CFLAGS)
+CXXFLAGS += $(EXTRA_CXXFLAGS)
 
 # Don't set excutable bit on stack segment
 # the same could be done by separate execstack command
@@ -148,19 +149,23 @@
 
 JVM    = jvm
 ifeq ($(OS_VENDOR), Darwin)
-  LIBJVM   = lib$(JVM).dylib
+  LIBJVM   = lib$(JVM).$(LIBRARY_SUFFIX)
   CFLAGS  += -D_XOPEN_SOURCE -D_DARWIN_C_SOURCE
   ifeq (${VERSION}, $(filter ${VERSION}, debug fastdebug))
     CFLAGS += -DALLOW_OPERATOR_NEW_USAGE
   endif
 
-  LIBJVM_DEBUGINFO   = lib$(JVM).dylib.dSYM
+  LIBJVM_DEBUGINFO   = lib$(JVM).$(LIBRARY_SUFFIX).dSYM
   LIBJVM_DIZ         = lib$(JVM).diz
 else
-  LIBJVM   = lib$(JVM).so
+  LIBJVM   = lib$(JVM).$(LIBRARY_SUFFIX)
 
   LIBJVM_DEBUGINFO   = lib$(JVM).debuginfo
   LIBJVM_DIZ         = lib$(JVM).diz
+
+  ifeq ($(STATIC_BUILD),true)
+    CFLAGS += -DALLOW_OPERATOR_NEW_USAGE
+  endif
 endif
 
 SPECIAL_PATHS:=adlc c1 gc_implementation opto shark libadt
@@ -278,9 +283,11 @@
   LFLAGS_VM                += $(SONAMEFLAG:SONAME=$(LIBJVM))
 
   ifeq ($(OS_VENDOR), Darwin)
-    LFLAGS_VM += -Xlinker -rpath -Xlinker @loader_path/.
-    LFLAGS_VM += -Xlinker -rpath -Xlinker @loader_path/..
-    LFLAGS_VM += -Xlinker -install_name -Xlinker @rpath/$(@F)
+    ifneq ($(STATIC_BUILD),true)
+      LFLAGS_VM += -Xlinker -rpath -Xlinker @loader_path/.
+      LFLAGS_VM += -Xlinker -rpath -Xlinker @loader_path/..
+      LFLAGS_VM += -Xlinker -install_name -Xlinker @rpath/$(@F)
+    endif
   endif
 
   # JVM is statically linked with libgcc[_s] and libstdc++; this is needed to
@@ -332,6 +339,10 @@
 endif
 
 $(LIBJVM): $(LIBJVM.o) $(LIBJVM_MAPFILE) $(LD_SCRIPT)
+ifeq ($(STATIC_BUILD),true)
+	echo Linking static vm...;
+	$(LINK_LIB.CC) $@ $(LIBJVM.o)
+else
 	$(QUIETLY) {                                                    \
 	    echo Linking vm...;                                         \
 	    $(LINK_LIB.CXX/PRE_HOOK)                                     \
@@ -341,6 +352,8 @@
 	    rm -f $@.1; ln -s $@ $@.1;                                  \
 	}
 
+endif
+
 ifeq ($(ENABLE_FULL_DEBUG_SYMBOLS),1)
   ifeq ($(OS_VENDOR), Darwin)
 	$(DSYMUTIL) $@
diff -ruN -x '.*' old/hotspot/make/defs.make new/hotspot/make/defs.make
--- old/hotspot/make/defs.make	2016-08-16 10:50:16.693041924 -0600
+++ new/hotspot/make/defs.make	2016-08-16 14:39:07.114642134 -0600
@@ -71,6 +71,7 @@
 SED=sed
 TAR=tar
 ZIPEXE=zip
+OS=$(PLATFORM)
 
 define install-file
 @$(MKDIR) -p $(@D)
diff -ruN -x '.*' old/hotspot/make/linux/makefiles/adjust-mflags.sh new/hotspot/make/linux/makefiles/adjust-mflags.sh
--- old/hotspot/make/linux/makefiles/adjust-mflags.sh	2016-08-16 10:50:16.713042513 -0600
+++ new/hotspot/make/linux/makefiles/adjust-mflags.sh	2016-08-16 14:39:07.150643743 -0600
@@ -64,7 +64,6 @@
 	echo "$MFLAGS" \
 	| sed '
 		s/^-/ -/
-		s/ -\([^ 	I][^ 	I]*\)j/ -\1 -j/
 		s/ -j[0-9][0-9]*/ -j/
 		s/ -j\([^ 	]\)/ -j -\1/
 		s/ -j/ -j'${HOTSPOT_BUILD_JOBS:-${default_build_jobs}}'/
diff -ruN -x '.*' old/hotspot/make/solaris/makefiles/adjust-mflags.sh new/hotspot/make/solaris/makefiles/adjust-mflags.sh
--- old/hotspot/make/solaris/makefiles/adjust-mflags.sh	2016-08-16 10:50:16.697042041 -0600
+++ new/hotspot/make/solaris/makefiles/adjust-mflags.sh	2016-08-16 14:39:07.158644101 -0600
@@ -64,7 +64,6 @@
 	echo "$MFLAGS" \
 	| sed '
 		s/^-/ -/
-		s/ -\([^ 	I][^ 	I]*\)j/ -\1 -j/
 		s/ -j[0-9][0-9]*/ -j/
 		s/ -j\([^ 	]\)/ -j -\1/
 		s/ -j/ -j'${HOTSPOT_BUILD_JOBS:-${default_build_jobs}}'/
diff -ruN -x '.*' old/hotspot/src/os/aix/vm/jsig.c new/hotspot/src/os/aix/vm/jsig.c
--- old/hotspot/src/os/aix/vm/jsig.c	2016-08-16 10:50:17.129054765 -0600
+++ new/hotspot/src/os/aix/vm/jsig.c	2016-08-16 14:39:08.354697594 -0600
@@ -32,7 +32,11 @@
  */
 
 #include <signal.h>
+#ifndef STATIC_BUILD
 #include <dlfcn.h>
+#else
+#include "dlfcn_static.h"
+#endif
 #include <pthread.h>
 #include <stdio.h>
 #include <stdlib.h>
diff -ruN -x '.*' old/hotspot/src/os/bsd/vm/jsig.c new/hotspot/src/os/bsd/vm/jsig.c
--- old/hotspot/src/os/bsd/vm/jsig.c	2016-08-16 10:50:17.137055001 -0600
+++ new/hotspot/src/os/bsd/vm/jsig.c	2016-08-16 14:39:08.374698489 -0600
@@ -30,8 +30,12 @@
  * Used for signal-chaining. See RFE 4381843.
  */
 
-#include <signal.h>
+#ifndef STATIC_BUILD
 #include <dlfcn.h>
+#else
+#include "dlfcn_static.h"
+#endif
+#include <signal.h>
 #include <pthread.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -98,9 +102,17 @@
 
   if (os_signal == NULL) {
     if (!is_sigset) {
+#ifndef STATIC_BUILD
       os_signal = (signal_t)dlsym(RTLD_NEXT, "signal");
+#else
+      os_signal = (signal_t)signal;
+#endif
     } else {
+#ifndef STATIC_BUILD
       os_signal = (signal_t)dlsym(RTLD_NEXT, "sigset");
+#else
+      os_signal = (signal_t)sigset;
+#endif
     }
     if (os_signal == NULL) {
       printf("%s\n", dlerror());
@@ -171,7 +183,11 @@
 static int call_os_sigaction(int sig, const struct sigaction  *act,
                              struct sigaction *oact) {
   if (os_sigaction == NULL) {
+#ifndef STATIC_BUILD
     os_sigaction = (sigaction_t)dlsym(RTLD_NEXT, "sigaction");
+#else
+    os_sigaction = (sigaction_t)sigaction;
+#endif
     if (os_sigaction == NULL) {
       printf("%s\n", dlerror());
       exit(0);
@@ -180,6 +196,7 @@
   return (*os_sigaction)(sig, act, oact);
 }
 
+#ifndef STATIC_BUILD
 int sigaction(int sig, const struct sigaction *act, struct sigaction *oact) {
   int res;
   bool sigused;
@@ -228,6 +245,7 @@
     return res;
   }
 }
+#endif
 
 /* The three functions for the jvm to call into */
 void JVM_begin_signal_setting() {
diff -ruN -x '.*' old/hotspot/src/os/bsd/vm/jvm_bsd.h new/hotspot/src/os/bsd/vm/jvm_bsd.h
--- old/hotspot/src/os/bsd/vm/jvm_bsd.h	2016-08-16 10:50:17.137055001 -0600
+++ new/hotspot/src/os/bsd/vm/jvm_bsd.h	2016-08-16 14:39:08.378698668 -0600
@@ -71,6 +71,8 @@
 #define JNI_LIB_PREFIX "lib"
 #ifdef __APPLE__
 #define JNI_LIB_SUFFIX ".dylib"
+#elif defined(STATIC_BUILD)
+#define JNI_LIB_SUFFIX ".a"
 #else
 #define JNI_LIB_SUFFIX ".so"
 #endif
diff -ruN -x '.*' old/hotspot/src/os/bsd/vm/os_bsd.cpp new/hotspot/src/os/bsd/vm/os_bsd.cpp
--- old/hotspot/src/os/bsd/vm/os_bsd.cpp	2016-08-16 10:50:17.137055001 -0600
+++ new/hotspot/src/os/bsd/vm/os_bsd.cpp	2016-08-16 14:39:08.370698311 -0600
@@ -74,7 +74,11 @@
 # include <pthread.h>
 # include <signal.h>
 # include <errno.h>
+#ifndef STATIC_BUILD
 # include <dlfcn.h>
+#else
+# include "dlfcn_static.h"
+#endif
 # include <stdio.h>
 # include <unistd.h>
 # include <sys/resource.h>
@@ -311,6 +315,8 @@
 
 #if defined (HW_MEMSIZE) // Apple
   mib[1] = HW_MEMSIZE;
+#elif defined(HW_PHYSMEM64) 
+  mib[1] = HW_PHYSMEM64;
 #elif defined(HW_PHYSMEM) // Most of BSD
   mib[1] = HW_PHYSMEM;
 #elif defined(HW_REALMEM) // Old FreeBSD
@@ -1108,6 +1114,9 @@
   if (Bsd::supports_monotonic_clock()) {
     struct timespec tp;
     int status = Bsd::_clock_gettime(CLOCK_MONOTONIC, &tp);
+#ifdef STATIC_BUILD // rumprun issue #71 time ocillation in thread
+    os::yield();
+#endif
     assert(status == 0, "gettime error");
     jlong result = jlong(tp.tv_sec) * (1000 * 1000 * 1000) + jlong(tp.tv_nsec);
     return result;
@@ -1312,6 +1321,8 @@
 #define JNI_LIB_PREFIX "lib"
 #ifdef __APPLE__
 #define JNI_LIB_SUFFIX ".dylib"
+#elif defined(STATIC_BUILD)
+#define JNI_LIB_SUFFIX ".a"
 #else
 #define JNI_LIB_SUFFIX ".so"
 #endif
@@ -1877,6 +1888,12 @@
     return;
   }
 
+#ifdef STATIC_BUILD
+  sprintf(buf, "%s%s%s%c%s%s", ::getenv("JAVA_HOME"), 
+    "/jre/lib/", cpu_arch, '/', COMPILER_VARIANT, "/libjvm.a");
+  strncpy(saved_jvm_path, buf, MAXPATHLEN);
+  return;
+#else
   char dli_fname[MAXPATHLEN];
   bool ret = dll_address_to_library_name(
                 CAST_FROM_FN_PTR(address, os::jvm_path),
@@ -1955,6 +1972,7 @@
   }
 
   strncpy(saved_jvm_path, buf, MAXPATHLEN);
+#endif
 }
 
 void os::print_jni_name_prefix_on(outputStream* st, int args_size) {
@@ -2265,8 +2283,8 @@
 //       problem.
 bool os::pd_commit_memory(char* addr, size_t size, bool exec) {
   int prot = exec ? PROT_READ|PROT_WRITE|PROT_EXEC : PROT_READ|PROT_WRITE;
-#ifdef __OpenBSD__
-  // XXX: Work-around mmap/MAP_FIXED bug temporarily on OpenBSD
+#if defined(__OpenBSD__) || defined(__NetBSD__)
+  // XXX: Work-around mmap/MAP_FIXED bug temporarily on OpenBSD and Rump
   if (::mprotect(addr, size, prot) == 0) {
     return true;
   }
@@ -2349,7 +2367,7 @@
 
 
 bool os::pd_uncommit_memory(char* addr, size_t size) {
-#ifdef __OpenBSD__
+#if defined(__OpenBSD__) || defined(__NetBSD__)
   // XXX: Work-around mmap/MAP_FIXED bug temporarily on OpenBSD
   return ::mprotect(addr, size, PROT_NONE) == 0;
 #else
@@ -2475,6 +2493,7 @@
 
 
 char* os::reserve_memory_special(size_t bytes, size_t alignment, char* req_addr, bool exec) {
+#ifndef STATIC_BUILD
   fatal("This code is not used or maintained.");
 
   // "exec" is passed in but not used.  Creating the shared image for
@@ -2534,9 +2553,14 @@
   MemTracker::record_virtual_memory_reserve_and_commit((address)addr, bytes, CALLER_PC);
 
   return addr;
+#else
+  fatal("os::reserve_memory_special should not be called on Rump.");
+  return NULL;
+#endif
 }
 
 bool os::release_memory_special(char* base, size_t bytes) {
+#ifndef STATIC_BUILD
   if (MemTracker::tracking_level() > NMT_minimal) {
     Tracker tkr = MemTracker::get_virtual_memory_release_tracker();
     // detaching the SHM segment will also delete it, see reserve_memory_special()
@@ -2550,6 +2574,10 @@
   } else {
     return shmdt(base) == 0;
   }
+#else
+  fatal("os::release_memory_special should not be called on Rump.");
+  return false;
+#endif
 }
 
 size_t os::large_page_size() {
@@ -4926,6 +4954,8 @@
 #ifdef __APPLE__
     // We no longer build headless-only on Mac OS X
     return false;
+#elif defined(STATIC_BUILD)
+    return true;
 #else
     struct stat statbuf;
     char buf[MAXPATHLEN];
diff -ruN -x '.*' old/hotspot/src/os/bsd/vm/os_bsd.inline.hpp new/hotspot/src/os/bsd/vm/os_bsd.inline.hpp
--- old/hotspot/src/os/bsd/vm/os_bsd.inline.hpp	2016-08-16 10:50:17.137055001 -0600
+++ new/hotspot/src/os/bsd/vm/os_bsd.inline.hpp	2016-08-16 14:39:08.370698311 -0600
@@ -90,7 +90,9 @@
 }
 
 inline void os::dll_unload(void *lib) {
+#ifndef STATIC_BUILD
   ::dlclose(lib);
+#endif
 }
 
 inline const int os::default_file_open_flags() { return 0;}
diff -ruN -x '.*' old/hotspot/src/os/linux/vm/jsig.c new/hotspot/src/os/linux/vm/jsig.c
--- old/hotspot/src/os/linux/vm/jsig.c	2016-08-16 10:50:17.137055001 -0600
+++ new/hotspot/src/os/linux/vm/jsig.c	2016-08-16 14:39:08.386699026 -0600
@@ -31,7 +31,11 @@
  */
 
 #include <signal.h>
+#ifndef STATIC_BUILD
 #include <dlfcn.h>
+#else
+#include "dlfcn_static.h"
+#endif
 #include <pthread.h>
 #include <stdio.h>
 #include <stdlib.h>
diff -ruN -x '.*' old/hotspot/src/os/linux/vm/os_linux.cpp new/hotspot/src/os/linux/vm/os_linux.cpp
--- old/hotspot/src/os/linux/vm/os_linux.cpp	2016-08-16 10:50:17.141055119 -0600
+++ new/hotspot/src/os/linux/vm/os_linux.cpp	2016-08-16 14:39:08.382698847 -0600
@@ -76,7 +76,11 @@
 # include <pthread.h>
 # include <signal.h>
 # include <errno.h>
-# include <dlfcn.h>
+#ifndef STATIC_BUILD
+#include <dlfcn.h>
+#else
+#include "dlfcn_static.h"
+#endif
 # include <stdio.h>
 # include <unistd.h>
 # include <sys/resource.h>
diff -ruN -x '.*' old/hotspot/src/os/solaris/vm/jsig.c new/hotspot/src/os/solaris/vm/jsig.c
--- old/hotspot/src/os/solaris/vm/jsig.c	2016-08-16 10:50:17.145055236 -0600
+++ new/hotspot/src/os/solaris/vm/jsig.c	2016-08-16 14:39:08.406699920 -0600
@@ -34,7 +34,11 @@
 #include <stdio.h>
 #include <string.h>
 #include <signal.h>
+#ifndef STATIC_BUILD
 #include <dlfcn.h>
+#else
+#include "dlfcn_static.h"
+#endif
 #include <thread.h>
 #include <synch.h>
 #include "jvm_solaris.h"
diff -ruN -x '.*' old/hotspot/src/os/solaris/vm/os_solaris.cpp new/hotspot/src/os/solaris/vm/os_solaris.cpp
--- old/hotspot/src/os/solaris/vm/os_solaris.cpp	2016-08-16 10:50:17.145055236 -0600
+++ new/hotspot/src/os/solaris/vm/os_solaris.cpp	2016-08-16 14:39:08.406699920 -0600
@@ -67,7 +67,11 @@
 #include "utilities/vmError.hpp"
 
 // put OS-includes here
+#ifndef STATIC_BUILD
 # include <dlfcn.h>
+#else
+# include "dlfcn_static.h"
+#endif
 # include <errno.h>
 # include <exception>
 # include <link.h>
diff -ruN -x '.*' old/hotspot/src/os/solaris/vm/os_solaris.inline.hpp new/hotspot/src/os/solaris/vm/os_solaris.inline.hpp
--- old/hotspot/src/os/solaris/vm/os_solaris.inline.hpp	2016-08-16 10:50:17.145055236 -0600
+++ new/hotspot/src/os/solaris/vm/os_solaris.inline.hpp	2016-08-16 14:39:08.414700278 -0600
@@ -31,7 +31,11 @@
 
 // System includes
 #include <sys/param.h>
+#ifndef STATIC_BUILD
 #include <dlfcn.h>
+#else
+#include "dlfcn_static.h"
+#endif
 #include <sys/socket.h>
 #include <sys/poll.h>
 #include <sys/filio.h>
diff -ruN -x '.*' old/hotspot/src/os_cpu/bsd_x86/vm/os_bsd_x86.cpp new/hotspot/src/os_cpu/bsd_x86/vm/os_bsd_x86.cpp
--- old/hotspot/src/os_cpu/bsd_x86/vm/os_bsd_x86.cpp	2016-08-16 10:50:17.153055472 -0600
+++ new/hotspot/src/os_cpu/bsd_x86/vm/os_bsd_x86.cpp	2016-08-16 14:39:08.438701351 -0600
@@ -58,7 +58,11 @@
 # include <pthread.h>
 # include <signal.h>
 # include <errno.h>
+#ifndef STATIC_BUILD
 # include <dlfcn.h>
+#else
+# include "dlfcn_static.h"
+#endif
 # include <stdlib.h>
 # include <stdio.h>
 # include <unistd.h>
diff -ruN -x '.*' old/hotspot/src/os_cpu/bsd_zero/vm/os_bsd_zero.cpp new/hotspot/src/os_cpu/bsd_zero/vm/os_bsd_zero.cpp
--- old/hotspot/src/os_cpu/bsd_zero/vm/os_bsd_zero.cpp	2016-08-16 10:50:17.153055472 -0600
+++ new/hotspot/src/os_cpu/bsd_zero/vm/os_bsd_zero.cpp	2016-08-16 14:39:08.446701709 -0600
@@ -60,8 +60,13 @@
 #include "utilities/vmError.hpp"
 
 address os::current_stack_pointer() {
+#ifndef STATIC_BUILD
   address dummy = (address) &dummy;
   return dummy;
+#else
+  // return the address of the current function
+  return (address)__builtin_frame_address(0);
+#endif
 }
 
 frame os::get_sender_for_C_frame(frame* fr) {
diff -ruN -x '.*' old/hotspot/src/os_cpu/linux_ppc/vm/os_linux_ppc.cpp new/hotspot/src/os_cpu/linux_ppc/vm/os_linux_ppc.cpp
--- old/hotspot/src/os_cpu/linux_ppc/vm/os_linux_ppc.cpp	2016-08-16 10:50:17.153055472 -0600
+++ new/hotspot/src/os_cpu/linux_ppc/vm/os_linux_ppc.cpp	2016-08-16 14:39:08.454702067 -0600
@@ -60,7 +60,11 @@
 # include <pthread.h>
 # include <signal.h>
 # include <errno.h>
-# include <dlfcn.h>
+#ifndef STATIC_BUILD
+#include <dlfcn.h>
+#else
+#include "dlfcn_static.h"
+#endif
 # include <stdlib.h>
 # include <stdio.h>
 # include <unistd.h>
diff -ruN -x '.*' old/hotspot/src/os_cpu/linux_x86/vm/os_linux_x86.cpp new/hotspot/src/os_cpu/linux_x86/vm/os_linux_x86.cpp
--- old/hotspot/src/os_cpu/linux_x86/vm/os_linux_x86.cpp	2016-08-16 10:50:17.161055707 -0600
+++ new/hotspot/src/os_cpu/linux_x86/vm/os_linux_x86.cpp	2016-08-16 14:39:08.466702604 -0600
@@ -58,7 +58,11 @@
 # include <pthread.h>
 # include <signal.h>
 # include <errno.h>
-# include <dlfcn.h>
+#ifndef STATIC_BUILD
+#include <dlfcn.h>
+#else
+#include "dlfcn_static.h"
+#endif
 # include <stdlib.h>
 # include <stdio.h>
 # include <unistd.h>
diff -ruN -x '.*' old/hotspot/src/os_cpu/solaris_sparc/vm/os_solaris_sparc.cpp new/hotspot/src/os_cpu/solaris_sparc/vm/os_solaris_sparc.cpp
--- old/hotspot/src/os_cpu/solaris_sparc/vm/os_solaris_sparc.cpp	2016-08-16 10:50:17.161055707 -0600
+++ new/hotspot/src/os_cpu/solaris_sparc/vm/os_solaris_sparc.cpp	2016-08-16 14:39:08.470702783 -0600
@@ -60,7 +60,11 @@
 # include <sys/mman.h>
 # include <pthread.h>
 # include <errno.h>
+#ifndef STATIC_BUILD
 # include <dlfcn.h>
+#else
+# include "dlfcn_static.h"
+#endif
 # include <stdio.h>
 # include <unistd.h>
 # include <sys/resource.h>
diff -ruN -x '.*' old/hotspot/src/os_cpu/solaris_sparc/vm/vm_version_solaris_sparc.cpp new/hotspot/src/os_cpu/solaris_sparc/vm/vm_version_solaris_sparc.cpp
--- old/hotspot/src/os_cpu/solaris_sparc/vm/vm_version_solaris_sparc.cpp	2016-08-16 10:50:17.161055707 -0600
+++ new/hotspot/src/os_cpu/solaris_sparc/vm/vm_version_solaris_sparc.cpp	2016-08-16 14:39:08.470702783 -0600
@@ -31,7 +31,11 @@
 #include <sys/systeminfo.h>
 #include <kstat.h>
 #include <picl.h>
+#ifndef STATIC_BUILD
 #include <dlfcn.h>
+#else
+#include "dlfcn_static.h"
+#endif
 #include <link.h>
 
 extern "C" static int PICL_visit_cpu_helper(picl_nodehdl_t nodeh, void *result);
diff -ruN -x '.*' old/hotspot/src/os_cpu/solaris_x86/vm/os_solaris_x86.cpp new/hotspot/src/os_cpu/solaris_x86/vm/os_solaris_x86.cpp
--- old/hotspot/src/os_cpu/solaris_x86/vm/os_solaris_x86.cpp	2016-08-16 10:50:17.165055825 -0600
+++ new/hotspot/src/os_cpu/solaris_x86/vm/os_solaris_x86.cpp	2016-08-16 14:39:08.474702961 -0600
@@ -59,7 +59,11 @@
 # include <signal.h>
 # include <setjmp.h>
 # include <errno.h>
+#ifndef STATIC_BUILD
 # include <dlfcn.h>
+#else
+# include "dlfcn_static.h"
+#endif
 # include <stdio.h>
 # include <unistd.h>
 # include <sys/resource.h>
diff -ruN -x '.*' old/hotspot/src/share/tools/hsdis/hsdis-demo.c new/hotspot/src/share/tools/hsdis/hsdis-demo.c
--- old/hotspot/src/share/tools/hsdis/hsdis-demo.c	2016-08-16 10:50:16.773044280 -0600
+++ new/hotspot/src/share/tools/hsdis/hsdis-demo.c	2016-08-16 14:39:07.674667180 -0600
@@ -83,7 +83,11 @@
 
 /* don't disassemble after this point... */
 
+#ifndef STATIC_BUILD
 #include "dlfcn.h"
+#else
+#include "dlfcn_static.h"
+#endif
 
 #define DECODE_INSTRUCTIONS_VIRTUAL_NAME "decode_instructions_virtual"
 #define DECODE_INSTRUCTIONS_NAME "decode_instructions"
diff -ruN -x '.*' old/hotspot/src/share/vm/classfile/classLoader.cpp new/hotspot/src/share/vm/classfile/classLoader.cpp
--- old/hotspot/src/share/vm/classfile/classLoader.cpp	2016-08-16 10:50:16.845046400 -0600
+++ new/hotspot/src/share/vm/classfile/classLoader.cpp	2016-08-16 14:39:07.910677736 -0600
@@ -805,12 +805,14 @@
   char path[JVM_MAXPATHLEN];
   char ebuf[1024];
   void* handle = NULL;
+#ifndef STATIC_BUILD
   if (os::dll_build_name(path, sizeof(path), Arguments::get_dll_dir(), "zip")) {
     handle = os::dll_load(path, ebuf, sizeof ebuf);
   }
   if (handle == NULL) {
     vm_exit_during_initialization("Unable to load ZIP library", path);
   }
+#endif
   // Lookup zip entry points
   ZipOpen      = CAST_TO_FN_PTR(ZipOpen_t, os::dll_lookup(handle, "ZIP_Open"));
   ZipClose     = CAST_TO_FN_PTR(ZipClose_t, os::dll_lookup(handle, "ZIP_Close"));
diff -ruN -x '.*' old/hotspot/src/share/vm/compiler/disassembler.cpp new/hotspot/src/share/vm/compiler/disassembler.cpp
--- old/hotspot/src/share/vm/compiler/disassembler.cpp	2016-08-16 10:50:16.865046990 -0600
+++ new/hotspot/src/share/vm/compiler/disassembler.cpp	2016-08-16 14:39:07.922678273 -0600
@@ -83,6 +83,12 @@
   os::jvm_path(buf, sizeof(buf));
   int jvm_offset = -1;
   int lib_offset = -1;
+#ifdef STATIC_BUILD
+  char* p = strrchr(buf, '/');
+  *p = '\0';
+  strcat(p, "/lib/");
+  lib_offset = jvm_offset = strlen(buf);
+#else
   {
     // Match "jvm[^/]*" in jvm_path.
     const char* base = buf;
@@ -91,6 +97,7 @@
     p = strstr(p ? p : base, "jvm");
     if (p != NULL)  jvm_offset = p - base;
   }
+#endif
   // Find the disassembler shared library.
   // Search for several paths derived from libjvm, in this order:
   // 1. <home>/jre/lib/<arch>/<vm>/libhsdis-<arch>.so  (for compatibility)
diff -ruN -x '.*' old/hotspot/src/share/vm/gc_implementation/concurrentMarkSweep/concurrentMarkSweepGeneration.cpp new/hotspot/src/share/vm/gc_implementation/concurrentMarkSweep/concurrentMarkSweepGeneration.cpp
--- old/hotspot/src/share/vm/gc_implementation/concurrentMarkSweep/concurrentMarkSweepGeneration.cpp	2016-08-16 10:50:16.869047108 -0600
+++ new/hotspot/src/share/vm/gc_implementation/concurrentMarkSweep/concurrentMarkSweepGeneration.cpp	2016-08-16 14:39:07.926678451 -0600
@@ -8624,7 +8624,7 @@
 
   HeapWord* const fc_addr = (HeapWord*) fc;
 
-  bool coalesce = false;
+  bool coalesce;
   const size_t left  = pointer_delta(fc_addr, freeFinger());
   const size_t right = chunkSize;
   switch (FLSCoalescePolicy) {
diff -ruN -x '.*' old/hotspot/src/share/vm/gc_implementation/g1/concurrentMark.cpp new/hotspot/src/share/vm/gc_implementation/g1/concurrentMark.cpp
--- old/hotspot/src/share/vm/gc_implementation/g1/concurrentMark.cpp	2016-08-16 10:50:16.873047225 -0600
+++ new/hotspot/src/share/vm/gc_implementation/g1/concurrentMark.cpp	2016-08-16 14:39:07.942679168 -0600
@@ -4646,10 +4646,10 @@
 #define G1PPRL_DOUBLE_H_FORMAT        "  %14s"
 
 // For summary info
-#define G1PPRL_SUM_ADDR_FORMAT(tag)    "  "tag":"G1PPRL_ADDR_BASE_FORMAT
-#define G1PPRL_SUM_BYTE_FORMAT(tag)    "  "tag": "SIZE_FORMAT
-#define G1PPRL_SUM_MB_FORMAT(tag)      "  "tag": %1.2f MB"
-#define G1PPRL_SUM_MB_PERC_FORMAT(tag) G1PPRL_SUM_MB_FORMAT(tag)" / %1.2f %%"
+#define G1PPRL_SUM_ADDR_FORMAT(tag)    "  " tag ":" G1PPRL_ADDR_BASE_FORMAT
+#define G1PPRL_SUM_BYTE_FORMAT(tag)    "  " tag ": " SIZE_FORMAT
+#define G1PPRL_SUM_MB_FORMAT(tag)      "  " tag ": %1.2f MB"
+#define G1PPRL_SUM_MB_PERC_FORMAT(tag) G1PPRL_SUM_MB_FORMAT(tag) " / %1.2f %%"
 
 G1PrintRegionLivenessInfoClosure::
 G1PrintRegionLivenessInfoClosure(outputStream* out, const char* phase_name)
diff -ruN -x '.*' old/hotspot/src/share/vm/interpreter/bytecodeInterpreter.cpp new/hotspot/src/share/vm/interpreter/bytecodeInterpreter.cpp
--- old/hotspot/src/share/vm/interpreter/bytecodeInterpreter.cpp	2016-08-16 10:50:16.925048757 -0600
+++ new/hotspot/src/share/vm/interpreter/bytecodeInterpreter.cpp	2016-08-16 14:39:08.022682746 -0600
@@ -593,8 +593,9 @@
 /* 0xDC */ &&opc_default,     &&opc_default,        &&opc_default,      &&opc_default,
 
 /* 0xE0 */ &&opc_default,     &&opc_default,        &&opc_default,      &&opc_default,
-/* 0xE4 */ &&opc_default,     &&opc_fast_aldc,      &&opc_fast_aldc_w,  &&opc_return_register_finalizer,
-/* 0xE8 */ &&opc_invokehandle,&&opc_default,        &&opc_default,      &&opc_default,
+/* 0xE4 */ &&opc_default,     &&opc_default,        &&opc_fast_aldc,    &&opc_fast_aldc_w,
+/* 0xE8 */ &&opc_return_register_finalizer,
+                              &&opc_invokehandle,   &&opc_default,      &&opc_default,
 /* 0xEC */ &&opc_default,     &&opc_default,        &&opc_default,      &&opc_default,
 
 /* 0xF0 */ &&opc_default,     &&opc_default,        &&opc_default,      &&opc_default,
diff -ruN -x '.*' old/hotspot/src/share/vm/memory/metaspace.cpp new/hotspot/src/share/vm/memory/metaspace.cpp
--- old/hotspot/src/share/vm/memory/metaspace.cpp	2016-08-16 10:50:16.949049464 -0600
+++ new/hotspot/src/share/vm/memory/metaspace.cpp	2016-08-16 14:39:08.042683640 -0600
@@ -3232,7 +3232,11 @@
         allocate_metaspace_compressed_klass_ptrs(cds_end, cds_address);
 #endif
       } else {
+#ifndef STATIC_BUILD
         char* base = (char*)align_ptr_up(Universe::heap()->reserved_region().end(), _reserve_alignment);
+#else
+        char* base = (char*)NULL;
+#endif
         allocate_metaspace_compressed_klass_ptrs(base, 0);
       }
     }
diff -ruN -x '.*' old/hotspot/src/share/vm/memory/universe.cpp new/hotspot/src/share/vm/memory/universe.cpp
--- old/hotspot/src/share/vm/memory/universe.cpp	2016-08-16 10:50:16.961049818 -0600
+++ new/hotspot/src/share/vm/memory/universe.cpp	2016-08-16 14:39:08.038683461 -0600
@@ -712,7 +712,7 @@
   uintx heap_base_min_address_aligned = align_size_up(HeapBaseMinAddress, alignment);
 
   size_t base = 0;
-#ifdef _LP64
+#if defined(_LP64) && !defined(STATIC_BUILD)
   if (UseCompressedOops) {
     assert(mode == UnscaledNarrowOop  ||
            mode == ZeroBasedNarrowOop ||
diff -ruN -x '.*' old/hotspot/src/share/vm/prims/methodHandles.cpp new/hotspot/src/share/vm/prims/methodHandles.cpp
--- old/hotspot/src/share/vm/prims/methodHandles.cpp	2016-08-16 10:50:17.029051821 -0600
+++ new/hotspot/src/share/vm/prims/methodHandles.cpp	2016-08-16 14:39:08.166689186 -0600
@@ -1308,40 +1308,40 @@
 #define LANG "Ljava/lang/"
 #define JLINV "Ljava/lang/invoke/"
 
-#define OBJ   LANG"Object;"
-#define CLS   LANG"Class;"
-#define STRG  LANG"String;"
-#define CS    JLINV"CallSite;"
-#define MT    JLINV"MethodType;"
-#define MH    JLINV"MethodHandle;"
-#define MEM   JLINV"MemberName;"
+#define OBJ   LANG "Object;"
+#define CLS   LANG "Class;"
+#define STRG  LANG "String;"
+#define CS    JLINV "CallSite;"
+#define MT    JLINV "MethodType;"
+#define MH    JLINV "MethodHandle;"
+#define MEM   JLINV "MemberName;"
 
 #define CC (char*)  /*cast a literal from (const char*)*/
 #define FN_PTR(f) CAST_FROM_FN_PTR(void*, &f)
 
 // These are the native methods on java.lang.invoke.MethodHandleNatives.
 static JNINativeMethod MHN_methods[] = {
-  {CC"init",                      CC"("MEM""OBJ")V",                     FN_PTR(MHN_init_Mem)},
-  {CC"expand",                    CC"("MEM")V",                          FN_PTR(MHN_expand_Mem)},
-  {CC"resolve",                   CC"("MEM""CLS")"MEM,                   FN_PTR(MHN_resolve_Mem)},
-  {CC"getConstant",               CC"(I)I",                              FN_PTR(MHN_getConstant)},
+  {CC "init",                      CC "(" MEM "" OBJ ")V",                     FN_PTR(MHN_init_Mem)},
+  {CC "expand",                    CC "(" MEM ")V",                          FN_PTR(MHN_expand_Mem)},
+  {CC "resolve",                   CC "(" MEM "" CLS ")" MEM,                   FN_PTR(MHN_resolve_Mem)},
+  {CC "getConstant",               CC "(I)I",                              FN_PTR(MHN_getConstant)},
   //  static native int getNamedCon(int which, Object[] name)
-  {CC"getNamedCon",               CC"(I["OBJ")I",                        FN_PTR(MHN_getNamedCon)},
+  {CC "getNamedCon",               CC "(I[" OBJ ")I",                        FN_PTR(MHN_getNamedCon)},
   //  static native int getMembers(Class<?> defc, String matchName, String matchSig,
   //          int matchFlags, Class<?> caller, int skip, MemberName[] results);
-  {CC"getMembers",                CC"("CLS""STRG""STRG"I"CLS"I["MEM")I", FN_PTR(MHN_getMembers)},
-  {CC"objectFieldOffset",         CC"("MEM")J",                          FN_PTR(MHN_objectFieldOffset)},
-  {CC"setCallSiteTargetNormal",   CC"("CS""MH")V",                       FN_PTR(MHN_setCallSiteTargetNormal)},
-  {CC"setCallSiteTargetVolatile", CC"("CS""MH")V",                       FN_PTR(MHN_setCallSiteTargetVolatile)},
-  {CC"staticFieldOffset",         CC"("MEM")J",                          FN_PTR(MHN_staticFieldOffset)},
-  {CC"staticFieldBase",           CC"("MEM")"OBJ,                        FN_PTR(MHN_staticFieldBase)},
-  {CC"getMemberVMInfo",           CC"("MEM")"OBJ,                        FN_PTR(MHN_getMemberVMInfo)}
+  {CC "getMembers",                CC "(" CLS "" STRG "" STRG "I" CLS "I[" MEM ")I", FN_PTR(MHN_getMembers)},
+  {CC "objectFieldOffset",         CC "(" MEM ")J",                          FN_PTR(MHN_objectFieldOffset)},
+  {CC "setCallSiteTargetNormal",   CC "(" CS "" MH ")V",                       FN_PTR(MHN_setCallSiteTargetNormal)},
+  {CC "setCallSiteTargetVolatile", CC "(" CS "" MH ")V",                       FN_PTR(MHN_setCallSiteTargetVolatile)},
+  {CC "staticFieldOffset",         CC "(" MEM ")J",                          FN_PTR(MHN_staticFieldOffset)},
+  {CC "staticFieldBase",           CC "(" MEM ")" OBJ,                        FN_PTR(MHN_staticFieldBase)},
+  {CC "getMemberVMInfo",           CC "(" MEM ")" OBJ,                        FN_PTR(MHN_getMemberVMInfo)}
 };
 
 static JNINativeMethod MH_methods[] = {
   // UnsupportedOperationException throwers
-  {CC"invoke",                    CC"(["OBJ")"OBJ,                       FN_PTR(MH_invoke_UOE)},
-  {CC"invokeExact",               CC"(["OBJ")"OBJ,                       FN_PTR(MH_invokeExact_UOE)}
+  {CC "invoke",                    CC "([" OBJ ")" OBJ,                       FN_PTR(MH_invoke_UOE)},
+  {CC "invokeExact",               CC "([" OBJ ")" OBJ,                       FN_PTR(MH_invokeExact_UOE)}
 };
 
 /**
diff -ruN -x '.*' old/hotspot/src/share/vm/prims/nativeLookup.cpp new/hotspot/src/share/vm/prims/nativeLookup.cpp
--- old/hotspot/src/share/vm/prims/nativeLookup.cpp	2016-08-16 10:50:17.029051821 -0600
+++ new/hotspot/src/share/vm/prims/nativeLookup.cpp	2016-08-16 14:39:08.170689365 -0600
@@ -132,10 +132,10 @@
 #define FN_PTR(f) CAST_FROM_FN_PTR(void*, &f)
 
 static JNINativeMethod lookup_special_native_methods[] = {
-  { CC"Java_sun_misc_Unsafe_registerNatives",                      NULL, FN_PTR(JVM_RegisterUnsafeMethods)       },
-  { CC"Java_java_lang_invoke_MethodHandleNatives_registerNatives", NULL, FN_PTR(JVM_RegisterMethodHandleMethods) },
-  { CC"Java_sun_misc_Perf_registerNatives",                        NULL, FN_PTR(JVM_RegisterPerfMethods)         },
-  { CC"Java_sun_hotspot_WhiteBox_registerNatives",                 NULL, FN_PTR(JVM_RegisterWhiteBoxMethods)     },
+  { CC "Java_sun_misc_Unsafe_registerNatives",                      NULL, FN_PTR(JVM_RegisterUnsafeMethods)       },
+  { CC "Java_java_lang_invoke_MethodHandleNatives_registerNatives", NULL, FN_PTR(JVM_RegisterMethodHandleMethods) },
+  { CC "Java_sun_misc_Perf_registerNatives",                        NULL, FN_PTR(JVM_RegisterPerfMethods)         },
+  { CC "Java_sun_hotspot_WhiteBox_registerNatives",                 NULL, FN_PTR(JVM_RegisterWhiteBoxMethods)     },
 };
 
 static address lookup_special_native(char* jni_name) {
diff -ruN -x '.*' old/hotspot/src/share/vm/prims/nativeSymbolMap.cpp new/hotspot/src/share/vm/prims/nativeSymbolMap.cpp
--- old/hotspot/src/share/vm/prims/nativeSymbolMap.cpp	1969-12-31 17:00:00.000000000 -0700
+++ new/hotspot/src/share/vm/prims/nativeSymbolMap.cpp	2016-08-17 14:28:45.567750021 -0600
@@ -0,0 +1,945 @@
+#include "nativeSymbolMap.h"
+#include <unordered_map>
+#include <string>
+
+#define ADD_SYMBOL_MAP(name) \
+symbol_map[#name] = (void*) name;
+
+static std::unordered_map<std::string, void*> symbol_map;
+
+void *static_dlopen() {
+    if(symbol_map.empty()) {
+        create_symbol_map();
+    } 
+    // to avoid null check; may be a problem later
+    return (void*) 0xdeadbeef;
+}
+
+void *static_dlsym(const char *name) {
+#ifndef DEBUG
+    return (symbol_map.empty()) ? NULL : symbol_map[name];
+#else
+    void* func = NULL;
+    if(!symbol_map.empty()) {
+        func = symbol_map[name];
+        if(func == NULL) {
+            fprintf(stderr, "Could not find function name %s\n", name);
+        } else {
+            return func;
+        }
+    } else {
+        fprintf(stderr, "Map is not initilized yet %s\n", name);
+    }
+    return NULL;
+#endif
+}
+
+int static_dlclose() {
+    return 0;
+}
+
+void create_symbol_map() {
+    // Static JNI APIs
+    ADD_SYMBOL_MAP(JNI_OnLoad_java)
+    ADD_SYMBOL_MAP(JNI_OnLoad_net)
+    ADD_SYMBOL_MAP(JNI_OnLoad_verify)
+    ADD_SYMBOL_MAP(JNI_OnLoad_zip)
+    ADD_SYMBOL_MAP(JNI_OnLoad_management)
+    ADD_SYMBOL_MAP(JNI_OnLoad_j2pkcs11)
+    ADD_SYMBOL_MAP(JNI_OnLoad_j2pcsc)
+    ADD_SYMBOL_MAP(JNI_OnLoad_j2gss)
+    ADD_SYMBOL_MAP(JNI_OnUnload_j2gss)
+    ADD_SYMBOL_MAP(JNI_OnLoad_jaas_unix)
+    ADD_SYMBOL_MAP(Agent_OnLoad_jdwp)
+    ADD_SYMBOL_MAP(Agent_OnUnload_jdwp)
+    ADD_SYMBOL_MAP(JNI_OnLoad_sunec)
+    ADD_SYMBOL_MAP(JNI_OnLoad_nio)
+    ADD_SYMBOL_MAP(Agent_OnLoad_instrument)
+    ADD_SYMBOL_MAP(Agent_OnAttach_instrument)
+    ADD_SYMBOL_MAP(Agent_OnUnload_instrument)
+
+    // ZIP APIs
+    ADD_SYMBOL_MAP(ZIP_FindEntry)
+    ADD_SYMBOL_MAP(ZIP_ReadEntry)
+    ADD_SYMBOL_MAP(ZIP_GetNextEntry)
+    ADD_SYMBOL_MAP(ZIP_Open)
+    ADD_SYMBOL_MAP(ZIP_Open_Generic)
+    ADD_SYMBOL_MAP(ZIP_Get_From_Cache)
+    ADD_SYMBOL_MAP(ZIP_Close)
+    ADD_SYMBOL_MAP(ZIP_Lock)
+    ADD_SYMBOL_MAP(ZIP_Unlock)
+    ADD_SYMBOL_MAP(ZIP_Read)
+    ADD_SYMBOL_MAP(ZIP_FreeEntry)
+    ADD_SYMBOL_MAP(ZIP_GetEntryDataOffset)
+    ADD_SYMBOL_MAP(ZIP_GetEntry2)
+    ADD_SYMBOL_MAP(ZIP_CRC32)
+
+    // Solaris Native APIs
+    ADD_SYMBOL_MAP(Java_com_sun_security_auth_module_UnixSystem_getUnixInfo)
+    ADD_SYMBOL_MAP(Java_java_util_prefs_FileSystemPreferences_chmod)
+    ADD_SYMBOL_MAP(Java_java_util_prefs_FileSystemPreferences_lockFile0)
+    ADD_SYMBOL_MAP(Java_java_util_prefs_FileSystemPreferences_unlockFile0)
+    ADD_SYMBOL_MAP(Java_java_util_logging_FileHandler_isSetUID)
+    ADD_SYMBOL_MAP(Java_java_nio_MappedByteBuffer_isLoaded0)
+    ADD_SYMBOL_MAP(Java_java_nio_MappedByteBuffer_load0)
+    ADD_SYMBOL_MAP(Java_java_nio_MappedByteBuffer_force0)
+    ADD_SYMBOL_MAP(Java_java_net_PlainSocketImpl_initProto)
+    ADD_SYMBOL_MAP(Java_java_net_PlainSocketImpl_socketCreate)
+    ADD_SYMBOL_MAP(Java_java_net_PlainSocketImpl_socketConnect)
+    ADD_SYMBOL_MAP(Java_java_net_PlainSocketImpl_socketBind)
+    ADD_SYMBOL_MAP(Java_java_net_PlainSocketImpl_socketListen)
+    ADD_SYMBOL_MAP(Java_java_net_PlainSocketImpl_socketAccept)
+    ADD_SYMBOL_MAP(Java_java_net_PlainSocketImpl_socketAvailable)
+    ADD_SYMBOL_MAP(Java_java_net_PlainSocketImpl_socketClose0)
+    ADD_SYMBOL_MAP(Java_java_net_PlainSocketImpl_socketShutdown)
+    ADD_SYMBOL_MAP(Java_java_net_PlainSocketImpl_socketSetOption0)
+    ADD_SYMBOL_MAP(Java_java_net_PlainSocketImpl_socketGetOption)
+    ADD_SYMBOL_MAP(Java_java_net_PlainSocketImpl_socketSendUrgentData)
+    ADD_SYMBOL_MAP(Java_java_net_InetAddressImplFactory_isIPv6Supported)
+    ADD_SYMBOL_MAP(Java_java_net_Inet4AddressImpl_getLocalHostName)
+    ADD_SYMBOL_MAP(Java_java_net_Inet4AddressImpl_lookupAllHostAddr)
+    ADD_SYMBOL_MAP(Java_java_net_Inet4AddressImpl_getHostByAddr)
+    ADD_SYMBOL_MAP(Java_java_net_Inet4AddressImpl_getLocalHostName)
+    ADD_SYMBOL_MAP(Java_java_net_Inet4AddressImpl_lookupAllHostAddr)
+    ADD_SYMBOL_MAP(Java_java_net_Inet4AddressImpl_getHostByAddr)
+    ADD_SYMBOL_MAP(Java_java_net_Inet4AddressImpl_isReachable0)
+    ADD_SYMBOL_MAP(Java_java_net_Inet6AddressImpl_getLocalHostName)
+    ADD_SYMBOL_MAP(Java_java_net_Inet6AddressImpl_lookupAllHostAddr)
+    ADD_SYMBOL_MAP(Java_java_net_Inet6AddressImpl_getHostByAddr)
+    ADD_SYMBOL_MAP(Java_java_net_Inet6AddressImpl_isReachable0)
+    ADD_SYMBOL_MAP(Java_java_net_NetworkInterface_init)
+    ADD_SYMBOL_MAP(Java_java_net_NetworkInterface_getByName0)
+    ADD_SYMBOL_MAP(Java_java_net_NetworkInterface_getByIndex0)
+    ADD_SYMBOL_MAP(Java_java_net_NetworkInterface_getByInetAddress0)
+    ADD_SYMBOL_MAP(Java_java_net_NetworkInterface_getAll)
+    ADD_SYMBOL_MAP(Java_java_net_NetworkInterface_isUp0)
+    ADD_SYMBOL_MAP(Java_java_net_NetworkInterface_isP2P0)
+    ADD_SYMBOL_MAP(Java_java_net_NetworkInterface_isLoopback0)
+    ADD_SYMBOL_MAP(Java_java_net_NetworkInterface_supportsMulticast0)
+    ADD_SYMBOL_MAP(Java_java_net_NetworkInterface_getMacAddr0)
+    ADD_SYMBOL_MAP(Java_java_net_NetworkInterface_getMTU0)
+    ADD_SYMBOL_MAP(Java_java_net_SocketOutputStream_init)
+    ADD_SYMBOL_MAP(Java_java_net_SocketOutputStream_socketWrite0)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_init)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_bind0)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_connect0)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_disconnect0)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_send)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_peek)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_peekData)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_receive0)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_datagramSocketCreate)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_datagramSocketClose)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_socketSetOption0)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_socketGetOption)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_setTTL)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_setTimeToLive)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_getTTL)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_getTimeToLive)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_join)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_leave)
+    ADD_SYMBOL_MAP(Java_java_net_PlainDatagramSocketImpl_dataAvailable)
+    ADD_SYMBOL_MAP(NET_EnableFastTcpLoopback)
+    ADD_SYMBOL_MAP(NET_InetAddressToSockaddr)
+    ADD_SYMBOL_MAP(NET_GetPortFromSockaddr)
+    ADD_SYMBOL_MAP(Java_java_net_SocketInputStream_init)
+    ADD_SYMBOL_MAP(Java_java_net_SocketInputStream_socketRead0)
+    ADD_SYMBOL_MAP(Java_sun_net_ExtendedOptionsImpl_init)
+    ADD_SYMBOL_MAP(Java_sun_net_ExtendedOptionsImpl_setFlowOption)
+    ADD_SYMBOL_MAP(Java_sun_net_ExtendedOptionsImpl_getFlowOption)
+    ADD_SYMBOL_MAP(Java_sun_net_ExtendedOptionsImpl_setFlowOption)
+    ADD_SYMBOL_MAP(Java_sun_net_ExtendedOptionsImpl_getFlowOption)
+    ADD_SYMBOL_MAP(Java_sun_net_ExtendedOptionsImpl_flowSupported)
+    ADD_SYMBOL_MAP(Java_java_lang_ProcessEnvironment_environ)
+    ADD_SYMBOL_MAP(Java_java_lang_UNIXProcess_init)
+    ADD_SYMBOL_MAP(Java_java_lang_UNIXProcess_waitForProcessExit)
+    ADD_SYMBOL_MAP(Java_java_lang_UNIXProcess_forkAndExec)
+    ADD_SYMBOL_MAP(Java_java_lang_UNIXProcess_destroyProcess)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_initIDs)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_canonicalize0)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_getBooleanAttributes0)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_checkAccess)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_setPermission)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_getLastModifiedTime)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_getLength)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_createFileExclusively)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_delete0)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_list)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_createDirectory)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_rename0)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_setLastModifiedTime)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_setReadOnly)
+    ADD_SYMBOL_MAP(Java_java_io_UnixFileSystem_getSpace)
+    ADD_SYMBOL_MAP(Java_java_io_Console_istty)
+    ADD_SYMBOL_MAP(Java_java_io_Console_encoding)
+    ADD_SYMBOL_MAP(Java_java_io_Console_echo)
+    ADD_SYMBOL_MAP(Java_java_io_FileOutputStream_initIDs)
+    ADD_SYMBOL_MAP(Java_java_io_FileOutputStream_open0)
+    ADD_SYMBOL_MAP(Java_java_io_FileOutputStream_write)
+    ADD_SYMBOL_MAP(Java_java_io_FileOutputStream_writeBytes)
+    ADD_SYMBOL_MAP(Java_java_io_FileOutputStream_close0)
+    ADD_SYMBOL_MAP(Java_java_io_FileDescriptor_initIDs)
+    ADD_SYMBOL_MAP(Java_java_io_FileDescriptor_sync)
+    ADD_SYMBOL_MAP(Java_java_io_FileInputStream_close0)
+    ADD_SYMBOL_MAP(Java_java_io_RandomAccessFile_close0)
+    ADD_SYMBOL_MAP(Java_sun_tools_attach_BsdVirtualMachine_socket)
+    ADD_SYMBOL_MAP(Java_sun_tools_attach_BsdVirtualMachine_connect)
+    ADD_SYMBOL_MAP(Java_sun_tools_attach_BsdVirtualMachine_sendQuitTo)
+    ADD_SYMBOL_MAP(Java_sun_tools_attach_BsdVirtualMachine_checkPermissions)
+    ADD_SYMBOL_MAP(Java_sun_tools_attach_BsdVirtualMachine_close)
+    ADD_SYMBOL_MAP(Java_sun_tools_attach_BsdVirtualMachine_read)
+    ADD_SYMBOL_MAP(Java_sun_tools_attach_BsdVirtualMachine_write)
+    ADD_SYMBOL_MAP(Java_sun_tools_attach_BsdVirtualMachine_createAttachFile)
+    ADD_SYMBOL_MAP(Java_sun_tools_attach_BsdVirtualMachine_getTempDir)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_connect)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_disconnect)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_Secmod_nssGetLibraryHandle)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_Secmod_nssLoadLibrary)
+    ADD_SYMBOL_MAP(Java_sun_security_smartcardio_PlatformPCSC_initialize)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_BsdNativeDispatcher_initIDs)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_BsdNativeDispatcher_getfsstat)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_BsdNativeDispatcher_fsstatEntry)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_BsdNativeDispatcher_endfsstat)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixCopyFile_transfer)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_MagicFileTypeDetector_initialize0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_MagicFileTypeDetector_probe0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_GnomeFileTypeDetector_initializeGio)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_GnomeFileTypeDetector_probeUsingGio)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_GnomeFileTypeDetector_initializeGnomeVfs)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_GnomeFileTypeDetector_probeUsingGnomeVfs)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_init)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_getcwd)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_strerror)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_dup)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_fopen0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_fclose)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_open0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_openat0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_close)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_read)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_write)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_stat0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_lstat0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_fstat)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_fstatat0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_chmod0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_fchmod)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_chown0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_lchown0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_fchown)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_utimes0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_futimes)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_opendir0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_fdopendir)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_closedir)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_readdir)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_mkdir0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_rmdir0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_link0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_unlink0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_unlinkat0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_rename0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_renameat0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_symlink0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_readlink0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_realpath0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_access0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_statvfs0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_pathconf0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_fpathconf)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_mknod0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_getpwuid)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_getgrgid)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_getpwnam0)
+    ADD_SYMBOL_MAP(Java_sun_nio_fs_UnixNativeDispatcher_getgrnam0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileChannelImpl_initIDs)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileChannelImpl_map0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileChannelImpl_unmap0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileChannelImpl_position0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileChannelImpl_close0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileChannelImpl_transferTo0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_NativeThread_init)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_NativeThread_current)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_NativeThread_signal)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_UnixAsynchronousSocketChannelImpl_checkConnect)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_initIDs)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_isIPv6Available0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_isExclusiveBindAvailable)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_canIPv6SocketJoinIPv4Group0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_canJoin6WithIPv4Group0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_socket0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_bind0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_listen)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_connect0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_localPort)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_localInetAddress)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_getIntOption0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_setIntOption0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_joinOrDrop4)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_blockOrUnblock4)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_joinOrDrop6)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_blockOrUnblock6)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_setInterface4)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_getInterface4)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_setInterface6)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_getInterface6)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_shutdown)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_poll)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_pollinValue)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_polloutValue)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_pollerrValue)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_pollhupValue)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_pollnvalValue)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_Net_pollconnValue)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueue_keventSize)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueue_identOffset)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueue_filterOffset)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueue_flagsOffset)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueue_kqueue)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueue_keventRegister)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueue_keventPoll)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileKey_initIDs)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileKey_init)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_DatagramDispatcher_read0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_DatagramDispatcher_readv0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_DatagramDispatcher_write0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_DatagramDispatcher_writev0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_ServerSocketChannelImpl_initIDs)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_ServerSocketChannelImpl_accept0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_SocketChannelImpl_checkConnect)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_SocketChannelImpl_sendOutOfBandData)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_PollArrayWrapper_poll0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_PollArrayWrapper_interrupt)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_init)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_read0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_pread0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_readv0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_write0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_pwrite0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_writev0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_force0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_truncate0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_size0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_lock0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_release0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_close0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_preClose0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_FileDispatcherImpl_closeIntFD)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_IOUtil_initIDs)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_IOUtil_randomBytes)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_IOUtil_fdVal)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_IOUtil_setfdVal)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_IOUtil_configureBlocking)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_IOUtil_makePipe)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_IOUtil_drain)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_IOUtil_fdLimit)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_IOUtil_iovMax)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_DatagramChannelImpl_initIDs)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_DatagramChannelImpl_disconnect0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_DatagramChannelImpl_receive0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_DatagramChannelImpl_send0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueuePort_socketpair)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueuePort_interrupt)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueuePort_drain1)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueuePort_close0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_UnixAsynchronousServerSocketChannelImpl_initIDs)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_UnixAsynchronousServerSocketChannelImpl_accept0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_InheritedChannel_peerAddress0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_InheritedChannel_peerPort0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_InheritedChannel_soType0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_InheritedChannel_dup)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_InheritedChannel_dup2)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_InheritedChannel_open0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_InheritedChannel_close0)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_initialize)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getCommittedVirtualMemorySize)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getTotalSwapSpaceSize)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getFreeSwapSpaceSize)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getProcessCpuTime)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getFreePhysicalMemorySize)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getTotalPhysicalMemorySize)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getOpenFileDescriptorCount)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getMaxFileDescriptorCount)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getSystemCpuLoad)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getProcessCpuLoad)
+    ADD_SYMBOL_MAP(Java_sun_management_FileSystemImpl_isAccessUserOnly0)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getSystemCpuLoad)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getProcessCpuLoad)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getSystemCpuLoad)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getProcessCpuLoad)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getSystemCpuLoad)
+    ADD_SYMBOL_MAP(Java_sun_management_OperatingSystemImpl_getProcessCpuLoad)
+    ADD_SYMBOL_MAP(Java_sun_net_dns_ResolverConfigurationImpl_localDomain0)
+    ADD_SYMBOL_MAP(Java_sun_net_dns_ResolverConfigurationImpl_fallbackDomain0)
+    ADD_SYMBOL_MAP(Java_sun_net_sdp_SdpSupport_create0)
+    ADD_SYMBOL_MAP(Java_sun_net_sdp_SdpSupport_convert0)
+    ADD_SYMBOL_MAP(Java_sun_net_spi_DefaultProxySelector_init)
+    ADD_SYMBOL_MAP(Java_sun_net_spi_DefaultProxySelector_getSystemProxy)
+    ADD_SYMBOL_MAP(Java_sun_net_PortConfig_getLower0)
+    ADD_SYMBOL_MAP(Java_sun_net_PortConfig_getUpper0)
+
+    // Share Native APIs
+    ADD_SYMBOL_MAP(Java_com_sun_java_util_jar_pack_NativeUnpack_initIDs)
+    ADD_SYMBOL_MAP(Java_com_sun_java_util_jar_pack_NativeUnpack_start)
+    ADD_SYMBOL_MAP(Java_com_sun_java_util_jar_pack_NativeUnpack_getNextFile)
+    ADD_SYMBOL_MAP(Java_com_sun_java_util_jar_pack_NativeUnpack_getUnusedInput)
+    ADD_SYMBOL_MAP(Java_com_sun_java_util_jar_pack_NativeUnpack_finish)
+    ADD_SYMBOL_MAP(Java_com_sun_java_util_jar_pack_NativeUnpack_setOption)
+    ADD_SYMBOL_MAP(Java_com_sun_java_util_jar_pack_NativeUnpack_getOption)
+    ADD_SYMBOL_MAP(jio_snprintf)
+    ADD_SYMBOL_MAP(jio_fprintf)
+    ADD_SYMBOL_MAP(JNU_ThrowByName)
+    ADD_SYMBOL_MAP(JNU_ThrowNullPointerException)
+    ADD_SYMBOL_MAP(JNU_ThrowArrayIndexOutOfBoundsException)
+    ADD_SYMBOL_MAP(JNU_ThrowOutOfMemoryError)
+    ADD_SYMBOL_MAP(JNU_ThrowIllegalArgumentException)
+    ADD_SYMBOL_MAP(JNU_ThrowIllegalAccessError)
+    ADD_SYMBOL_MAP(JNU_ThrowIllegalAccessException)
+    ADD_SYMBOL_MAP(JNU_ThrowInternalError)
+    ADD_SYMBOL_MAP(JNU_ThrowIOException)
+    ADD_SYMBOL_MAP(JNU_ThrowNoSuchFieldException)
+    ADD_SYMBOL_MAP(JNU_ThrowNoSuchMethodException)
+    ADD_SYMBOL_MAP(JNU_ThrowClassNotFoundException)
+    ADD_SYMBOL_MAP(JNU_ThrowNumberFormatException)
+    ADD_SYMBOL_MAP(JNU_ThrowNoSuchFieldError)
+    ADD_SYMBOL_MAP(JNU_ThrowNoSuchMethodError)
+    ADD_SYMBOL_MAP(JNU_ThrowStringIndexOutOfBoundsException)
+    ADD_SYMBOL_MAP(JNU_ThrowInstantiationException)
+    ADD_SYMBOL_MAP(JNU_ThrowByNameWithLastError)
+    ADD_SYMBOL_MAP(JNU_ThrowIOExceptionWithLastError)
+    ADD_SYMBOL_MAP(NewStringPlatform)
+    ADD_SYMBOL_MAP(GetStringPlatformChars)
+    ADD_SYMBOL_MAP(JNU_NewStringPlatform)
+    ADD_SYMBOL_MAP(JNU_GetStringPlatformChars)
+    ADD_SYMBOL_MAP(JNU_ReleaseStringPlatformChars)
+    ADD_SYMBOL_MAP(JNU_ClassString)
+    ADD_SYMBOL_MAP(JNU_ClassClass)
+    ADD_SYMBOL_MAP(JNU_ClassObject)
+    ADD_SYMBOL_MAP(JNU_ClassThrowable)
+    ADD_SYMBOL_MAP(JNU_CopyObjectArray)
+    ADD_SYMBOL_MAP(JNU_CallStaticMethodByName)
+    ADD_SYMBOL_MAP(JNU_CallMethodByName)
+    ADD_SYMBOL_MAP(JNU_CallMethodByNameV)
+    ADD_SYMBOL_MAP(JNU_NewObjectByName)
+    ADD_SYMBOL_MAP(JNU_IsInstanceOfByName)
+    ADD_SYMBOL_MAP(JNU_GetFieldByName)
+    ADD_SYMBOL_MAP(JNU_SetFieldByName)
+    ADD_SYMBOL_MAP(JNU_GetStaticFieldByName)
+    ADD_SYMBOL_MAP(JNU_SetStaticFieldByName)
+    ADD_SYMBOL_MAP(JNU_Equals)
+    ADD_SYMBOL_MAP(JNU_MonitorWait)
+    ADD_SYMBOL_MAP(JNU_Notify)
+    ADD_SYMBOL_MAP(JNU_NotifyAll)
+    ADD_SYMBOL_MAP(JNU_PrintString)
+    ADD_SYMBOL_MAP(JNU_PrintClass)
+    ADD_SYMBOL_MAP(JNU_ToString)
+    ADD_SYMBOL_MAP(JNU_GetEnv)
+    ADD_SYMBOL_MAP(VerifyClassname)
+    ADD_SYMBOL_MAP(VerifyFixClassname)
+    ADD_SYMBOL_MAP(VerifyClassCodes)
+    ADD_SYMBOL_MAP(VerifyClassCodesForMajorVersion)
+    ADD_SYMBOL_MAP(JDK_GetVersionInfo0)
+    ADD_SYMBOL_MAP(VerifyClassForMajorVersion)
+    ADD_SYMBOL_MAP(VerifyClass)
+    ADD_SYMBOL_MAP(JNU_ThrowByName)
+    ADD_SYMBOL_MAP(JNU_ThrowNullPointerException)
+    ADD_SYMBOL_MAP(JNU_ThrowArrayIndexOutOfBoundsException)
+    ADD_SYMBOL_MAP(JNU_ThrowOutOfMemoryError)
+    ADD_SYMBOL_MAP(JNU_ThrowIllegalArgumentException)
+    ADD_SYMBOL_MAP(JNU_ThrowIllegalAccessError)
+    ADD_SYMBOL_MAP(JNU_ThrowIllegalAccessException)
+    ADD_SYMBOL_MAP(JNU_ThrowInternalError)
+    ADD_SYMBOL_MAP(JNU_ThrowNoSuchFieldException)
+    ADD_SYMBOL_MAP(JNU_ThrowNoSuchMethodException)
+    ADD_SYMBOL_MAP(JNU_ThrowClassNotFoundException)
+    ADD_SYMBOL_MAP(JNU_ThrowNumberFormatException)
+    ADD_SYMBOL_MAP(JNU_ThrowIOException)
+    ADD_SYMBOL_MAP(JNU_ThrowNoSuchFieldError)
+    ADD_SYMBOL_MAP(JNU_ThrowNoSuchMethodError)
+    ADD_SYMBOL_MAP(JNU_ThrowStringIndexOutOfBoundsException)
+    ADD_SYMBOL_MAP(JNU_ThrowInstantiationException)
+    ADD_SYMBOL_MAP(JNU_ThrowByNameWithLastError)
+    ADD_SYMBOL_MAP(JNU_ThrowIOExceptionWithLastError)
+    ADD_SYMBOL_MAP(JNU_CallStaticMethodByName)
+    ADD_SYMBOL_MAP(JNU_CallMethodByName)
+    ADD_SYMBOL_MAP(JNU_CallMethodByNameV)
+    ADD_SYMBOL_MAP(JNU_NewObjectByName)
+    ADD_SYMBOL_MAP(NewStringPlatform)
+    ADD_SYMBOL_MAP(JNU_NewStringPlatform)
+    ADD_SYMBOL_MAP(GetStringPlatformChars)
+    ADD_SYMBOL_MAP(JNU_GetStringPlatformChars)
+    ADD_SYMBOL_MAP(JNU_ReleaseStringPlatformChars)
+    ADD_SYMBOL_MAP(Canonicalize)
+    ADD_SYMBOL_MAP(JNU_ClassString)
+    ADD_SYMBOL_MAP(JNU_ClassClass)
+    ADD_SYMBOL_MAP(JNU_ClassObject)
+    ADD_SYMBOL_MAP(JNU_ClassThrowable)
+    ADD_SYMBOL_MAP(JNU_CopyObjectArray)
+    ADD_SYMBOL_MAP(JNU_GetEnv)
+    ADD_SYMBOL_MAP(JNU_IsInstanceOfByName)
+    ADD_SYMBOL_MAP(JNU_Equals)
+    ADD_SYMBOL_MAP(JNU_MonitorWait)
+    ADD_SYMBOL_MAP(JNU_Notify)
+    ADD_SYMBOL_MAP(JNU_NotifyAll)
+    ADD_SYMBOL_MAP(JNU_PrintString)
+    ADD_SYMBOL_MAP(JNU_PrintClass)
+    ADD_SYMBOL_MAP(JNU_ToString)
+    ADD_SYMBOL_MAP(JNU_GetFieldByName)
+    ADD_SYMBOL_MAP(JNU_SetFieldByName)
+    ADD_SYMBOL_MAP(JNU_GetStaticFieldByName)
+    ADD_SYMBOL_MAP(JNU_SetStaticFieldByName)
+    ADD_SYMBOL_MAP(Java_java_util_TimeZone_getSystemTimeZoneID)
+    ADD_SYMBOL_MAP(Java_java_util_TimeZone_getSystemGMTOffsetID)
+    ADD_SYMBOL_MAP(Java_java_util_zip_CRC32_update)
+    ADD_SYMBOL_MAP(Java_java_util_zip_CRC32_updateBytes)
+    ADD_SYMBOL_MAP(ZIP_CRC32)
+    ADD_SYMBOL_MAP(Java_java_util_zip_CRC32_updateByteBuffer)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Deflater_initIDs)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Deflater_init)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Deflater_setDictionary)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Deflater_deflateBytes)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Deflater_getAdler)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Deflater_reset)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Deflater_end)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Adler32_update)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Adler32_updateBytes)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Adler32_updateByteBuffer)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_initIDs)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_open)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_getTotal)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_startsWithLOC)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_close)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_getEntry)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_freeEntry)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_getNextEntry)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_getEntryMethod)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_getEntryFlag)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_getEntryCSize)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_getEntrySize)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_getEntryTime)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_getEntryCrc)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_getCommentBytes)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_getEntryBytes)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_read)
+    ADD_SYMBOL_MAP(Java_java_util_jar_JarFile_getMetaInfEntryNames)
+    ADD_SYMBOL_MAP(Java_java_util_zip_ZipFile_getZipMessage)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Inflater_initIDs)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Inflater_init)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Inflater_setDictionary)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Inflater_inflateBytes)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Inflater_getAdler)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Inflater_reset)
+    ADD_SYMBOL_MAP(Java_java_util_zip_Inflater_end)
+    ADD_SYMBOL_MAP(Java_java_util_concurrent_atomic_AtomicLong_VMSupportsCS8)
+    ADD_SYMBOL_MAP(Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedAction_2)
+    ADD_SYMBOL_MAP(Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedAction_2Ljava_security_AccessControlContext_2)
+    ADD_SYMBOL_MAP(Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedExceptionAction_2)
+    ADD_SYMBOL_MAP(Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedExceptionAction_2Ljava_security_AccessControlContext_2)
+    ADD_SYMBOL_MAP(Java_java_security_AccessController_getStackAccessControlContext)
+    ADD_SYMBOL_MAP(Java_java_security_AccessController_getInheritedAccessControlContext)
+    ADD_SYMBOL_MAP(Java_java_nio_Bits_copyFromShortArray)
+    ADD_SYMBOL_MAP(Java_java_nio_Bits_copyToShortArray)
+    ADD_SYMBOL_MAP(Java_java_nio_Bits_copyFromIntArray)
+    ADD_SYMBOL_MAP(Java_java_nio_Bits_copyToIntArray)
+    ADD_SYMBOL_MAP(Java_java_nio_Bits_copyFromLongArray)
+    ADD_SYMBOL_MAP(Java_java_nio_Bits_copyToLongArray)
+    ADD_SYMBOL_MAP(Java_java_net_InetAddress_init)
+    ADD_SYMBOL_MAP(Java_java_net_Inet4Address_init)
+    ADD_SYMBOL_MAP(Java_java_net_Inet6Address_init)
+    ADD_SYMBOL_MAP(Java_java_net_NetworkInterface_init)
+    ADD_SYMBOL_MAP(NET_ThrowNew)
+    ADD_SYMBOL_MAP(ipv6_available)
+    ADD_SYMBOL_MAP(NET_InetAddressToSockaddr)
+    ADD_SYMBOL_MAP(NET_SockaddrToInetAddress)
+    ADD_SYMBOL_MAP(NET_GetPortFromSockaddr)
+    ADD_SYMBOL_MAP(NET_SockaddrEqualsInetAddress)
+    ADD_SYMBOL_MAP(NET_GetSockOpt)
+    ADD_SYMBOL_MAP(NET_SetSockOpt)
+    ADD_SYMBOL_MAP(NET_Bind)
+    ADD_SYMBOL_MAP(NET_MapSocketOption)
+    ADD_SYMBOL_MAP(NET_EnableFastTcpLoopback)
+    ADD_SYMBOL_MAP(Java_java_net_Inet6Address_init)
+    ADD_SYMBOL_MAP(Java_java_net_InetAddress_init)
+    ADD_SYMBOL_MAP(Java_java_net_DatagramPacket_init)
+    ADD_SYMBOL_MAP(ipv6_available)
+    ADD_SYMBOL_MAP(NET_SockaddrToInetAddress)
+    ADD_SYMBOL_MAP(NET_SockaddrEqualsInetAddress)
+    ADD_SYMBOL_MAP(Java_java_net_Inet4Address_init)
+    ADD_SYMBOL_MAP(Java_java_lang_Shutdown_halt0)
+    ADD_SYMBOL_MAP(Java_java_lang_Shutdown_runAllFinalizers)
+    ADD_SYMBOL_MAP(Java_java_lang_System_registerNatives)
+    ADD_SYMBOL_MAP(Java_java_lang_System_identityHashCode)
+    ADD_SYMBOL_MAP(Java_java_lang_System_initProperties)
+    ADD_SYMBOL_MAP(Java_java_lang_System_setIn0)
+    ADD_SYMBOL_MAP(Java_java_lang_System_setOut0)
+    ADD_SYMBOL_MAP(Java_java_lang_System_setErr0)
+    ADD_SYMBOL_MAP(Java_java_lang_System_mapLibraryName)
+    ADD_SYMBOL_MAP(Java_java_lang_SecurityManager_getClassContext)
+    ADD_SYMBOL_MAP(Java_java_lang_SecurityManager_currentLoadedClass0)
+    ADD_SYMBOL_MAP(Java_java_lang_SecurityManager_currentClassLoader0)
+    ADD_SYMBOL_MAP(Java_java_lang_SecurityManager_classDepth)
+    ADD_SYMBOL_MAP(Java_java_lang_SecurityManager_classLoaderDepth0)
+    ADD_SYMBOL_MAP(Java_java_lang_Thread_registerNatives)
+    ADD_SYMBOL_MAP(Java_java_lang_Compiler_registerNatives)
+    ADD_SYMBOL_MAP(Java_java_lang_ClassLoader_registerNatives)
+    ADD_SYMBOL_MAP(Java_java_lang_ClassLoader_defineClass0)
+    ADD_SYMBOL_MAP(Java_java_lang_ClassLoader_defineClass1)
+    ADD_SYMBOL_MAP(Java_java_lang_ClassLoader_defineClass2)
+    ADD_SYMBOL_MAP(Java_java_lang_ClassLoader_resolveClass0)
+    ADD_SYMBOL_MAP(Java_java_lang_ClassLoader_findBootstrapClass)
+    ADD_SYMBOL_MAP(Java_java_lang_ClassLoader_findLoadedClass0)
+    ADD_SYMBOL_MAP(Java_java_lang_ClassLoader_00024NativeLibrary_load)
+    ADD_SYMBOL_MAP(Java_java_lang_ClassLoader_00024NativeLibrary_unload)
+    ADD_SYMBOL_MAP(Java_java_lang_ClassLoader_00024NativeLibrary_find)
+    ADD_SYMBOL_MAP(Java_java_lang_ClassLoader_findBuiltinLib)
+    ADD_SYMBOL_MAP(Java_java_lang_Throwable_fillInStackTrace)
+    ADD_SYMBOL_MAP(Java_java_lang_Throwable_getStackTraceDepth)
+    ADD_SYMBOL_MAP(Java_java_lang_Throwable_getStackTraceElement)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_cos)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_sin)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_tan)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_asin)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_acos)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_atan)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_exp)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_log)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_log10)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_sqrt)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_cbrt)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_atan2)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_pow)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_IEEEremainder)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_cosh)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_sinh)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_tanh)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_hypot)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_log1p)
+    ADD_SYMBOL_MAP(Java_java_lang_StrictMath_expm1)
+    ADD_SYMBOL_MAP(Java_java_lang_Float_intBitsToFloat)
+    ADD_SYMBOL_MAP(Java_java_lang_Float_floatToRawIntBits)
+    ADD_SYMBOL_MAP(Java_java_lang_Class_registerNatives)
+    ADD_SYMBOL_MAP(Java_java_lang_Class_forName0)
+    ADD_SYMBOL_MAP(Java_java_lang_Class_isInstance)
+    ADD_SYMBOL_MAP(Java_java_lang_Class_isAssignableFrom)
+    ADD_SYMBOL_MAP(Java_java_lang_Class_getPrimitiveClass)
+    ADD_SYMBOL_MAP(Java_java_lang_Object_registerNatives)
+    ADD_SYMBOL_MAP(Java_java_lang_Object_getClass)
+    ADD_SYMBOL_MAP(Java_java_lang_String_intern)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Field_getTypeAnnotationBytes0)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_getLength)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_get)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_getBoolean)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_getByte)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_getChar)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_getShort)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_getInt)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_getLong)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_getFloat)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_getDouble)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_set)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_setBoolean)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_setByte)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_setChar)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_setShort)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_setInt)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_setLong)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_setFloat)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_setDouble)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_newArray)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Array_multiNewArray)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Executable_getParameters0)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Executable_getTypeAnnotationBytes0)
+    ADD_SYMBOL_MAP(Java_java_lang_reflect_Proxy_defineClass0)
+    ADD_SYMBOL_MAP(Java_java_lang_Runtime_freeMemory)
+    ADD_SYMBOL_MAP(Java_java_lang_Runtime_totalMemory)
+    ADD_SYMBOL_MAP(Java_java_lang_Runtime_maxMemory)
+    ADD_SYMBOL_MAP(Java_java_lang_Runtime_gc)
+    ADD_SYMBOL_MAP(Java_java_lang_Runtime_traceInstructions)
+    ADD_SYMBOL_MAP(Java_java_lang_Runtime_traceMethodCalls)
+    ADD_SYMBOL_MAP(Java_java_lang_Runtime_runFinalization0)
+    ADD_SYMBOL_MAP(Java_java_lang_Runtime_availableProcessors)
+    ADD_SYMBOL_MAP(Java_java_lang_Package_getSystemPackage0)
+    ADD_SYMBOL_MAP(Java_java_lang_Package_getSystemPackages0)
+    ADD_SYMBOL_MAP(Java_java_lang_Double_longBitsToDouble)
+    ADD_SYMBOL_MAP(Java_java_lang_Double_doubleToRawLongBits)
+    ADD_SYMBOL_MAP(Java_java_io_ObjectStreamClass_initNative)
+    ADD_SYMBOL_MAP(Java_java_io_ObjectStreamClass_hasStaticInitializer)
+    ADD_SYMBOL_MAP(Java_java_io_ObjectInputStream_bytesToFloats)
+    ADD_SYMBOL_MAP(Java_java_io_ObjectInputStream_bytesToDoubles)
+    ADD_SYMBOL_MAP(Java_java_io_RandomAccessFile_initIDs)
+    ADD_SYMBOL_MAP(Java_java_io_RandomAccessFile_open0)
+    ADD_SYMBOL_MAP(Java_java_io_RandomAccessFile_read0)
+    ADD_SYMBOL_MAP(Java_java_io_RandomAccessFile_readBytes)
+    ADD_SYMBOL_MAP(Java_java_io_RandomAccessFile_write0)
+    ADD_SYMBOL_MAP(Java_java_io_RandomAccessFile_writeBytes)
+    ADD_SYMBOL_MAP(Java_java_io_RandomAccessFile_getFilePointer)
+    ADD_SYMBOL_MAP(Java_java_io_RandomAccessFile_length)
+    ADD_SYMBOL_MAP(Java_java_io_RandomAccessFile_seek0)
+    ADD_SYMBOL_MAP(Java_java_io_RandomAccessFile_setLength)
+    ADD_SYMBOL_MAP(Java_java_io_FileInputStream_initIDs)
+    ADD_SYMBOL_MAP(Java_java_io_FileInputStream_open0)
+    ADD_SYMBOL_MAP(Java_java_io_FileInputStream_read0)
+    ADD_SYMBOL_MAP(Java_java_io_FileInputStream_readBytes)
+    ADD_SYMBOL_MAP(Java_java_io_FileInputStream_skip)
+    ADD_SYMBOL_MAP(Java_java_io_FileInputStream_available)
+    ADD_SYMBOL_MAP(Java_java_io_ObjectOutputStream_floatsToBytes)
+    ADD_SYMBOL_MAP(Java_java_io_ObjectOutputStream_doublesToBytes)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1EncryptInit)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1Encrypt)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1EncryptUpdate)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1EncryptFinal)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1DecryptInit)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1Decrypt)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1DecryptUpdate)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1DecryptFinal)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1GenerateKey)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1GenerateKeyPair)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1WrapKey)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1UnwrapKey)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1DeriveKey)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1OpenSession)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1CloseSession)
+    //ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1CloseAllSessions)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetSessionInfo)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetOperationState)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1SetOperationState)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1Login)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1Logout)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_initializeLibrary)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_finalizeLibrary)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1Initialize)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1Finalize)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetInfo)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetSlotList)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetSlotInfo)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetTokenInfo)
+    //ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1WaitForSlotEvent)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetMechanismList)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetMechanismInfo)
+    //ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1InitToken)
+    //ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1InitPIN)
+    //ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1SetPIN)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1SignInit)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1Sign)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1SignUpdate)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1SignFinal)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1SignRecoverInit)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1SignRecover)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1VerifyInit)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1Verify)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1VerifyUpdate)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1VerifyFinal)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1VerifyRecoverInit)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1VerifyRecover)
+    //ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1DigestEncryptUpdate)
+    //ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1DecryptDigestUpdate)
+    //ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1SignEncryptUpdate)
+    //ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1DecryptVerifyUpdate)
+    //ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetFunctionStatus)
+    //ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1CancelFunction)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1DigestInit)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1DigestSingle)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1DigestUpdate)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1DigestKey)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1DigestFinal)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1SeedRandom)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1GenerateRandom)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1CreateObject)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1CopyObject)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1DestroyObject)
+    //ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetObjectSize)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetAttributeValue)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1SetAttributeValue)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1FindObjectsInit)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1FindObjects)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_wrapper_PKCS11_C_1FindObjectsFinal)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_Secmod_nssVersionCheck)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_Secmod_nssInitialize)
+    ADD_SYMBOL_MAP(Java_sun_security_pkcs11_Secmod_nssGetModuleList)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_init)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_getMechPtr)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_indicateMechs)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_inquireNamesForMech)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_releaseName)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_importName)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_compareName)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_canonicalizeName)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_exportName)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_displayName)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_acquireCred)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_releaseCred)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_getCredName)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_getCredTime)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_getCredUsage)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_importContext)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_initContext)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_acceptContext)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_inquireContext)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_getContextMech)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_getContextName)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_getContextTime)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_deleteContext)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_wrapSizeLimit)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_exportContext)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_getMic)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_verifyMic)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_wrap)
+    ADD_SYMBOL_MAP(Java_sun_security_jgss_wrapper_GSSLibStub_unwrap)
+    ADD_SYMBOL_MAP(Java_sun_security_ec_ECKeyPairGenerator_generateECKeyPair)
+    ADD_SYMBOL_MAP(Java_sun_security_ec_ECDSASignature_signDigest)
+    ADD_SYMBOL_MAP(Java_sun_security_ec_ECDSASignature_verifySignedDigest)
+    ADD_SYMBOL_MAP(Java_sun_security_ec_ECDHKeyAgreement_deriveKey)
+    ADD_SYMBOL_MAP(Java_sun_security_smartcardio_PCSC_SCardEstablishContext)
+    ADD_SYMBOL_MAP(Java_sun_security_smartcardio_PCSC_SCardListReaders)
+    ADD_SYMBOL_MAP(Java_sun_security_smartcardio_PCSC_SCardConnect)
+    ADD_SYMBOL_MAP(Java_sun_security_smartcardio_PCSC_SCardTransmit)
+    ADD_SYMBOL_MAP(Java_sun_security_smartcardio_PCSC_SCardStatus)
+    ADD_SYMBOL_MAP(Java_sun_security_smartcardio_PCSC_SCardDisconnect)
+    ADD_SYMBOL_MAP(Java_sun_security_smartcardio_PCSC_SCardGetStatusChange)
+    ADD_SYMBOL_MAP(Java_sun_security_smartcardio_PCSC_SCardBeginTransaction)
+    ADD_SYMBOL_MAP(Java_sun_security_smartcardio_PCSC_SCardEndTransaction)
+    ADD_SYMBOL_MAP(Java_sun_security_smartcardio_PCSC_SCardControl)
+    ADD_SYMBOL_MAP(Java_sun_tracing_dtrace_JVM_isSupported0)
+    ADD_SYMBOL_MAP(Java_sun_tracing_dtrace_JVM_activate0)
+    ADD_SYMBOL_MAP(Java_sun_tracing_dtrace_JVM_dispose0)
+    ADD_SYMBOL_MAP(Java_sun_tracing_dtrace_JVM_isEnabled0)
+    ADD_SYMBOL_MAP(Java_sun_tracing_dtrace_JVM_defineClass0)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getVersion0)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_initOptionalSupportFields)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getVmArguments0)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getTotalClassCount)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getUnloadedClassCount)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getVerboseGC)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getVerboseClass)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getTotalThreadCount)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getLiveThreadCount)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getPeakThreadCount)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getDaemonThreadCount)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getTotalCompileTime)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getStartupTime)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getUptime0)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_isThreadContentionMonitoringEnabled)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_isThreadCpuTimeEnabled)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_isThreadAllocatedMemoryEnabled)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getProcessId)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getAvailableProcessors)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getSafepointCount)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getTotalSafepointTime)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getSafepointSyncTime)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getTotalApplicationNonStoppedTime)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getLoadedClassSize)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getUnloadedClassSize)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getClassLoadingTime)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getMethodDataSize)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getInitializedClassCount)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getClassInitializationTime)
+    ADD_SYMBOL_MAP(Java_sun_management_VMManagementImpl_getClassVerificationTime)
+    ADD_SYMBOL_MAP(Java_sun_management_GcInfoBuilder_getNumGcExtAttributes)
+    ADD_SYMBOL_MAP(Java_sun_management_GcInfoBuilder_fillGcAttributeInfo)
+    ADD_SYMBOL_MAP(Java_sun_management_GcInfoBuilder_getLastGcInfo0)
+    ADD_SYMBOL_MAP(Java_sun_management_Flag_getInternalFlagCount)
+    ADD_SYMBOL_MAP(Java_sun_management_Flag_getAllFlagNames)
+    ADD_SYMBOL_MAP(Java_sun_management_Flag_initialize)
+    ADD_SYMBOL_MAP(Java_sun_management_Flag_getFlags)
+    ADD_SYMBOL_MAP(Java_sun_management_Flag_setLongValue)
+    ADD_SYMBOL_MAP(Java_sun_management_Flag_setBooleanValue)
+    ADD_SYMBOL_MAP(Java_sun_management_Flag_setStringValue)
+    ADD_SYMBOL_MAP(Java_sun_management_MemoryPoolImpl_getMemoryManagers0)
+    ADD_SYMBOL_MAP(Java_sun_management_MemoryPoolImpl_getUsage0)
+    ADD_SYMBOL_MAP(Java_sun_management_MemoryPoolImpl_getPeakUsage0)
+    ADD_SYMBOL_MAP(Java_sun_management_MemoryPoolImpl_setUsageThreshold0)
+    ADD_SYMBOL_MAP(Java_sun_management_MemoryPoolImpl_setCollectionThreshold0)
+    ADD_SYMBOL_MAP(Java_sun_management_MemoryPoolImpl_resetPeakUsage0)
+    ADD_SYMBOL_MAP(Java_sun_management_MemoryPoolImpl_setPoolUsageSensor)
+    ADD_SYMBOL_MAP(Java_sun_management_MemoryPoolImpl_setPoolCollectionSensor)
+    ADD_SYMBOL_MAP(Java_sun_management_MemoryPoolImpl_getCollectionUsage0)
+    ADD_SYMBOL_MAP(Java_sun_management_ClassLoadingImpl_setVerboseClass)
+    ADD_SYMBOL_MAP(Java_sun_management_GarbageCollectorImpl_getCollectionCount)
+    ADD_SYMBOL_MAP(Java_sun_management_GarbageCollectorImpl_getCollectionTime)
+    ADD_SYMBOL_MAP(Java_sun_management_GarbageCollectorImpl_setNotificationEnabled)
+    ADD_SYMBOL_MAP(Java_sun_management_HotSpotDiagnostic_dumpHeap0)
+    ADD_SYMBOL_MAP(Java_sun_management_HotspotThread_getInternalThreadCount)
+    ADD_SYMBOL_MAP(Java_sun_management_HotspotThread_getInternalThreadTimes0)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_setThreadContentionMonitoringEnabled0)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_setThreadCpuTimeEnabled0)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_setThreadAllocatedMemoryEnabled0)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_getThreadInfo1)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_getThreads)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_getThreadTotalCpuTime0)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_getThreadTotalCpuTime1)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_getThreadUserCpuTime0)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_getThreadUserCpuTime1)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_getThreadAllocatedMemory1)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_findMonitorDeadlockedThreads0)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_findDeadlockedThreads0)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_resetPeakThreadCount0)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_resetContentionTimes0)
+    ADD_SYMBOL_MAP(Java_sun_management_ThreadImpl_dumpThreads0)
+    ADD_SYMBOL_MAP(Java_sun_management_MemoryManagerImpl_getMemoryPools0)
+    ADD_SYMBOL_MAP(Java_sun_management_MemoryImpl_setVerboseGC)
+    ADD_SYMBOL_MAP(Java_sun_management_MemoryImpl_getMemoryPools0)
+    ADD_SYMBOL_MAP(Java_sun_management_MemoryImpl_getMemoryManagers0)
+    ADD_SYMBOL_MAP(Java_sun_management_MemoryImpl_getMemoryUsage0)
+    ADD_SYMBOL_MAP(Java_sun_management_DiagnosticCommandImpl_setNotificationEnabled)
+    ADD_SYMBOL_MAP(Java_sun_management_DiagnosticCommandImpl_getDiagnosticCommands)
+    ADD_SYMBOL_MAP(Java_sun_management_DiagnosticCommandImpl_getDiagnosticCommandInfo)
+    ADD_SYMBOL_MAP(Java_sun_management_DiagnosticCommandImpl_executeDiagnosticCommand)
+    ADD_SYMBOL_MAP(Java_sun_reflect_Reflection_getCallerClass__)
+    ADD_SYMBOL_MAP(Java_sun_reflect_Reflection_getCallerClass__I)
+    ADD_SYMBOL_MAP(Java_sun_reflect_Reflection_getClassAccessFlags)
+    ADD_SYMBOL_MAP(Java_sun_reflect_NativeMethodAccessorImpl_invoke0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_NativeConstructorAccessorImpl_newInstance0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_ConstantPool_getSize0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_ConstantPool_getClassAt0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_ConstantPool_getClassAtIfLoaded0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_ConstantPool_getMethodAt0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_ConstantPool_getMethodAtIfLoaded0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_ConstantPool_getFieldAt0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_ConstantPool_getFieldAtIfLoaded0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_ConstantPool_getMemberRefInfoAt0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_ConstantPool_getIntAt0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_ConstantPool_getLongAt0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_ConstantPool_getFloatAt0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_ConstantPool_getDoubleAt0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_ConstantPool_getStringAt0)
+    ADD_SYMBOL_MAP(Java_sun_reflect_ConstantPool_getUTF8At0)
+    ADD_SYMBOL_MAP(Java_sun_misc_Signal_findSignal)
+    ADD_SYMBOL_MAP(Java_sun_misc_Signal_handle0)
+    ADD_SYMBOL_MAP(Java_sun_misc_Signal_raise0)
+    ADD_SYMBOL_MAP(Java_sun_misc_VM_getThreadStateValues)
+    ADD_SYMBOL_MAP(Java_sun_misc_VM_latestUserDefinedLoader)
+    ADD_SYMBOL_MAP(Java_sun_misc_VM_initialize)
+    ADD_SYMBOL_MAP(Java_sun_misc_MessageUtils_toStderr)
+    ADD_SYMBOL_MAP(Java_sun_misc_MessageUtils_toStdout)
+    ADD_SYMBOL_MAP(Java_sun_misc_NativeSignalHandler_handle0)
+    ADD_SYMBOL_MAP(Java_sun_misc_VMSupport_initAgentProperties)
+    ADD_SYMBOL_MAP(Java_sun_misc_VMSupport_getVMTemporaryDirectory)
+    ADD_SYMBOL_MAP(Java_sun_misc_URLClassPath_knownToNotExist0)
+    ADD_SYMBOL_MAP(Java_sun_misc_URLClassPath_getLookupCacheURLs)
+    ADD_SYMBOL_MAP(Java_sun_misc_URLClassPath_getLookupCacheForClassLoader)
+    ADD_SYMBOL_MAP(Java_sun_misc_Version_getJvmVersionInfo)
+    ADD_SYMBOL_MAP(Java_sun_misc_Version_getJvmSpecialVersion)
+    ADD_SYMBOL_MAP(Java_sun_misc_Version_getJdkVersionInfo)
+    ADD_SYMBOL_MAP(Java_sun_misc_Version_getJdkSpecialVersion)
+    ADD_SYMBOL_MAP(Java_sun_misc_GC_maxObjectInspectionAge)
+
+    // BSD Native APIs
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueueArrayWrapper_initStructSizes)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueueArrayWrapper_init)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueueArrayWrapper_register0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueueArrayWrapper_kevent0)
+    ADD_SYMBOL_MAP(Java_sun_nio_ch_KQueueArrayWrapper_interrupt)
+
+    // Instrument
+    ADD_SYMBOL_MAP(Java_sun_instrument_InstrumentationImpl_isModifiableClass0)
+    ADD_SYMBOL_MAP(Java_sun_instrument_InstrumentationImpl_isRetransformClassesSupported0)
+    ADD_SYMBOL_MAP(Java_sun_instrument_InstrumentationImpl_setHasRetransformableTransformers)
+    ADD_SYMBOL_MAP(Java_sun_instrument_InstrumentationImpl_retransformClasses0)
+    ADD_SYMBOL_MAP(Java_sun_instrument_InstrumentationImpl_redefineClasses0)
+    ADD_SYMBOL_MAP(Java_sun_instrument_InstrumentationImpl_getAllLoadedClasses0)
+    ADD_SYMBOL_MAP(Java_sun_instrument_InstrumentationImpl_getInitiatedClasses0)
+    ADD_SYMBOL_MAP(Java_sun_instrument_InstrumentationImpl_getObjectSize0)
+    ADD_SYMBOL_MAP(Java_sun_instrument_InstrumentationImpl_appendToClassLoaderSearch0)
+    ADD_SYMBOL_MAP(Java_sun_instrument_InstrumentationImpl_setNativeMethodPrefixes)
+
+}
diff -ruN -x '.*' old/hotspot/src/share/vm/prims/nativeSymbolMap.h new/hotspot/src/share/vm/prims/nativeSymbolMap.h
--- old/hotspot/src/share/vm/prims/nativeSymbolMap.h	1969-12-31 17:00:00.000000000 -0700
+++ new/hotspot/src/share/vm/prims/nativeSymbolMap.h	2016-08-16 22:17:16.917225470 -0600
@@ -0,0 +1,3246 @@
+#ifndef __NATIVE_SYMBOL_MAP_H__
+#define __NATIVE_SYMBOL_MAP_H__
+
+#include "prims/jvm.h"
+#include "classfile/classLoader.hpp"
+
+#define JNI_API(LIB) \
+JNIEXPORT jint JNICALL JNI_OnLoad_##LIB(JavaVM*, void*); \
+JNIEXPORT void JNICALL JNI_OnUnload_##LIB(JavaVM*, void*); \
+JNIEXPORT jint JNICALL Agent_OnLoad_##LIB(JavaVM*, char*, void*); \
+JNIEXPORT jint JNICALL Agent_OnAttach_##LIB(JavaVM*, char*, void*); \
+JNIEXPORT void JNICALL Agent_OnUnload_##LIB(JavaVM*);
+
+void create_symbol_map(void);
+
+extern "C" {
+void *static_dlopen();
+void *static_dlsym(const char *);
+int static_dlclose();
+
+// Static JNI APIs
+JNIEXPORT jint JNICALL JNI_OnLoad_java(JavaVM*, void*);
+JNIEXPORT jint JNICALL JNI_OnLoad_net(JavaVM*, void*);
+JNIEXPORT jint JNICALL JNI_OnLoad_verify(JavaVM*, void*);
+JNIEXPORT jint JNICALL JNI_OnLoad_zip(JavaVM*, void*);
+JNIEXPORT jint JNICALL JNI_OnLoad_management(JavaVM*, void*);
+JNIEXPORT jint JNICALL JNI_OnLoad_j2pkcs11(JavaVM*, void*);
+JNIEXPORT jint JNICALL JNI_OnLoad_j2pcsc(JavaVM*, void*);
+JNIEXPORT jint JNICALL JNI_OnLoad_j2gss(JavaVM*, void*);
+JNIEXPORT void JNICALL JNI_OnUnload_j2gss(JavaVM*, void*);
+JNIEXPORT jint JNICALL JNI_OnLoad_jaas_unix(JavaVM*, void*);
+JNIEXPORT jint JNICALL Agent_OnLoad_jdwp(JavaVM*, char*, void*);
+JNIEXPORT jint JNICALL Agent_OnUnload_jdwp(JavaVM*);
+JNIEXPORT jint JNICALL JNI_OnLoad_sunec(JavaVM*, void*);
+JNIEXPORT jint JNICALL JNI_OnLoad_nio(JavaVM*, void*);
+JNIEXPORT jint JNICALL Agent_OnLoad_instrument(JavaVM*, char*, void*);
+JNIEXPORT jint JNICALL Agent_OnAttach_instrument(JavaVM*, char*, void*);
+JNIEXPORT void JNICALL Agent_OnUnload_instrument(JavaVM*);
+
+// ZIP APIs
+jzentry * JNICALL
+ZIP_FindEntry(jzfile *zip, char *name, jint *sizeP, jint *nameLenP);
+
+jboolean JNICALL
+ZIP_ReadEntry(jzfile *zip, jzentry *entry, unsigned char *buf, char *entrynm);
+
+jzentry * JNICALL
+ZIP_GetNextEntry(jzfile *zip, jint n);
+
+jzfile * JNICALL
+ZIP_Open(const char *name, char **pmsg);
+
+jzfile *
+ZIP_Open_Generic(const char *name, char **pmsg, int mode, jlong lastModified);
+
+jzfile *
+ZIP_Get_From_Cache(const char *name, char **pmsg, jlong lastModified);
+
+void JNICALL
+ZIP_Close(jzfile *zip);
+
+jzentry * ZIP_GetEntry(jzfile *zip, char *name, jint ulen);
+void ZIP_Lock(jzfile *zip);
+void ZIP_Unlock(jzfile *zip);
+jint ZIP_Read(jzfile *zip, jzentry *entry, jlong pos, void *buf, jint len);
+void ZIP_FreeEntry(jzfile *zip, jzentry *ze);
+jlong ZIP_GetEntryDataOffset(jzfile *zip, jzentry *entry);
+jzentry * ZIP_GetEntry2(jzfile *zip, char *name, jint ulen, jboolean addSlash);
+JNIEXPORT jint JNICALL
+ZIP_CRC32(jint crc, const jbyte *buf, jint len);
+
+// Solaris Native APIs 
+JNIEXPORT void JNICALL
+Java_com_sun_security_auth_module_UnixSystem_getUnixInfo
+                                                (JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL
+Java_java_util_prefs_FileSystemPreferences_chmod(JNIEnv *,
+                       jclass, jstring, jint);
+
+JNIEXPORT jintArray JNICALL
+Java_java_util_prefs_FileSystemPreferences_lockFile0(JNIEnv *,
+    jclass, jstring, jint, jboolean);
+
+JNIEXPORT jint JNICALL
+Java_java_util_prefs_FileSystemPreferences_unlockFile0(JNIEnv *,
+                                      jclass, jint);
+
+JNIEXPORT jboolean JNICALL
+Java_java_util_logging_FileHandler_isSetUID(JNIEnv *, jclass);
+
+JNIEXPORT jboolean JNICALL
+Java_java_nio_MappedByteBuffer_isLoaded0(JNIEnv *, jobject, jlong,
+                                         jlong, jint);
+
+JNIEXPORT void JNICALL
+Java_java_nio_MappedByteBuffer_load0(JNIEnv *, jobject, jlong,
+                                     jlong);
+
+JNIEXPORT void JNICALL
+Java_java_nio_MappedByteBuffer_force0(JNIEnv *, jobject, jobject,
+                                      jlong, jlong);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainSocketImpl_initProto(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainSocketImpl_socketCreate(JNIEnv *, jobject,
+                                           jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainSocketImpl_socketConnect(JNIEnv *, jobject,
+                                            jobject, jint,
+                                            jint);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainSocketImpl_socketBind(JNIEnv *, jobject,
+                                         jobject, jint);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainSocketImpl_socketListen (JNIEnv *, jobject,
+                                            jint);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainSocketImpl_socketAccept(JNIEnv *, jobject,
+                                           jobject);
+
+JNIEXPORT jint JNICALL
+Java_java_net_PlainSocketImpl_socketAvailable(JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainSocketImpl_socketClose0(JNIEnv *, jobject,
+                                          jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainSocketImpl_socketShutdown(JNIEnv *, jobject,
+                                             jint);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainSocketImpl_socketSetOption0(JNIEnv *, jobject,
+                                              jint, jboolean,
+                                              jobject);
+
+JNIEXPORT jint JNICALL
+Java_java_net_PlainSocketImpl_socketGetOption(JNIEnv *, jobject,
+                                              jint, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainSocketImpl_socketSendUrgentData(JNIEnv *, jobject,
+                                             jint);
+
+JNIEXPORT jboolean JNICALL
+Java_java_net_InetAddressImplFactory_isIPv6Supported(JNIEnv *, jclass);
+
+JNIEXPORT jstring JNICALL
+Java_java_net_Inet4AddressImpl_getLocalHostName(JNIEnv *, jobject);
+
+JNIEXPORT jobjectArray JNICALL
+Java_java_net_Inet4AddressImpl_lookupAllHostAddr(JNIEnv *, jobject,
+                                                jstring);
+
+JNIEXPORT jstring JNICALL
+Java_java_net_Inet4AddressImpl_getHostByAddr(JNIEnv *, jobject,
+                                            jbyteArray);
+
+JNIEXPORT jstring JNICALL
+Java_java_net_Inet4AddressImpl_getLocalHostName(JNIEnv *, jobject);
+
+JNIEXPORT jobjectArray JNICALL
+Java_java_net_Inet4AddressImpl_lookupAllHostAddr(JNIEnv *, jobject,
+                                                jstring);
+
+JNIEXPORT jstring JNICALL
+Java_java_net_Inet4AddressImpl_getHostByAddr(JNIEnv *, jobject,
+                                            jbyteArray);
+
+JNIEXPORT jboolean JNICALL
+Java_java_net_Inet4AddressImpl_isReachable0(JNIEnv *, jobject,
+                                           jbyteArray,
+                                           jint,
+                                           jbyteArray,
+                                           jint);
+
+JNIEXPORT jstring JNICALL
+Java_java_net_Inet6AddressImpl_getLocalHostName(JNIEnv *, jobject);
+
+JNIEXPORT jobjectArray JNICALL
+Java_java_net_Inet6AddressImpl_lookupAllHostAddr(JNIEnv *, jobject,
+                                                jstring);
+
+JNIEXPORT jstring JNICALL
+Java_java_net_Inet6AddressImpl_getHostByAddr(JNIEnv *, jobject,
+                                            jbyteArray);
+
+JNIEXPORT jboolean JNICALL
+Java_java_net_Inet6AddressImpl_isReachable0(JNIEnv *, jobject,
+                                           jbyteArray,
+                                           jint,
+                                           jint,
+                                           jbyteArray,
+                                           jint, jint);
+
+JNIEXPORT void JNICALL
+Java_java_net_NetworkInterface_init(JNIEnv *, jclass);
+
+JNIEXPORT jobject JNICALL Java_java_net_NetworkInterface_getByName0
+    (JNIEnv *, jclass, jstring);
+
+JNIEXPORT jobject JNICALL Java_java_net_NetworkInterface_getByIndex0
+    (JNIEnv *, jclass, jint);
+
+JNIEXPORT jobject JNICALL Java_java_net_NetworkInterface_getByInetAddress0
+    (JNIEnv *, jclass, jobject);
+
+JNIEXPORT jobjectArray JNICALL Java_java_net_NetworkInterface_getAll
+    (JNIEnv *, jclass);
+
+JNIEXPORT jboolean JNICALL Java_java_net_NetworkInterface_isUp0(JNIEnv *, jclass, jstring, jint);
+
+JNIEXPORT jboolean JNICALL Java_java_net_NetworkInterface_isP2P0(JNIEnv *, jclass, jstring, jint);
+
+JNIEXPORT jboolean JNICALL Java_java_net_NetworkInterface_isLoopback0(JNIEnv *, jclass, jstring, jint);
+
+JNIEXPORT jboolean JNICALL Java_java_net_NetworkInterface_supportsMulticast0(JNIEnv *, jclass, jstring, jint);
+
+JNIEXPORT jbyteArray JNICALL Java_java_net_NetworkInterface_getMacAddr0(JNIEnv *, jclass, jbyteArray, jstring, jint);
+
+JNIEXPORT jint JNICALL Java_java_net_NetworkInterface_getMTU0(JNIEnv *, jclass, jstring, jint);
+
+JNIEXPORT void JNICALL
+Java_java_net_SocketOutputStream_init(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_java_net_SocketOutputStream_socketWrite0(JNIEnv *, jobject,
+                                              jobject,
+                                              jbyteArray,
+                                              jint, jint);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainDatagramSocketImpl_init(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainDatagramSocketImpl_bind0(JNIEnv *, jobject,
+                                           jint, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainDatagramSocketImpl_connect0(JNIEnv *, jobject,
+                                               jobject, jint);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainDatagramSocketImpl_disconnect0(JNIEnv *, jobject, jint);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainDatagramSocketImpl_send(JNIEnv *, jobject,
+                                           jobject);
+
+JNIEXPORT jint JNICALL
+Java_java_net_PlainDatagramSocketImpl_peek(JNIEnv *, jobject,
+                                           jobject);
+
+JNIEXPORT jint JNICALL
+Java_java_net_PlainDatagramSocketImpl_peekData(JNIEnv *, jobject,
+                                           jobject);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainDatagramSocketImpl_receive0(JNIEnv *, jobject,
+                                              jobject);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainDatagramSocketImpl_datagramSocketCreate(JNIEnv *,
+                                                           jobject);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainDatagramSocketImpl_datagramSocketClose(JNIEnv *,
+                                                          jobject);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainDatagramSocketImpl_socketSetOption0(JNIEnv *,
+                                                      jobject,
+                                                      jint,
+                                                      jobject);
+
+JNIEXPORT jobject JNICALL
+Java_java_net_PlainDatagramSocketImpl_socketGetOption(JNIEnv *, jobject,
+                                                      jint);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainDatagramSocketImpl_setTTL(JNIEnv *, jobject,
+                                             jbyte);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainDatagramSocketImpl_setTimeToLive(JNIEnv *, jobject,
+                                                    jint);
+
+JNIEXPORT jbyte JNICALL
+Java_java_net_PlainDatagramSocketImpl_getTTL(JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL
+Java_java_net_PlainDatagramSocketImpl_getTimeToLive(JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainDatagramSocketImpl_join(JNIEnv *, jobject,
+                                           jobject, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_net_PlainDatagramSocketImpl_leave(JNIEnv *, jobject,
+                                            jobject, jobject);
+
+JNIEXPORT jint JNICALL
+Java_java_net_PlainDatagramSocketImpl_dataAvailable(JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL
+NET_EnableFastTcpLoopback(int);
+
+JNIEXPORT int JNICALL
+NET_InetAddressToSockaddr(JNIEnv *, jobject, int, struct sockaddr *,
+                          int *, jboolean v4MappedAddress);
+
+JNIEXPORT jint JNICALL
+NET_GetPortFromSockaddr(struct sockaddr *);
+
+JNIEXPORT void JNICALL
+Java_java_net_SocketInputStream_init(JNIEnv *, jclass);
+
+JNIEXPORT jint JNICALL
+Java_java_net_SocketInputStream_socketRead0(JNIEnv *, jobject,
+                                            jobject, jbyteArray,
+                                            jint, jint, jint);
+
+JNIEXPORT void JNICALL Java_sun_net_ExtendedOptionsImpl_init
+  (JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL Java_sun_net_ExtendedOptionsImpl_setFlowOption
+  (JNIEnv *, jclass, jobject, jobject);
+
+JNIEXPORT void JNICALL Java_sun_net_ExtendedOptionsImpl_getFlowOption
+  (JNIEnv *, jclass, jobject, jobject);
+
+JNIEXPORT void JNICALL Java_sun_net_ExtendedOptionsImpl_setFlowOption
+  (JNIEnv *, jclass, jobject, jobject);
+
+JNIEXPORT void JNICALL Java_sun_net_ExtendedOptionsImpl_getFlowOption
+  (JNIEnv *, jclass, jobject, jobject);
+
+JNIEXPORT jboolean JNICALL Java_sun_net_ExtendedOptionsImpl_flowSupported
+  (JNIEnv *, jclass);
+
+JNIEXPORT jobjectArray JNICALL
+Java_java_lang_ProcessEnvironment_environ(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_java_lang_UNIXProcess_init(JNIEnv *, jclass);
+
+JNIEXPORT jint JNICALL
+Java_java_lang_UNIXProcess_waitForProcessExit(JNIEnv*,
+                                              jobject,
+                                              jint);
+
+JNIEXPORT jint JNICALL
+Java_java_lang_UNIXProcess_forkAndExec(JNIEnv *,
+                                       jobject,
+                                       jint,
+                                       jbyteArray,
+                                       jbyteArray,
+                                       jbyteArray, jint,
+                                       jbyteArray, jint,
+                                       jbyteArray,
+                                       jintArray,
+                                       jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_lang_UNIXProcess_destroyProcess(JNIEnv *,
+                                          jobject,
+                                          jint,
+                                          jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_io_UnixFileSystem_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT jstring JNICALL
+Java_java_io_UnixFileSystem_canonicalize0(JNIEnv *, jobject,
+                                          jstring);
+
+JNIEXPORT jint JNICALL
+Java_java_io_UnixFileSystem_getBooleanAttributes0(JNIEnv *, jobject,
+                                                  jobject);
+
+JNIEXPORT jboolean JNICALL
+Java_java_io_UnixFileSystem_checkAccess(JNIEnv *, jobject,
+                                        jobject, jint);
+
+JNIEXPORT jboolean JNICALL
+Java_java_io_UnixFileSystem_setPermission(JNIEnv *, jobject,
+                                          jobject,
+                                          jint,
+                                          jboolean,
+                                          jboolean);
+
+JNIEXPORT jlong JNICALL
+Java_java_io_UnixFileSystem_getLastModifiedTime(JNIEnv *, jobject,
+                                                jobject);
+
+JNIEXPORT jlong JNICALL
+Java_java_io_UnixFileSystem_getLength(JNIEnv *, jobject,
+                                      jobject);
+
+JNIEXPORT jboolean JNICALL
+Java_java_io_UnixFileSystem_createFileExclusively(JNIEnv *, jclass,
+                                                  jstring);
+
+JNIEXPORT jboolean JNICALL
+Java_java_io_UnixFileSystem_delete0(JNIEnv *, jobject,
+                                    jobject);
+
+JNIEXPORT jobjectArray JNICALL
+Java_java_io_UnixFileSystem_list(JNIEnv *, jobject,
+                                 jobject);
+
+JNIEXPORT jboolean JNICALL
+Java_java_io_UnixFileSystem_createDirectory(JNIEnv *, jobject,
+                                            jobject);
+
+JNIEXPORT jboolean JNICALL
+Java_java_io_UnixFileSystem_rename0(JNIEnv *, jobject,
+                                    jobject, jobject);
+
+JNIEXPORT jboolean JNICALL
+Java_java_io_UnixFileSystem_setLastModifiedTime(JNIEnv *, jobject,
+                                                jobject, jlong);
+
+JNIEXPORT jboolean JNICALL
+Java_java_io_UnixFileSystem_setReadOnly(JNIEnv *, jobject,
+                                        jobject);
+
+JNIEXPORT jlong JNICALL
+Java_java_io_UnixFileSystem_getSpace(JNIEnv *, jobject,
+                                     jobject, jint);
+
+JNIEXPORT jboolean JNICALL
+Java_java_io_Console_istty(JNIEnv *, jclass);
+
+JNIEXPORT jstring JNICALL
+Java_java_io_Console_encoding(JNIEnv *, jclass);
+
+JNIEXPORT jboolean JNICALL
+Java_java_io_Console_echo(JNIEnv *,
+                          jclass,
+                          jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_io_FileOutputStream_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_java_io_FileOutputStream_open0(JNIEnv *, jobject,
+                                    jstring, jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_io_FileOutputStream_write(JNIEnv *, jobject, jint, jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_io_FileOutputStream_writeBytes(JNIEnv *,
+    jobject, jbyteArray, jint, jint, jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_io_FileOutputStream_close0(JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_io_FileDescriptor_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_java_io_FileDescriptor_sync(JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_io_FileInputStream_close0(JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_io_RandomAccessFile_close0(JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL Java_sun_tools_attach_BsdVirtualMachine_socket
+  (JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL Java_sun_tools_attach_BsdVirtualMachine_connect
+  (JNIEnv *, jclass, jint, jstring);
+
+JNIEXPORT void JNICALL Java_sun_tools_attach_BsdVirtualMachine_sendQuitTo
+  (JNIEnv *, jclass, jint);
+
+JNIEXPORT void JNICALL Java_sun_tools_attach_BsdVirtualMachine_checkPermissions
+  (JNIEnv *, jclass, jstring);
+
+JNIEXPORT void JNICALL Java_sun_tools_attach_BsdVirtualMachine_close
+  (JNIEnv *, jclass, jint);
+
+JNIEXPORT jint JNICALL Java_sun_tools_attach_BsdVirtualMachine_read
+  (JNIEnv *, jclass, jint, jbyteArray, jint, jint);
+
+JNIEXPORT void JNICALL Java_sun_tools_attach_BsdVirtualMachine_write
+  (JNIEnv *, jclass, jint, jbyteArray, jint, jint);
+
+JNIEXPORT void JNICALL Java_sun_tools_attach_BsdVirtualMachine_createAttachFile(JNIEnv *, jclass, jstring);
+
+JNIEXPORT jstring JNICALL Java_sun_tools_attach_BsdVirtualMachine_getTempDir(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_connect
+    (JNIEnv *, jobject, jstring jPkcs11ModulePath, jstring);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_disconnect
+    (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL Java_sun_security_pkcs11_Secmod_nssGetLibraryHandle
+  (JNIEnv *, jclass, jstring);
+
+JNIEXPORT jlong JNICALL Java_sun_security_pkcs11_Secmod_nssLoadLibrary
+  (JNIEnv *, jclass, jstring);
+
+JNIEXPORT void JNICALL Java_sun_security_smartcardio_PlatformPCSC_initialize
+        (JNIEnv *, jclass, jstring);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_BsdNativeDispatcher_initIDs(JNIEnv*, jclass);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_fs_BsdNativeDispatcher_getfsstat(JNIEnv*, jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_fs_BsdNativeDispatcher_fsstatEntry(JNIEnv*, jclass,
+    jlong, jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_BsdNativeDispatcher_endfsstat(JNIEnv*, jclass, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixCopyFile_transfer
+    (JNIEnv*, jclass, jint, jint, jlong);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_nio_fs_MagicFileTypeDetector_initialize0
+    (JNIEnv*, jclass);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_nio_fs_MagicFileTypeDetector_probe0
+    (JNIEnv*, jclass, jlong);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_nio_fs_GnomeFileTypeDetector_initializeGio
+    (JNIEnv*, jclass);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_nio_fs_GnomeFileTypeDetector_probeUsingGio
+    (JNIEnv*, jclass, jlong);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_nio_fs_GnomeFileTypeDetector_initializeGnomeVfs
+    (JNIEnv*, jclass);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_nio_fs_GnomeFileTypeDetector_probeUsingGnomeVfs
+    (JNIEnv*, jclass, jlong);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_init(JNIEnv*, jclass);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_getcwd(JNIEnv*, jclass);
+
+JNIEXPORT jbyteArray
+Java_sun_nio_fs_UnixNativeDispatcher_strerror(JNIEnv*, jclass, jint);
+
+JNIEXPORT jint
+Java_sun_nio_fs_UnixNativeDispatcher_dup(JNIEnv*, jclass, jint);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_fopen0(JNIEnv*, jclass,
+    jlong, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_fclose(JNIEnv*, jclass, jlong);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_open0(JNIEnv*, jclass,
+    jlong, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_openat0(JNIEnv*, jclass, jint,
+    jlong, jint, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_close(JNIEnv*, jclass, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_read(JNIEnv*, jclass, jint,
+    jlong, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_write(JNIEnv*, jclass, jint,
+    jlong, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_stat0(JNIEnv*, jclass,
+    jlong, jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_lstat0(JNIEnv*, jclass,
+    jlong, jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_fstat(JNIEnv*, jclass, jint,
+    jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_fstatat0(JNIEnv*, jclass, jint,
+    jlong, jint, jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_chmod0(JNIEnv*, jclass,
+    jlong, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_fchmod(JNIEnv*, jclass, jint,
+    jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_chown0(JNIEnv*, jclass,
+    jlong, jint, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_lchown0(JNIEnv*, jclass, jlong, jint, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_fchown(JNIEnv*, jclass, jint, jint, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_utimes0(JNIEnv*, jclass,
+    jlong, jlong, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_futimes(JNIEnv*, jclass, jint,
+    jlong, jlong);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_opendir0(JNIEnv*, jclass,
+    jlong);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_fdopendir(JNIEnv*, jclass, int);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_closedir(JNIEnv*, jclass, jlong);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_readdir(JNIEnv*, jclass, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_mkdir0(JNIEnv*, jclass,
+    jlong, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_rmdir0(JNIEnv*, jclass,
+    jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_link0(JNIEnv*, jclass,
+    jlong, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_unlink0(JNIEnv*, jclass,
+    jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_unlinkat0(JNIEnv*, jclass, jint,
+                                               jlong, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_rename0(JNIEnv*, jclass,
+    jlong, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_renameat0(JNIEnv*, jclass,
+    jint, jlong, jint, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_symlink0(JNIEnv*, jclass,
+    jlong, jlong);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_readlink0(JNIEnv*, jclass,
+    jlong);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_realpath0(JNIEnv*, jclass,
+    jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_access0(JNIEnv*, jclass,
+    jlong, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_statvfs0(JNIEnv*, jclass,
+    jlong, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_pathconf0(JNIEnv*, jclass,
+    jlong, jint);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_fpathconf(JNIEnv*, jclass,
+    jint, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_mknod0(JNIEnv*, jclass,
+    jlong, jint, jlong);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_getpwuid(JNIEnv*, jclass, jint);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_getgrgid(JNIEnv*, jclass, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_getpwnam0(JNIEnv*, jclass,
+    jlong);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_fs_UnixNativeDispatcher_getgrnam0(JNIEnv*, jclass,
+    jlong);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_ch_FileChannelImpl_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_ch_FileChannelImpl_map0(JNIEnv *, jobject,
+                                     jint, jlong, jlong);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_FileChannelImpl_unmap0(JNIEnv *, jobject,
+                                       jlong, jlong);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_ch_FileChannelImpl_position0(JNIEnv *, jobject,
+                                          jobject, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_FileChannelImpl_close0(JNIEnv *, jobject, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_ch_FileChannelImpl_transferTo0(JNIEnv *, jobject,
+                                            jobject,
+                                            jlong, jlong,
+                                            jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_NativeThread_init(JNIEnv *, jclass);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_ch_NativeThread_current(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_NativeThread_signal(JNIEnv *, jclass, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_UnixAsynchronousSocketChannelImpl_checkConnect(JNIEnv *,
+    jobject, int);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_Net_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_nio_ch_Net_isIPv6Available0(JNIEnv*, jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_Net_isExclusiveBindAvailable(JNIEnv *, jclass);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_nio_ch_Net_canIPv6SocketJoinIPv4Group0(JNIEnv*, jclass);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_nio_ch_Net_canJoin6WithIPv4Group0(JNIEnv*, jclass);
+
+JNIEXPORT int JNICALL
+Java_sun_nio_ch_Net_socket0(JNIEnv *, jclass, jboolean preferIPv6,
+                            jboolean, jboolean, jboolean);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_Net_bind0(JNIEnv *, jclass, jobject, jboolean preferIPv6,
+                          jboolean, jobject, int);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_Net_listen(JNIEnv *, jclass, jobject, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_Net_connect0(JNIEnv *, jclass, jboolean preferIPv6,
+                             jobject, jobject, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_Net_localPort(JNIEnv *, jclass, jobject);
+
+JNIEXPORT jobject JNICALL
+Java_sun_nio_ch_Net_localInetAddress(JNIEnv *, jclass, jobject);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_Net_getIntOption0(JNIEnv *, jclass, jobject,
+                                  jboolean, jint, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_Net_setIntOption0(JNIEnv *, jclass, jobject,
+                                  jboolean, jint,
+                                  jint, jint, jboolean isIPv6);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_Net_joinOrDrop4(JNIEnv *, jobject, jboolean, jobject,
+                                jint, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_Net_blockOrUnblock4(JNIEnv *, jobject, jboolean, jobject,
+                                    jint, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_Net_joinOrDrop6(JNIEnv *, jobject, jboolean, jobject,
+                                jbyteArray, jint, jbyteArray);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_Net_blockOrUnblock6(JNIEnv *, jobject, jboolean, jobject,
+                                    jbyteArray, jint, jbyteArray);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_Net_setInterface4(JNIEnv*, jobject, jobject, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_Net_getInterface4(JNIEnv*, jobject, jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_Net_setInterface6(JNIEnv*, jobject, jobject, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_Net_getInterface6(JNIEnv*, jobject, jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_Net_shutdown(JNIEnv *, jclass, jobject, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_Net_poll(JNIEnv*, jclass, jobject, jint, jlong);
+
+JNIEXPORT jshort JNICALL
+Java_sun_nio_ch_Net_pollinValue(JNIEnv *, jclass);
+
+JNIEXPORT jshort JNICALL
+Java_sun_nio_ch_Net_polloutValue(JNIEnv *, jclass);
+
+JNIEXPORT jshort JNICALL
+Java_sun_nio_ch_Net_pollerrValue(JNIEnv *, jclass);
+
+JNIEXPORT jshort JNICALL
+Java_sun_nio_ch_Net_pollhupValue(JNIEnv *, jclass);
+
+JNIEXPORT jshort JNICALL
+Java_sun_nio_ch_Net_pollnvalValue(JNIEnv *, jclass);
+
+JNIEXPORT jshort JNICALL
+Java_sun_nio_ch_Net_pollconnValue(JNIEnv *, jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_KQueue_keventSize(JNIEnv*, jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_KQueue_identOffset(JNIEnv*, jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_KQueue_filterOffset(JNIEnv*, jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_KQueue_flagsOffset(JNIEnv*, jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_KQueue_kqueue(JNIEnv *, jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_KQueue_keventRegister(JNIEnv *, jclass, jint,
+                                      jint, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_KQueue_keventPoll(JNIEnv *, jclass,
+                                  jint, jlong, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_FileKey_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_FileKey_init(JNIEnv *, jobject, jobject);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_DatagramDispatcher_read0(JNIEnv *, jclass,
+                         jobject, jlong, jint);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_ch_DatagramDispatcher_readv0(JNIEnv *, jclass,
+                              jobject, jlong, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_DatagramDispatcher_write0(JNIEnv *, jclass,
+                              jobject, jlong, jint);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_ch_DatagramDispatcher_writev0(JNIEnv *, jclass,
+                                       jobject, jlong, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_ServerSocketChannelImpl_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_ServerSocketChannelImpl_accept0(JNIEnv *, jobject,
+                                                jobject, jobject,
+                                                jobjectArray);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_SocketChannelImpl_checkConnect(JNIEnv *, jobject,
+                                               jobject, jboolean,
+                                               jboolean);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_SocketChannelImpl_sendOutOfBandData(JNIEnv*, jclass,
+                                                    jobject, jbyte);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_PollArrayWrapper_poll0(JNIEnv *, jobject,
+                                       jlong, jint,
+                                       jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_PollArrayWrapper_interrupt(JNIEnv *, jobject, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_init(JNIEnv *, jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_read0(JNIEnv *, jclass,
+                             jobject, jlong, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_pread0(JNIEnv *, jclass, jobject,
+                            jlong, jint, jlong);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_readv0(JNIEnv *, jclass,
+                              jobject, jlong, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_write0(JNIEnv *, jclass,
+                              jobject, jlong, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_pwrite0(JNIEnv *, jclass, jobject,
+                            jlong, jint, jlong);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_writev0(JNIEnv *, jclass,
+                                       jobject, jlong, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_force0(JNIEnv *, jobject,
+                                          jobject, jboolean);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_truncate0(JNIEnv *, jobject,
+                                             jobject, jlong);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_size0(JNIEnv *, jobject, jobject);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_lock0(JNIEnv *, jobject, jobject,
+                                      jboolean, jlong, jlong,
+                                      jboolean);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_release0(JNIEnv *, jobject,
+                                         jobject, jlong, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_close0(JNIEnv *, jclass, jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_preClose0(JNIEnv *, jclass, jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_FileDispatcherImpl_closeIntFD(JNIEnv *, jclass, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_IOUtil_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_nio_ch_IOUtil_randomBytes(JNIEnv *, jclass,
+                                  jbyteArray);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_IOUtil_fdVal(JNIEnv *, jclass, jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_IOUtil_setfdVal(JNIEnv *, jclass, jobject, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_IOUtil_configureBlocking(JNIEnv *, jclass,
+                                         jobject, jboolean);
+
+JNIEXPORT jlong JNICALL
+Java_sun_nio_ch_IOUtil_makePipe(JNIEnv *, jobject, jboolean);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_nio_ch_IOUtil_drain(JNIEnv *, jclass, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_IOUtil_fdLimit(JNIEnv *, jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_IOUtil_iovMax(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_DatagramChannelImpl_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_DatagramChannelImpl_disconnect0(JNIEnv *, jobject,
+                                                jobject, jboolean isIPv6);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_DatagramChannelImpl_receive0(JNIEnv *, jobject,
+                                             jobject, jlong,
+                                             jint, jboolean);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_DatagramChannelImpl_send0(JNIEnv *, jobject,
+                                          jboolean preferIPv6, jobject, jlong,
+                                          jint, jobject, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_KQueuePort_socketpair(JNIEnv*, jclass, jintArray);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_KQueuePort_interrupt(JNIEnv *, jclass, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_KQueuePort_drain1(JNIEnv *, jclass, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_KQueuePort_close0(JNIEnv *, jclass, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_UnixAsynchronousServerSocketChannelImpl_initIDs(JNIEnv*,
+    jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_UnixAsynchronousServerSocketChannelImpl_accept0(JNIEnv*,
+    jobject, jobject, jobject, jobjectArray);
+
+JNIEXPORT jobject JNICALL
+Java_sun_nio_ch_InheritedChannel_peerAddress0(JNIEnv *, jclass, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_InheritedChannel_peerPort0(JNIEnv *, jclass, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_InheritedChannel_soType0(JNIEnv *, jclass, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_InheritedChannel_dup(JNIEnv *, jclass, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_InheritedChannel_dup2(JNIEnv *, jclass, jint, jint fd2);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_InheritedChannel_open0(JNIEnv *, jclass, jstring, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_InheritedChannel_close0(JNIEnv *, jclass, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_management_OperatingSystemImpl_initialize
+  (JNIEnv *, jclass);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_OperatingSystemImpl_getCommittedVirtualMemorySize
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_OperatingSystemImpl_getTotalSwapSpaceSize
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_OperatingSystemImpl_getFreeSwapSpaceSize
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_OperatingSystemImpl_getProcessCpuTime
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_OperatingSystemImpl_getFreePhysicalMemorySize
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_OperatingSystemImpl_getTotalPhysicalMemorySize
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_OperatingSystemImpl_getOpenFileDescriptorCount
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_OperatingSystemImpl_getMaxFileDescriptorCount
+  (JNIEnv *, jobject);
+
+JNIEXPORT jdouble JNICALL
+Java_sun_management_OperatingSystemImpl_getSystemCpuLoad
+(JNIEnv *, jobject);
+
+JNIEXPORT jdouble JNICALL
+Java_sun_management_OperatingSystemImpl_getProcessCpuLoad
+(JNIEnv *, jobject);
+
+JNIEXPORT jboolean JNICALL Java_sun_management_FileSystemImpl_isAccessUserOnly0
+  (JNIEnv *, jclass, jstring);
+
+JNIEXPORT jdouble JNICALL
+Java_sun_management_OperatingSystemImpl_getSystemCpuLoad
+(JNIEnv *, jobject);
+
+JNIEXPORT jdouble JNICALL
+Java_sun_management_OperatingSystemImpl_getProcessCpuLoad
+(JNIEnv *, jobject);
+
+JNIEXPORT jdouble JNICALL
+Java_sun_management_OperatingSystemImpl_getSystemCpuLoad
+(JNIEnv *, jobject);
+
+JNIEXPORT jdouble JNICALL
+Java_sun_management_OperatingSystemImpl_getProcessCpuLoad
+(JNIEnv *, jobject);
+
+JNIEXPORT jdouble JNICALL
+Java_sun_management_OperatingSystemImpl_getSystemCpuLoad
+(JNIEnv *, jobject);
+
+JNIEXPORT jdouble JNICALL
+Java_sun_management_OperatingSystemImpl_getProcessCpuLoad
+(JNIEnv *, jobject);
+
+JNIEXPORT jstring JNICALL
+Java_sun_net_dns_ResolverConfigurationImpl_localDomain0(JNIEnv *, jclass);
+
+JNIEXPORT jstring JNICALL
+Java_sun_net_dns_ResolverConfigurationImpl_fallbackDomain0(JNIEnv *, jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_net_sdp_SdpSupport_create0(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_sun_net_sdp_SdpSupport_convert0(JNIEnv *, jclass, int);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_net_spi_DefaultProxySelector_init(JNIEnv *, jclass);
+
+JNIEXPORT jobject JNICALL
+Java_sun_net_spi_DefaultProxySelector_getSystemProxy(JNIEnv *,
+                                                     jobject,
+                                                     jstring,
+                                                     jstring);
+
+JNIEXPORT jint JNICALL Java_sun_net_PortConfig_getLower0
+  (JNIEnv *, jclass);
+
+JNIEXPORT jint JNICALL Java_sun_net_PortConfig_getUpper0
+  (JNIEnv *, jclass);
+
+// Share Native APIs
+JNIEXPORT void JNICALL
+Java_com_sun_java_util_jar_pack_NativeUnpack_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT jlong JNICALL
+Java_com_sun_java_util_jar_pack_NativeUnpack_start(JNIEnv *, jobject,
+                                   jobject, jlong);
+
+JNIEXPORT jboolean JNICALL
+Java_com_sun_java_util_jar_pack_NativeUnpack_getNextFile(JNIEnv *, jobject,
+                                         jobjectArray);
+
+JNIEXPORT jobject JNICALL
+Java_com_sun_java_util_jar_pack_NativeUnpack_getUnusedInput(JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_com_sun_java_util_jar_pack_NativeUnpack_finish(JNIEnv *, jobject);
+
+JNIEXPORT jboolean JNICALL
+Java_com_sun_java_util_jar_pack_NativeUnpack_setOption(JNIEnv *, jobject,
+                                       jstring, jstring);
+
+JNIEXPORT jstring JNICALL
+Java_com_sun_java_util_jar_pack_NativeUnpack_getOption(JNIEnv *, jobject,
+                                       jstring);
+
+JNIEXPORT int
+jio_snprintf(char *, size_t, const char *, ...);
+
+JNIEXPORT int
+jio_fprintf(FILE *, const char *, ...);
+
+JNIEXPORT void JNICALL
+JNU_ThrowByName(JNIEnv *, const char *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowNullPointerException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowArrayIndexOutOfBoundsException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowOutOfMemoryError(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowIllegalArgumentException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowIllegalAccessError(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowIllegalAccessException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowInternalError(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowIOException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowNoSuchFieldException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowNoSuchMethodException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowClassNotFoundException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowNumberFormatException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowNoSuchFieldError(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowNoSuchMethodError(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowStringIndexOutOfBoundsException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowInstantiationException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowByNameWithLastError(JNIEnv *, const char *,
+                             const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowIOExceptionWithLastError(JNIEnv *, const char *);
+
+JNIEXPORT jstring
+NewStringPlatform(JNIEnv *, const char *);
+
+JNIEXPORT const char *
+GetStringPlatformChars(JNIEnv *, jstring, jboolean *);
+
+JNIEXPORT jstring JNICALL
+JNU_NewStringPlatform(JNIEnv *, const char *);
+
+JNIEXPORT const char * JNICALL
+JNU_GetStringPlatformChars(JNIEnv *, jstring, jboolean *);
+
+JNIEXPORT void JNICALL
+JNU_ReleaseStringPlatformChars(JNIEnv *, jstring, const char *);
+
+JNIEXPORT jclass JNICALL
+JNU_ClassString(JNIEnv *);
+
+JNIEXPORT jclass JNICALL
+JNU_ClassClass(JNIEnv *);
+
+JNIEXPORT jclass JNICALL
+JNU_ClassObject(JNIEnv *);
+
+JNIEXPORT jclass JNICALL
+JNU_ClassThrowable(JNIEnv *);
+
+JNIEXPORT jint JNICALL
+JNU_CopyObjectArray(JNIEnv *, jobjectArray, jobjectArray,
+                    jint);
+
+JNIEXPORT jvalue JNICALL
+JNU_CallStaticMethodByName(JNIEnv *,
+                           jboolean *,
+                           const char *,
+                           const char *,
+                           const char *,
+                           ...);
+
+JNIEXPORT jvalue JNICALL
+JNU_CallMethodByName(JNIEnv *,
+                     jboolean *,
+                     jobject,
+                     const char *,
+                     const char *,
+                     ...);
+
+JNIEXPORT jvalue JNICALL
+JNU_CallMethodByNameV(JNIEnv *,
+                      jboolean *,
+                      jobject,
+                      const char *,
+                      const char *,
+                      va_list);
+
+JNIEXPORT jobject JNICALL
+JNU_NewObjectByName(JNIEnv *, const char *,
+                    const char *, ...);
+
+JNIEXPORT jint JNICALL
+JNU_IsInstanceOfByName(JNIEnv *, jobject, char *);
+
+JNIEXPORT jvalue JNICALL
+JNU_GetFieldByName(JNIEnv *,
+                   jboolean *,
+                   jobject,
+                   const char *,
+                   const char *);
+
+JNIEXPORT void JNICALL
+JNU_SetFieldByName(JNIEnv *,
+                   jboolean *,
+                   jobject,
+                   const char *,
+                   const char *,
+                   ...);
+
+JNIEXPORT jvalue JNICALL
+JNU_GetStaticFieldByName(JNIEnv *,
+                         jboolean *,
+                         const char *,
+                         const char *,
+                         const char *);
+
+JNIEXPORT void JNICALL
+JNU_SetStaticFieldByName(JNIEnv *,
+                         jboolean *,
+                         const char *,
+                         const char *,
+                         const char *,
+                         ...);
+
+JNIEXPORT jboolean JNICALL
+JNU_Equals(JNIEnv *, jobject object1, jobject object2);
+
+JNIEXPORT void JNICALL
+JNU_MonitorWait(JNIEnv *, jobject, jlong);
+
+JNIEXPORT void JNICALL
+JNU_Notify(JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+JNU_NotifyAll(JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+JNU_PrintString(JNIEnv *, char *, jstring);
+
+JNIEXPORT void JNICALL
+JNU_PrintClass(JNIEnv *, char *, jobject);
+
+JNIEXPORT jstring JNICALL
+JNU_ToString(JNIEnv *, jobject);
+
+JNIEXPORT void * JNICALL
+JNU_GetEnv(JavaVM *, jint);
+
+JNIEXPORT jboolean
+VerifyClassname(char *, jboolean);
+
+JNIEXPORT jboolean
+VerifyFixClassname(char *);
+
+JNIEXPORT jboolean
+VerifyClassCodes(JNIEnv *, jclass, char *, jint);
+
+JNIEXPORT jboolean
+VerifyClassCodesForMajorVersion(JNIEnv *, jclass, char *,
+                                jint, jint);
+
+JNIEXPORT void
+JDK_GetVersionInfo0(jdk_version_info*, size_t);
+
+JNIEXPORT jboolean
+VerifyClassForMajorVersion(JNIEnv *, jclass, char *, jint,
+                           jint);
+
+JNIEXPORT jboolean
+VerifyClass(JNIEnv *, jclass, char *, jint);
+
+JNIEXPORT void JNICALL
+JNU_ThrowByName(JNIEnv *, const char *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowNullPointerException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowArrayIndexOutOfBoundsException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowOutOfMemoryError(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowIllegalArgumentException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowIllegalAccessError(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowIllegalAccessException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowInternalError(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowNoSuchFieldException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowNoSuchMethodException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowClassNotFoundException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowNumberFormatException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowIOException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowNoSuchFieldError(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowNoSuchMethodError(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowStringIndexOutOfBoundsException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowInstantiationException(JNIEnv *, const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowByNameWithLastError(JNIEnv *, const char *,
+                             const char *);
+
+JNIEXPORT void JNICALL
+JNU_ThrowIOExceptionWithLastError(JNIEnv *, const char *);
+
+JNIEXPORT jvalue JNICALL
+JNU_CallStaticMethodByName(JNIEnv *,
+                           jboolean *,
+                           const char *,
+                           const char *,
+                           const char *,
+                           ...);
+
+JNIEXPORT jvalue JNICALL
+JNU_CallMethodByName(JNIEnv *,
+                     jboolean *,
+                     jobject,
+                     const char *,
+                     const char *,
+                     ...);
+
+JNIEXPORT jvalue JNICALL
+JNU_CallMethodByNameV(JNIEnv *,
+                      jboolean *,
+                      jobject,
+                      const char *,
+                      const char *,
+                      va_list);
+
+JNIEXPORT jobject JNICALL
+JNU_NewObjectByName(JNIEnv *, const char *,
+                    const char *, ...);
+
+JNIEXPORT jstring
+NewStringPlatform(JNIEnv *, const char *);
+
+JNIEXPORT jstring JNICALL
+JNU_NewStringPlatform(JNIEnv *, const char *);
+
+JNIEXPORT const char *
+GetStringPlatformChars(JNIEnv *, jstring, jboolean *);
+
+JNIEXPORT const char * JNICALL
+JNU_GetStringPlatformChars(JNIEnv *, jstring, jboolean *);
+
+JNIEXPORT void JNICALL
+JNU_ReleaseStringPlatformChars(JNIEnv *, jstring, const char *);
+
+JNIEXPORT int
+Canonicalize(JNIEnv *, char *, char *, int);
+
+JNIEXPORT jclass JNICALL
+JNU_ClassString(JNIEnv *);
+
+JNIEXPORT jclass JNICALL
+JNU_ClassClass(JNIEnv *);
+
+JNIEXPORT jclass JNICALL
+JNU_ClassObject(JNIEnv *);
+
+JNIEXPORT jclass JNICALL
+JNU_ClassThrowable(JNIEnv *);
+
+JNIEXPORT jint JNICALL
+JNU_CopyObjectArray(JNIEnv *, jobjectArray, jobjectArray,
+                         jint);
+
+JNIEXPORT void * JNICALL
+JNU_GetEnv(JavaVM *, jint);
+
+JNIEXPORT jint JNICALL
+JNU_IsInstanceOfByName(JNIEnv *, jobject, char*);
+
+JNIEXPORT jboolean JNICALL
+JNU_Equals(JNIEnv *, jobject object1, jobject object2);
+
+JNIEXPORT void JNICALL
+JNU_MonitorWait(JNIEnv *, jobject, jlong);
+
+JNIEXPORT void JNICALL
+JNU_Notify(JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+JNU_NotifyAll(JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+JNU_PrintString(JNIEnv *, char *, jstring);
+
+JNIEXPORT void JNICALL
+JNU_PrintClass(JNIEnv *, char*, jobject);
+
+JNIEXPORT jstring JNICALL
+JNU_ToString(JNIEnv *, jobject);
+
+JNIEXPORT jvalue JNICALL
+JNU_GetFieldByName(JNIEnv *,
+                   jboolean *,
+                   jobject,
+                   const char *,
+                   const char *);
+
+JNIEXPORT void JNICALL
+JNU_SetFieldByName(JNIEnv *,
+                   jboolean *,
+                   jobject,
+                   const char *,
+                   const char *,
+                   ...);
+
+JNIEXPORT jvalue JNICALL
+JNU_GetStaticFieldByName(JNIEnv *,
+                         jboolean *,
+                         const char *,
+                         const char *,
+                         const char *);
+
+JNIEXPORT void JNICALL
+JNU_SetStaticFieldByName(JNIEnv *,
+                         jboolean *,
+                         const char *,
+                         const char *,
+                         const char *,
+                         ...);
+
+JNIEXPORT jstring JNICALL
+Java_java_util_TimeZone_getSystemTimeZoneID(JNIEnv *, jclass,
+                                            jstring);
+
+JNIEXPORT jstring JNICALL
+Java_java_util_TimeZone_getSystemGMTOffsetID(JNIEnv *, jclass);
+
+JNIEXPORT jint JNICALL
+Java_java_util_zip_CRC32_update(JNIEnv *, jclass, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_java_util_zip_CRC32_updateBytes(JNIEnv *, jclass, jint,
+                                     jarray, jint, jint);
+
+JNIEXPORT jint JNICALL
+ZIP_CRC32(jint, const jbyte *, jint);
+
+JNIEXPORT jint JNICALL
+Java_java_util_zip_CRC32_updateByteBuffer(JNIEnv *, jclass, jint,
+                                          jlong, jint, jint);
+
+JNIEXPORT void JNICALL
+Java_java_util_zip_Deflater_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT jlong JNICALL
+Java_java_util_zip_Deflater_init(JNIEnv *, jclass, jint,
+                                 jint, jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_util_zip_Deflater_setDictionary(JNIEnv *, jclass, jlong,
+                                          jarray, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_java_util_zip_Deflater_deflateBytes(JNIEnv *, jobject, jlong,
+                                         jarray, jint, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_java_util_zip_Deflater_getAdler(JNIEnv *, jclass, jlong);
+
+JNIEXPORT void JNICALL
+Java_java_util_zip_Deflater_reset(JNIEnv *, jclass, jlong);
+
+JNIEXPORT void JNICALL
+Java_java_util_zip_Deflater_end(JNIEnv *, jclass, jlong);
+
+JNIEXPORT jint JNICALL
+Java_java_util_zip_Adler32_update(JNIEnv *, jclass, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_java_util_zip_Adler32_updateBytes(JNIEnv *, jclass, jint,
+                                       jarray, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_java_util_zip_Adler32_updateByteBuffer(JNIEnv *, jclass, jint,
+                                       jlong, jint, jint);
+
+JNIEXPORT void JNICALL
+Java_java_util_zip_ZipFile_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT jlong JNICALL
+Java_java_util_zip_ZipFile_open(JNIEnv *, jclass, jstring,
+                                        jint, jlong,
+                                        jboolean);
+
+JNIEXPORT jint JNICALL
+Java_java_util_zip_ZipFile_getTotal(JNIEnv *, jclass, jlong);
+
+JNIEXPORT jboolean JNICALL
+Java_java_util_zip_ZipFile_startsWithLOC(JNIEnv *, jclass, jlong);
+
+JNIEXPORT void JNICALL
+Java_java_util_zip_ZipFile_close(JNIEnv *, jclass, jlong);
+
+JNIEXPORT jlong JNICALL
+Java_java_util_zip_ZipFile_getEntry(JNIEnv *, jclass, jlong,
+                                    jbyteArray, jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_util_zip_ZipFile_freeEntry(JNIEnv *, jclass, jlong,
+                                    jlong);
+
+JNIEXPORT jlong JNICALL
+Java_java_util_zip_ZipFile_getNextEntry(JNIEnv *, jclass, jlong,
+                                        jint);
+
+JNIEXPORT jint JNICALL
+Java_java_util_zip_ZipFile_getEntryMethod(JNIEnv *, jclass, jlong);
+
+JNIEXPORT jint JNICALL
+Java_java_util_zip_ZipFile_getEntryFlag(JNIEnv *, jclass, jlong);
+
+JNIEXPORT jlong JNICALL
+Java_java_util_zip_ZipFile_getEntryCSize(JNIEnv *, jclass, jlong);
+
+JNIEXPORT jlong JNICALL
+Java_java_util_zip_ZipFile_getEntrySize(JNIEnv *, jclass, jlong);
+
+JNIEXPORT jlong JNICALL
+Java_java_util_zip_ZipFile_getEntryTime(JNIEnv *, jclass, jlong);
+
+JNIEXPORT jlong JNICALL
+Java_java_util_zip_ZipFile_getEntryCrc(JNIEnv *, jclass, jlong);
+
+JNIEXPORT jbyteArray JNICALL
+Java_java_util_zip_ZipFile_getCommentBytes(JNIEnv *,
+                                           jclass,
+                                           jlong);
+
+JNIEXPORT jbyteArray JNICALL
+Java_java_util_zip_ZipFile_getEntryBytes(JNIEnv *,
+                                         jclass,
+                                         jlong, jint);
+
+JNIEXPORT jint JNICALL
+Java_java_util_zip_ZipFile_read(JNIEnv *, jclass, jlong,
+                                jlong, jlong, jbyteArray,
+                                jint, jint);
+
+JNIEXPORT jobjectArray JNICALL
+Java_java_util_jar_JarFile_getMetaInfEntryNames(JNIEnv *, jobject);
+
+JNIEXPORT jstring JNICALL
+Java_java_util_zip_ZipFile_getZipMessage(JNIEnv *, jclass, jlong);
+
+JNIEXPORT void JNICALL
+Java_java_util_zip_Inflater_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT jlong JNICALL
+Java_java_util_zip_Inflater_init(JNIEnv *, jclass, jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_util_zip_Inflater_setDictionary(JNIEnv *, jclass, jlong,
+                                          jarray, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_java_util_zip_Inflater_inflateBytes(JNIEnv *, jobject, jlong,
+                                         jarray, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_java_util_zip_Inflater_getAdler(JNIEnv *, jclass, jlong);
+
+JNIEXPORT void JNICALL
+Java_java_util_zip_Inflater_reset(JNIEnv *, jclass, jlong);
+
+JNIEXPORT void JNICALL
+Java_java_util_zip_Inflater_end(JNIEnv *, jclass, jlong);
+
+JNIEXPORT jboolean JNICALL
+Java_java_util_concurrent_atomic_AtomicLong_VMSupportsCS8(JNIEnv *, jclass);
+
+JNIEXPORT jobject JNICALL Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedAction_2
+  (JNIEnv *, jclass, jobject);
+
+JNIEXPORT jobject JNICALL Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedAction_2Ljava_security_AccessControlContext_2
+  (JNIEnv *, jclass, jobject, jobject);
+
+JNIEXPORT jobject JNICALL Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedExceptionAction_2
+  (JNIEnv *, jclass, jobject);
+
+JNIEXPORT jobject JNICALL Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedExceptionAction_2Ljava_security_AccessControlContext_2
+  (JNIEnv *, jclass, jobject, jobject);
+
+JNIEXPORT jobject JNICALL
+Java_java_security_AccessController_getStackAccessControlContext(
+                                                              JNIEnv *,
+                                                              jobject);
+
+JNIEXPORT jobject JNICALL
+Java_java_security_AccessController_getInheritedAccessControlContext(
+                                                              JNIEnv *,
+                                                              jobject);
+
+JNIEXPORT void JNICALL
+Java_java_nio_Bits_copyFromShortArray(JNIEnv *, jobject, jobject,
+                                      jlong, jlong, jlong);
+
+JNIEXPORT void JNICALL
+Java_java_nio_Bits_copyToShortArray(JNIEnv *, jobject, jlong,
+                                    jobject, jlong, jlong);
+
+JNIEXPORT void JNICALL
+Java_java_nio_Bits_copyFromIntArray(JNIEnv *, jobject, jobject,
+                                    jlong, jlong, jlong);
+
+JNIEXPORT void JNICALL
+Java_java_nio_Bits_copyToIntArray(JNIEnv *, jobject, jlong,
+                                  jobject, jlong, jlong);
+
+JNIEXPORT void JNICALL
+Java_java_nio_Bits_copyFromLongArray(JNIEnv *, jobject, jobject,
+                                     jlong, jlong, jlong);
+
+JNIEXPORT void JNICALL
+Java_java_nio_Bits_copyToLongArray(JNIEnv *, jobject, jlong,
+                                   jobject, jlong, jlong);
+
+JNIEXPORT void JNICALL Java_java_net_InetAddress_init(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL Java_java_net_Inet4Address_init(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL Java_java_net_Inet6Address_init(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL Java_java_net_NetworkInterface_init(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL NET_ThrowNew(JNIEnv *, int, char *);
+
+JNIEXPORT jint JNICALL ipv6_available();
+
+JNIEXPORT int JNICALL
+NET_InetAddressToSockaddr(JNIEnv *, jobject, int, struct sockaddr *, int *, jboolean v4MappedAddress);
+
+JNIEXPORT jobject JNICALL
+NET_SockaddrToInetAddress(JNIEnv *, struct sockaddr *, int *);
+
+JNIEXPORT jint JNICALL
+NET_GetPortFromSockaddr(struct sockaddr *);
+
+JNIEXPORT jint JNICALL
+NET_SockaddrEqualsInetAddress(JNIEnv *,struct sockaddr *, jobject);
+
+JNIEXPORT int JNICALL
+NET_GetSockOpt(int, int, int, void *, int *);
+
+JNIEXPORT int JNICALL
+NET_SetSockOpt(int, int, int, const void *, int);
+
+JNIEXPORT int JNICALL
+NET_Bind(int, struct sockaddr *, int);
+
+JNIEXPORT int JNICALL
+NET_MapSocketOption(jint, int *, int *);
+
+JNIEXPORT jint JNICALL
+NET_EnableFastTcpLoopback(int);
+
+JNIEXPORT void JNICALL
+Java_java_net_Inet6Address_init(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_java_net_InetAddress_init(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_java_net_DatagramPacket_init (JNIEnv *, jclass);
+
+JNIEXPORT jint JNICALL ipv6_available();
+
+JNIEXPORT jobject JNICALL
+NET_SockaddrToInetAddress(JNIEnv *, struct sockaddr *, int *);
+
+JNIEXPORT jint JNICALL
+NET_SockaddrEqualsInetAddress(JNIEnv *, struct sockaddr *, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_net_Inet4Address_init(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_java_lang_Shutdown_halt0(JNIEnv *, jclass, jint);
+
+JNIEXPORT void JNICALL
+Java_java_lang_Shutdown_runAllFinalizers(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_java_lang_System_registerNatives(JNIEnv *, jclass);
+
+JNIEXPORT jint JNICALL
+Java_java_lang_System_identityHashCode(JNIEnv *, jobject, jobject);
+
+JNIEXPORT jobject JNICALL
+Java_java_lang_System_initProperties(JNIEnv *, jclass, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_lang_System_setIn0(JNIEnv *, jclass, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_lang_System_setOut0(JNIEnv *, jclass, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_lang_System_setErr0(JNIEnv *, jclass, jobject);
+
+JNIEXPORT jstring JNICALL
+Java_java_lang_System_mapLibraryName(JNIEnv *, jclass, jstring);
+
+JNIEXPORT jobjectArray JNICALL
+Java_java_lang_SecurityManager_getClassContext(JNIEnv *, jobject);
+
+JNIEXPORT jclass JNICALL
+Java_java_lang_SecurityManager_currentLoadedClass0(JNIEnv *, jobject);
+
+JNIEXPORT jobject JNICALL
+Java_java_lang_SecurityManager_currentClassLoader0(JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL
+Java_java_lang_SecurityManager_classDepth(JNIEnv *, jobject,
+                                          jstring);
+
+JNIEXPORT jint JNICALL
+Java_java_lang_SecurityManager_classLoaderDepth0(JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_lang_Thread_registerNatives(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_java_lang_Compiler_registerNatives(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_java_lang_ClassLoader_registerNatives(JNIEnv *, jclass);
+
+JNIEXPORT jclass JNICALL
+Java_java_lang_ClassLoader_defineClass0(JNIEnv *,
+                                        jobject,
+                                        jstring,
+                                        jbyteArray,
+                                        jint,
+                                        jint,
+                                        jobject);
+
+JNIEXPORT jclass JNICALL
+Java_java_lang_ClassLoader_defineClass1(JNIEnv *,
+                                        jobject,
+                                        jstring,
+                                        jbyteArray,
+                                        jint,
+                                        jint,
+                                        jobject,
+                                        jstring);
+
+JNIEXPORT jclass JNICALL
+Java_java_lang_ClassLoader_defineClass2(JNIEnv *,
+                                        jobject,
+                                        jstring,
+                                        jobject,
+                                        jint,
+                                        jint,
+                                        jobject,
+                                        jstring);
+
+JNIEXPORT void JNICALL
+Java_java_lang_ClassLoader_resolveClass0(JNIEnv *, jobject,
+                                         jclass);
+
+JNIEXPORT jclass JNICALL
+Java_java_lang_ClassLoader_findBootstrapClass(JNIEnv *, jobject,
+                                              jstring);
+
+JNIEXPORT jclass JNICALL
+Java_java_lang_ClassLoader_findLoadedClass0(JNIEnv *, jobject,
+                                           jstring);
+
+JNIEXPORT void JNICALL
+Java_java_lang_ClassLoader_00024NativeLibrary_load
+  (JNIEnv *, jobject, jstring, jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_lang_ClassLoader_00024NativeLibrary_unload
+(JNIEnv *, jobject, jstring, jboolean);
+
+JNIEXPORT jlong JNICALL
+Java_java_lang_ClassLoader_00024NativeLibrary_find
+  (JNIEnv *, jobject, jstring);
+
+JNIEXPORT jstring JNICALL
+Java_java_lang_ClassLoader_findBuiltinLib
+  (JNIEnv *, jclass, jstring);
+
+JNIEXPORT jobject JNICALL
+Java_java_lang_Throwable_fillInStackTrace(JNIEnv *, jobject, int);
+
+JNIEXPORT jint JNICALL
+Java_java_lang_Throwable_getStackTraceDepth(JNIEnv *, jobject);
+
+JNIEXPORT jobject JNICALL
+Java_java_lang_Throwable_getStackTraceElement(JNIEnv *,
+                                              jobject, jint);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_cos(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_sin(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_tan(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_asin(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_acos(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_atan(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_exp(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_log(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_log10(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_sqrt(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_cbrt(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_atan2(JNIEnv *, jclass, jdouble d1, jdouble d2);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_pow(JNIEnv *, jclass, jdouble d1, jdouble d2);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_IEEEremainder(JNIEnv *, jclass,
+                                  jdouble,
+                                  jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_cosh(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_sinh(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_tanh(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_hypot(JNIEnv *, jclass, jdouble, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_log1p(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_StrictMath_expm1(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT jfloat JNICALL
+Java_java_lang_Float_intBitsToFloat(JNIEnv *, jclass, jint);
+
+JNIEXPORT jint JNICALL
+Java_java_lang_Float_floatToRawIntBits(JNIEnv *, jclass, jfloat);
+
+JNIEXPORT void JNICALL
+Java_java_lang_Class_registerNatives(JNIEnv *, jclass);
+
+JNIEXPORT jclass JNICALL
+Java_java_lang_Class_forName0(JNIEnv *, jclass, jstring,
+                              jboolean, jobject, jclass);
+
+JNIEXPORT jboolean JNICALL
+Java_java_lang_Class_isInstance(JNIEnv *, jobject, jobject);
+
+JNIEXPORT jboolean JNICALL
+Java_java_lang_Class_isAssignableFrom(JNIEnv *, jobject, jobject cls2);
+
+JNIEXPORT jclass JNICALL
+Java_java_lang_Class_getPrimitiveClass(JNIEnv *,
+                                       jclass,
+                                       jstring);
+
+JNIEXPORT void JNICALL
+Java_java_lang_Object_registerNatives(JNIEnv *, jclass);
+
+JNIEXPORT jclass JNICALL
+Java_java_lang_Object_getClass(JNIEnv *, jobject);
+
+JNIEXPORT jobject JNICALL
+Java_java_lang_String_intern(JNIEnv *, jobject);
+
+JNIEXPORT jbyteArray JNICALL
+Java_java_lang_reflect_Field_getTypeAnnotationBytes0(JNIEnv *,
+                                                     jobject);
+
+JNIEXPORT jint JNICALL
+Java_java_lang_reflect_Array_getLength(JNIEnv *, jclass, jobject);
+
+JNIEXPORT jobject JNICALL
+Java_java_lang_reflect_Array_get(JNIEnv *, jclass, jobject,
+                                 jint);
+
+JNIEXPORT jboolean JNICALL
+Java_java_lang_reflect_Array_getBoolean(JNIEnv *, jclass, jobject,
+                                        jint);
+
+JNIEXPORT jbyte JNICALL
+Java_java_lang_reflect_Array_getByte(JNIEnv *, jclass, jobject,
+                                     jint);
+
+JNIEXPORT jchar JNICALL
+Java_java_lang_reflect_Array_getChar(JNIEnv *, jclass, jobject,
+                                     jint);
+
+JNIEXPORT jshort JNICALL
+Java_java_lang_reflect_Array_getShort(JNIEnv *, jclass, jobject,
+                                     jint);
+
+JNIEXPORT jint JNICALL
+Java_java_lang_reflect_Array_getInt(JNIEnv *, jclass, jobject,
+                                     jint);
+
+JNIEXPORT jlong JNICALL
+Java_java_lang_reflect_Array_getLong(JNIEnv *, jclass, jobject,
+                                     jint);
+
+JNIEXPORT jfloat JNICALL
+Java_java_lang_reflect_Array_getFloat(JNIEnv *, jclass, jobject,
+                                     jint);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_reflect_Array_getDouble(JNIEnv *, jclass, jobject,
+                                     jint);
+
+JNIEXPORT void JNICALL
+Java_java_lang_reflect_Array_set(JNIEnv *, jclass, jobject,
+                                 jint, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_lang_reflect_Array_setBoolean(JNIEnv *, jclass,
+                                        jobject, jint, jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_lang_reflect_Array_setByte(JNIEnv *, jclass,
+                                        jobject, jint, jbyte);
+
+JNIEXPORT void JNICALL
+Java_java_lang_reflect_Array_setChar(JNIEnv *, jclass,
+                                        jobject, jint, jchar);
+
+JNIEXPORT void JNICALL
+Java_java_lang_reflect_Array_setShort(JNIEnv *, jclass,
+                                        jobject, jint, jshort);
+
+JNIEXPORT void JNICALL
+Java_java_lang_reflect_Array_setInt(JNIEnv *, jclass,
+                                        jobject, jint, jint);
+
+JNIEXPORT void JNICALL
+Java_java_lang_reflect_Array_setLong(JNIEnv *, jclass,
+                                        jobject, jint, jlong);
+
+JNIEXPORT void JNICALL
+Java_java_lang_reflect_Array_setFloat(JNIEnv *, jclass,
+                                        jobject, jint, jfloat);
+
+JNIEXPORT void JNICALL
+Java_java_lang_reflect_Array_setDouble(JNIEnv *, jclass,
+                                        jobject, jint, jdouble);
+
+JNIEXPORT jobject JNICALL
+Java_java_lang_reflect_Array_newArray(JNIEnv *, jclass,
+                                      jclass, jint);
+
+JNIEXPORT jobject JNICALL
+Java_java_lang_reflect_Array_multiNewArray(JNIEnv *, jclass,
+                                           jclass, jintArray);
+
+JNIEXPORT jobject JNICALL
+Java_java_lang_reflect_Executable_getParameters0(JNIEnv *,
+                                                 jobject);
+
+JNIEXPORT jbyteArray JNICALL
+Java_java_lang_reflect_Executable_getTypeAnnotationBytes0(JNIEnv *,
+                                                          jobject);
+
+JNIEXPORT jclass JNICALL
+Java_java_lang_reflect_Proxy_defineClass0(JNIEnv *,
+                                          jclass,
+                                          jobject,
+                                          jstring,
+                                          jbyteArray,
+                                          jint,
+                                          jint);
+
+JNIEXPORT jlong JNICALL
+Java_java_lang_Runtime_freeMemory(JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_java_lang_Runtime_totalMemory(JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_java_lang_Runtime_maxMemory(JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_lang_Runtime_gc(JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_lang_Runtime_traceInstructions(JNIEnv *, jobject, jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_lang_Runtime_traceMethodCalls(JNIEnv *, jobject, jboolean);
+
+JNIEXPORT void JNICALL
+Java_java_lang_Runtime_runFinalization0(JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL
+Java_java_lang_Runtime_availableProcessors(JNIEnv *, jobject);
+
+JNIEXPORT jstring JNICALL
+Java_java_lang_Package_getSystemPackage0(JNIEnv *, jclass, jstring);
+
+JNIEXPORT jobject JNICALL
+Java_java_lang_Package_getSystemPackages0(JNIEnv *, jclass);
+
+JNIEXPORT jdouble JNICALL
+Java_java_lang_Double_longBitsToDouble(JNIEnv *, jclass, jlong);
+
+JNIEXPORT jlong JNICALL
+Java_java_lang_Double_doubleToRawLongBits(JNIEnv *, jclass, jdouble);
+
+JNIEXPORT void JNICALL
+Java_java_io_ObjectStreamClass_initNative(JNIEnv *, jclass);
+
+JNIEXPORT jboolean JNICALL
+Java_java_io_ObjectStreamClass_hasStaticInitializer(JNIEnv *, jclass,
+                                                    jclass);
+
+JNIEXPORT void JNICALL
+Java_java_io_ObjectInputStream_bytesToFloats(JNIEnv *,
+                                             jclass,
+                                             jbyteArray,
+                                             jint,
+                                             jfloatArray,
+                                             jint,
+                                             jint);
+
+JNIEXPORT void JNICALL
+Java_java_io_ObjectInputStream_bytesToDoubles(JNIEnv *,
+                                              jclass,
+                                              jbyteArray,
+                                              jint,
+                                              jdoubleArray,
+                                              jint,
+                                              jint);
+
+JNIEXPORT void JNICALL
+Java_java_io_RandomAccessFile_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_java_io_RandomAccessFile_open0(JNIEnv *,
+                                    jobject, jstring, jint);
+
+JNIEXPORT jint JNICALL
+Java_java_io_RandomAccessFile_read0(JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL
+Java_java_io_RandomAccessFile_readBytes(JNIEnv *,
+    jobject, jbyteArray, jint, jint);
+
+JNIEXPORT void JNICALL
+Java_java_io_RandomAccessFile_write0(JNIEnv *, jobject, jint);
+
+JNIEXPORT void JNICALL
+Java_java_io_RandomAccessFile_writeBytes(JNIEnv *,
+    jobject, jbyteArray, jint, jint);
+
+JNIEXPORT jlong JNICALL
+Java_java_io_RandomAccessFile_getFilePointer(JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_java_io_RandomAccessFile_length(JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_io_RandomAccessFile_seek0(JNIEnv *,
+                    jobject, jlong);
+
+JNIEXPORT void JNICALL
+Java_java_io_RandomAccessFile_setLength(JNIEnv *, jobject,
+                                        jlong);
+
+JNIEXPORT void JNICALL
+Java_java_io_FileInputStream_initIDs(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_java_io_FileInputStream_open0(JNIEnv *, jobject, jstring);
+
+JNIEXPORT jint JNICALL
+Java_java_io_FileInputStream_read0(JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL
+Java_java_io_FileInputStream_readBytes(JNIEnv *, jobject,
+        jbyteArray, jint, jint);
+
+JNIEXPORT jlong JNICALL
+Java_java_io_FileInputStream_skip(JNIEnv *, jobject, jlong);
+
+JNIEXPORT jint JNICALL
+Java_java_io_FileInputStream_available(JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+Java_java_io_ObjectOutputStream_floatsToBytes(JNIEnv *,
+                                              jclass,
+                                              jfloatArray,
+                                              jint,
+                                              jbyteArray,
+                                              jint,
+                                              jint);
+
+JNIEXPORT void JNICALL
+Java_java_io_ObjectOutputStream_doublesToBytes(JNIEnv *,
+                                               jclass,
+                                               jdoubleArray,
+                                               jint,
+                                               jbyteArray,
+                                               jint,
+                                               jint);
+
+JNIEXPORT void JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1EncryptInit
+(JNIEnv *, jobject, jlong,
+ jobject, jlong);
+
+JNIEXPORT jint JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1Encrypt
+(JNIEnv *, jobject, jlong,
+ jbyteArray, jint, jint,
+ jbyteArray, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1EncryptUpdate
+(JNIEnv *, jobject, jlong,
+ jlong, jbyteArray, jint, jint,
+ jlong, jbyteArray, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1EncryptFinal
+(JNIEnv *, jobject, jlong,
+ jlong, jbyteArray, jint, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1DecryptInit
+(JNIEnv *, jobject, jlong,
+ jobject, jlong);
+
+JNIEXPORT jint JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1Decrypt
+(JNIEnv *, jobject, jlong,
+ jbyteArray, jint, jint,
+ jbyteArray, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1DecryptUpdate
+(JNIEnv *, jobject, jlong,
+ jlong, jbyteArray, jint, jint,
+ jlong, jbyteArray, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1DecryptFinal
+(JNIEnv *, jobject, jlong,
+ jlong, jbyteArray, jint, jint);
+
+JNIEXPORT jlong JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1GenerateKey
+    (JNIEnv *, jobject, jlong, jobject, jobjectArray);
+
+JNIEXPORT jlongArray JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1GenerateKeyPair
+    (JNIEnv *, jobject, jlong, jobject,
+     jobjectArray, jobjectArray);
+
+JNIEXPORT jbyteArray JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1WrapKey
+    (JNIEnv *, jobject, jlong, jobject, jlong, jlong);
+
+JNIEXPORT jlong JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1UnwrapKey
+    (JNIEnv *, jobject, jlong, jobject, jlong,
+     jbyteArray, jobjectArray);
+
+JNIEXPORT jlong JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1DeriveKey
+    (JNIEnv *, jobject, jlong, jobject, jlong, jobjectArray);
+
+JNIEXPORT jlong JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1OpenSession
+    (JNIEnv *, jobject, jlong, jlong, jobject, jobject);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1CloseSession
+    (JNIEnv *, jobject, jlong);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1CloseAllSessions
+    (JNIEnv *, jobject, jlong);
+
+JNIEXPORT jobject JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetSessionInfo
+    (JNIEnv *, jobject, jlong);
+
+JNIEXPORT jbyteArray JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetOperationState
+    (JNIEnv *, jobject, jlong);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1SetOperationState
+    (JNIEnv *, jobject, jlong, jbyteArray, jlong, jlong);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1Login
+    (JNIEnv *, jobject, jlong, jlong, jcharArray);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1Logout
+    (JNIEnv *, jobject, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_initializeLibrary
+(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_finalizeLibrary
+(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1Initialize
+(JNIEnv *, jobject, jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1Finalize
+(JNIEnv *, jobject, jobject);
+
+JNIEXPORT jobject JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetInfo
+(JNIEnv *, jobject);
+
+JNIEXPORT jlongArray JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetSlotList
+(JNIEnv *, jobject, jboolean);
+
+JNIEXPORT jobject JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetSlotInfo
+(JNIEnv *, jobject, jlong);
+
+JNIEXPORT jobject JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetTokenInfo
+(JNIEnv *, jobject, jlong);
+
+JNIEXPORT jlong JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1WaitForSlotEvent
+(JNIEnv *, jobject, jlong, jobject);
+
+JNIEXPORT jlongArray JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetMechanismList
+(JNIEnv *, jobject, jlong);
+
+JNIEXPORT jobject JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetMechanismInfo
+(JNIEnv *, jobject, jlong, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1InitToken
+(JNIEnv *, jobject, jlong, jcharArray, jcharArray);
+
+JNIEXPORT void JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1InitPIN
+(JNIEnv *, jobject, jlong, jcharArray);
+
+JNIEXPORT void JNICALL
+Java_sun_security_pkcs11_wrapper_PKCS11_C_1SetPIN
+(JNIEnv *, jobject, jlong, jcharArray,
+jcharArray);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1SignInit
+    (JNIEnv *, jobject, jlong, jobject, jlong);
+
+JNIEXPORT jbyteArray JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1Sign
+    (JNIEnv *, jobject, jlong, jbyteArray);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1SignUpdate
+  (JNIEnv *, jobject, jlong, jlong, jbyteArray, jint, jint);
+
+JNIEXPORT jbyteArray JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1SignFinal
+    (JNIEnv *, jobject, jlong, jint);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1SignRecoverInit
+    (JNIEnv *, jobject, jlong, jobject, jlong);
+
+JNIEXPORT jint JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1SignRecover
+  (JNIEnv *, jobject, jlong, jbyteArray, jint, jint, jbyteArray, jint, jint);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1VerifyInit
+    (JNIEnv *, jobject, jlong, jobject, jlong);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1Verify
+    (JNIEnv *, jobject, jlong, jbyteArray, jbyteArray);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1VerifyUpdate
+  (JNIEnv *, jobject, jlong, jlong, jbyteArray, jint, jint);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1VerifyFinal
+    (JNIEnv *, jobject, jlong, jbyteArray);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1VerifyRecoverInit
+    (JNIEnv *, jobject, jlong, jobject, jlong);
+
+JNIEXPORT jint JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1VerifyRecover
+  (JNIEnv *, jobject, jlong, jbyteArray, jint, jint, jbyteArray, jint, jint);
+
+JNIEXPORT jbyteArray JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1DigestEncryptUpdate
+    (JNIEnv *, jobject, jlong, jbyteArray);
+
+JNIEXPORT jbyteArray JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1DecryptDigestUpdate
+    (JNIEnv *, jobject, jlong, jbyteArray);
+
+JNIEXPORT jbyteArray JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1SignEncryptUpdate
+    (JNIEnv *, jobject, jlong, jbyteArray);
+
+JNIEXPORT jbyteArray JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1DecryptVerifyUpdate
+    (JNIEnv *, jobject, jlong, jbyteArray);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetFunctionStatus
+    (JNIEnv *, jobject, jlong);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1CancelFunction
+    (JNIEnv *, jobject, jlong);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1DigestInit
+    (JNIEnv *, jobject, jlong, jobject);
+
+JNIEXPORT jint JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1DigestSingle
+  (JNIEnv *, jobject, jlong, jobject, jbyteArray, jint, jint, jbyteArray, jint, jint);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1DigestUpdate
+  (JNIEnv *, jobject, jlong, jlong, jbyteArray, jint, jint);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1DigestKey
+    (JNIEnv *, jobject, jlong, jlong);
+
+JNIEXPORT jint JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1DigestFinal
+  (JNIEnv *, jobject, jlong, jbyteArray, jint, jint);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1SeedRandom
+    (JNIEnv *, jobject, jlong, jbyteArray);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1GenerateRandom
+    (JNIEnv *, jobject, jlong, jbyteArray);
+
+JNIEXPORT jlong JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1CreateObject
+    (JNIEnv *, jobject, jlong, jobjectArray);
+
+JNIEXPORT jlong JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1CopyObject
+    (JNIEnv *, jobject, jlong, jlong, jobjectArray);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1DestroyObject
+    (JNIEnv *, jobject, jlong, jlong);
+
+JNIEXPORT jlong JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetObjectSize
+    (JNIEnv *, jobject, jlong, jlong);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1GetAttributeValue
+    (JNIEnv *, jobject, jlong, jlong, jobjectArray);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1SetAttributeValue
+    (JNIEnv *, jobject, jlong, jlong, jobjectArray);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1FindObjectsInit
+    (JNIEnv *, jobject, jlong, jobjectArray);
+
+JNIEXPORT jlongArray JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1FindObjects
+    (JNIEnv *, jobject, jlong, jlong);
+
+JNIEXPORT void JNICALL Java_sun_security_pkcs11_wrapper_PKCS11_C_1FindObjectsFinal
+    (JNIEnv *, jobject, jlong);
+
+JNIEXPORT jboolean JNICALL Java_sun_security_pkcs11_Secmod_nssVersionCheck
+  (JNIEnv *, jclass, jlong, jstring);
+
+JNIEXPORT jboolean JNICALL Java_sun_security_pkcs11_Secmod_nssInitialize
+  (JNIEnv *, jclass, jstring, jlong, jstring, jboolean);
+
+JNIEXPORT jobject JNICALL Java_sun_security_pkcs11_Secmod_nssGetModuleList
+  (JNIEnv *, jclass, jlong, jstring);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_init(JNIEnv *,
+                                               jclass,
+                                               jstring,
+                                               jboolean);
+
+JNIEXPORT jlong JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_getMechPtr(JNIEnv *,
+                                                     jclass,
+                                                     jbyteArray);
+
+JNIEXPORT jobjectArray JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_indicateMechs(JNIEnv *,
+                                                        jclass);
+
+JNIEXPORT jobjectArray JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_inquireNamesForMech(JNIEnv *,
+                                                              jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_releaseName(JNIEnv *,
+                                                      jobject,
+                                                      jlong);
+
+JNIEXPORT jlong JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_importName(JNIEnv *,
+                                                     jobject,
+                                                     jbyteArray,
+                                                     jobject);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_compareName(JNIEnv *,
+                                                      jobject,
+                                                      jlong pName1,
+                                                      jlong pName2);
+
+JNIEXPORT jlong JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_canonicalizeName(JNIEnv *,
+                                                           jobject,
+                                                           jlong);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_exportName(JNIEnv *,
+                                                     jobject,
+                                                     jlong);
+
+JNIEXPORT jobjectArray JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_displayName(JNIEnv *,
+                                                      jobject,
+                                                      jlong);
+
+JNIEXPORT jlong JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_acquireCred(JNIEnv *,
+                                                      jobject,
+                                                      jlong,
+                                                      jint,
+                                                      jint);
+
+JNIEXPORT jlong JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_releaseCred(JNIEnv *,
+                                                      jobject,
+                                                      jlong);
+
+JNIEXPORT jlong JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_getCredName(JNIEnv *,
+                                                      jobject,
+                                                      jlong);
+
+JNIEXPORT jint JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_getCredTime(JNIEnv *,
+                                                      jobject,
+                                                      jlong);
+
+JNIEXPORT jint JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_getCredUsage(JNIEnv *,
+                                                       jobject,
+                                                       jlong);
+
+JNIEXPORT jobject JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_importContext(JNIEnv *,
+                                                        jobject,
+                                                        jbyteArray);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_initContext(JNIEnv *,
+                                                      jobject,
+                                                      jlong,
+                                                      jlong,
+                                                      jobject,
+                                                      jbyteArray,
+                                                      jobject);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_acceptContext(JNIEnv *,
+                                                        jobject,
+                                                        jlong,
+                                                        jobject,
+                                                        jbyteArray,
+                                                        jobject);
+
+JNIEXPORT jlongArray JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_inquireContext(JNIEnv *,
+                                                         jobject,
+                                                         jlong);
+
+JNIEXPORT jobject JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_getContextMech(JNIEnv *,
+                                                         jobject,
+                                                         jlong);
+
+JNIEXPORT jlong JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_getContextName(JNIEnv *,
+  jobject, jlong, jboolean);
+
+JNIEXPORT jint JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_getContextTime(JNIEnv *,
+                                                         jobject,
+                                                         jlong);
+
+JNIEXPORT jlong JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_deleteContext(JNIEnv *,
+                                                        jobject,
+                                                        jlong);
+
+JNIEXPORT jint JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_wrapSizeLimit(JNIEnv *,
+                                                        jobject,
+                                                        jlong,
+                                                        jint,
+                                                        jint,
+                                                        jint);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_exportContext(JNIEnv *,
+                                                        jobject,
+                                                        jlong);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_getMic(JNIEnv *, jobject,
+                                                 jlong, jint,
+                                                 jbyteArray);
+
+JNIEXPORT void JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_verifyMic(JNIEnv *,
+                                                    jobject,
+                                                    jlong,
+                                                    jbyteArray,
+                                                    jbyteArray,
+                                                    jobject);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_wrap(JNIEnv *,
+                                               jobject,
+                                               jlong,
+                                               jbyteArray,
+                                               jobject);
+
+JNIEXPORT jbyteArray JNICALL
+Java_sun_security_jgss_wrapper_GSSLibStub_unwrap(JNIEnv *,
+                                                 jobject,
+                                                 jlong,
+                                                 jbyteArray,
+                                                 jobject);
+
+JNIEXPORT jobjectArray
+JNICALL Java_sun_security_ec_ECKeyPairGenerator_generateECKeyPair
+  (JNIEnv *, jclass, jint, jbyteArray, jbyteArray);
+
+JNIEXPORT jbyteArray
+JNICALL Java_sun_security_ec_ECDSASignature_signDigest
+  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);
+
+JNIEXPORT jboolean
+JNICALL Java_sun_security_ec_ECDSASignature_verifySignedDigest
+  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);
+
+JNIEXPORT jbyteArray
+JNICALL Java_sun_security_ec_ECDHKeyAgreement_deriveKey
+  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);
+
+JNIEXPORT jlong JNICALL Java_sun_security_smartcardio_PCSC_SCardEstablishContext
+    (JNIEnv *, jclass, jint);
+
+JNIEXPORT jobjectArray JNICALL Java_sun_security_smartcardio_PCSC_SCardListReaders
+    (JNIEnv *, jclass, jlong);
+
+JNIEXPORT jlong JNICALL Java_sun_security_smartcardio_PCSC_SCardConnect
+    (JNIEnv *, jclass, jlong, jstring,
+    jint, jint);
+
+JNIEXPORT jbyteArray JNICALL Java_sun_security_smartcardio_PCSC_SCardTransmit
+    (JNIEnv *, jclass, jlong, jint,
+    jbyteArray, jint, jint);
+
+JNIEXPORT jbyteArray JNICALL Java_sun_security_smartcardio_PCSC_SCardStatus
+    (JNIEnv *, jclass, jlong, jbyteArray);
+
+JNIEXPORT void JNICALL Java_sun_security_smartcardio_PCSC_SCardDisconnect
+    (JNIEnv *, jclass, jlong, jint);
+
+JNIEXPORT jintArray JNICALL Java_sun_security_smartcardio_PCSC_SCardGetStatusChange
+    (JNIEnv *, jclass, jlong, jlong,
+    jintArray, jobjectArray);
+
+JNIEXPORT void JNICALL Java_sun_security_smartcardio_PCSC_SCardBeginTransaction
+    (JNIEnv *, jclass, jlong);
+
+JNIEXPORT void JNICALL Java_sun_security_smartcardio_PCSC_SCardEndTransaction
+    (JNIEnv *, jclass, jlong, jint);
+
+JNIEXPORT jbyteArray JNICALL Java_sun_security_smartcardio_PCSC_SCardControl
+    (JNIEnv *, jclass, jlong, jint, jbyteArray);
+
+JNIEXPORT jboolean JNICALL Java_sun_tracing_dtrace_JVM_isSupported0(
+        JNIEnv*, jclass);
+
+JNIEXPORT jlong JNICALL Java_sun_tracing_dtrace_JVM_activate0(
+        JNIEnv*, jclass, jstring, jobjectArray);
+
+JNIEXPORT void JNICALL Java_sun_tracing_dtrace_JVM_dispose0(
+        JNIEnv*, jclass, jlong);
+
+JNIEXPORT jboolean JNICALL Java_sun_tracing_dtrace_JVM_isEnabled0(
+        JNIEnv*, jclass, jobject);
+
+JNIEXPORT jclass JNICALL
+Java_sun_tracing_dtrace_JVM_defineClass0(
+        JNIEnv *, jclass, jobject, jstring, jbyteArray,
+        jint, jint);
+
+JNIEXPORT jstring JNICALL
+Java_sun_management_VMManagementImpl_getVersion0
+  (JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_sun_management_VMManagementImpl_initOptionalSupportFields
+  (JNIEnv *, jclass);
+
+JNIEXPORT jobjectArray JNICALL
+Java_sun_management_VMManagementImpl_getVmArguments0
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getTotalClassCount
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getUnloadedClassCount
+  (JNIEnv *, jobject);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_management_VMManagementImpl_getVerboseGC
+  (JNIEnv *, jobject);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_management_VMManagementImpl_getVerboseClass
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getTotalThreadCount
+  (JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL
+Java_sun_management_VMManagementImpl_getLiveThreadCount
+  (JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL
+Java_sun_management_VMManagementImpl_getPeakThreadCount
+  (JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL
+Java_sun_management_VMManagementImpl_getDaemonThreadCount
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getTotalCompileTime
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getStartupTime
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getUptime0
+  (JNIEnv *, jobject);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_management_VMManagementImpl_isThreadContentionMonitoringEnabled
+  (JNIEnv *, jobject);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_management_VMManagementImpl_isThreadCpuTimeEnabled
+  (JNIEnv *, jobject);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_management_VMManagementImpl_isThreadAllocatedMemoryEnabled
+  (JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL
+Java_sun_management_VMManagementImpl_getProcessId
+  (JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL
+Java_sun_management_VMManagementImpl_getAvailableProcessors
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getSafepointCount
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getTotalSafepointTime
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getSafepointSyncTime
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getTotalApplicationNonStoppedTime
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getLoadedClassSize
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getUnloadedClassSize
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getClassLoadingTime
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getMethodDataSize
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getInitializedClassCount
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getClassInitializationTime
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_VMManagementImpl_getClassVerificationTime
+  (JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL Java_sun_management_GcInfoBuilder_getNumGcExtAttributes
+  (JNIEnv *, jobject, jobject);
+
+JNIEXPORT void JNICALL Java_sun_management_GcInfoBuilder_fillGcAttributeInfo
+  (JNIEnv *, jobject, jobject,
+   jint, jobjectArray,
+   jcharArray, jobjectArray);
+
+JNIEXPORT jobject JNICALL Java_sun_management_GcInfoBuilder_getLastGcInfo0
+  (JNIEnv *, jobject, jobject,
+   jint, jobjectArray, jcharArray,
+   jobjectArray, jobjectArray);
+
+JNIEXPORT jint JNICALL
+Java_sun_management_Flag_getInternalFlagCount
+  (JNIEnv *, jclass);
+
+JNIEXPORT jobjectArray JNICALL
+  Java_sun_management_Flag_getAllFlagNames
+(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_sun_management_Flag_initialize
+  (JNIEnv *, jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_management_Flag_getFlags
+  (JNIEnv *, jclass, jobjectArray, jobjectArray, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_management_Flag_setLongValue
+  (JNIEnv *, jclass, jstring, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_management_Flag_setBooleanValue
+  (JNIEnv *, jclass, jstring, jboolean);
+
+JNIEXPORT void JNICALL
+Java_sun_management_Flag_setStringValue
+  (JNIEnv *, jclass, jstring, jstring);
+
+JNIEXPORT jobject JNICALL
+Java_sun_management_MemoryPoolImpl_getMemoryManagers0
+  (JNIEnv *, jobject);
+
+JNIEXPORT jobject JNICALL
+Java_sun_management_MemoryPoolImpl_getUsage0
+  (JNIEnv *, jobject);
+
+JNIEXPORT jobject JNICALL
+Java_sun_management_MemoryPoolImpl_getPeakUsage0
+  (JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_management_MemoryPoolImpl_setUsageThreshold0
+  (JNIEnv *, jobject, jlong, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_management_MemoryPoolImpl_setCollectionThreshold0
+  (JNIEnv *, jobject, jlong, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_management_MemoryPoolImpl_resetPeakUsage0
+  (JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_management_MemoryPoolImpl_setPoolUsageSensor
+  (JNIEnv *, jobject, jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_management_MemoryPoolImpl_setPoolCollectionSensor
+  (JNIEnv *, jobject, jobject);
+
+JNIEXPORT jobject JNICALL
+Java_sun_management_MemoryPoolImpl_getCollectionUsage0
+  (JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL Java_sun_management_ClassLoadingImpl_setVerboseClass
+  (JNIEnv *, jclass, jboolean);
+
+JNIEXPORT jlong JNICALL Java_sun_management_GarbageCollectorImpl_getCollectionCount
+  (JNIEnv *, jobject);
+
+JNIEXPORT jlong JNICALL Java_sun_management_GarbageCollectorImpl_getCollectionTime
+  (JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL Java_sun_management_GarbageCollectorImpl_setNotificationEnabled
+(JNIEnv *, jobject, jobject,jboolean);
+
+JNIEXPORT void JNICALL
+Java_sun_management_HotSpotDiagnostic_dumpHeap0
+  (JNIEnv *, jobject, jstring, jboolean);
+
+JNIEXPORT jint JNICALL
+Java_sun_management_HotspotThread_getInternalThreadCount
+  (JNIEnv *, jobject);
+
+JNIEXPORT jint JNICALL
+Java_sun_management_HotspotThread_getInternalThreadTimes0
+  (JNIEnv *, jobject, jobjectArray, jobjectArray);
+
+JNIEXPORT void JNICALL
+Java_sun_management_ThreadImpl_setThreadContentionMonitoringEnabled0
+  (JNIEnv *, jclass, jboolean);
+
+JNIEXPORT void JNICALL
+Java_sun_management_ThreadImpl_setThreadCpuTimeEnabled0
+  (JNIEnv *, jclass, jboolean);
+
+JNIEXPORT void JNICALL
+Java_sun_management_ThreadImpl_setThreadAllocatedMemoryEnabled0
+  (JNIEnv *, jclass, jboolean);
+
+JNIEXPORT void JNICALL
+Java_sun_management_ThreadImpl_getThreadInfo1
+  (JNIEnv *, jclass, jlongArray, jint,
+   jobjectArray);
+
+JNIEXPORT jobjectArray JNICALL
+Java_sun_management_ThreadImpl_getThreads
+  (JNIEnv *, jclass);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_ThreadImpl_getThreadTotalCpuTime0
+  (JNIEnv *, jclass, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_management_ThreadImpl_getThreadTotalCpuTime1
+  (JNIEnv *, jclass, jlongArray, jlongArray);
+
+JNIEXPORT jlong JNICALL
+Java_sun_management_ThreadImpl_getThreadUserCpuTime0
+  (JNIEnv *, jclass, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_management_ThreadImpl_getThreadUserCpuTime1
+  (JNIEnv *, jclass, jlongArray, jlongArray);
+
+JNIEXPORT void JNICALL
+Java_sun_management_ThreadImpl_getThreadAllocatedMemory1
+  (JNIEnv *, jclass, jlongArray, jlongArray);
+
+JNIEXPORT jobjectArray JNICALL
+Java_sun_management_ThreadImpl_findMonitorDeadlockedThreads0
+  (JNIEnv *, jclass);
+
+JNIEXPORT jobjectArray JNICALL
+Java_sun_management_ThreadImpl_findDeadlockedThreads0
+  (JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_sun_management_ThreadImpl_resetPeakThreadCount0
+  (JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_sun_management_ThreadImpl_resetContentionTimes0
+  (JNIEnv *, jobject, jlong);
+
+JNIEXPORT jobjectArray JNICALL
+Java_sun_management_ThreadImpl_dumpThreads0
+  (JNIEnv *, jclass, jlongArray, jboolean, jboolean);
+
+JNIEXPORT jobject JNICALL Java_sun_management_MemoryManagerImpl_getMemoryPools0
+  (JNIEnv *, jobject);
+
+JNIEXPORT void JNICALL Java_sun_management_MemoryImpl_setVerboseGC
+  (JNIEnv *, jobject, jboolean);
+
+JNIEXPORT jobject JNICALL Java_sun_management_MemoryImpl_getMemoryPools0
+  (JNIEnv *, jclass);
+
+JNIEXPORT jobject JNICALL Java_sun_management_MemoryImpl_getMemoryManagers0
+  (JNIEnv *, jclass);
+
+JNIEXPORT jobject JNICALL Java_sun_management_MemoryImpl_getMemoryUsage0
+  (JNIEnv *, jobject, jboolean);
+
+JNIEXPORT void JNICALL Java_sun_management_DiagnosticCommandImpl_setNotificationEnabled
+(JNIEnv *, jobject, jboolean);
+
+JNIEXPORT jobjectArray JNICALL
+Java_sun_management_DiagnosticCommandImpl_getDiagnosticCommands
+  (JNIEnv *, jobject);
+
+JNIEXPORT jobjectArray JNICALL
+Java_sun_management_DiagnosticCommandImpl_getDiagnosticCommandInfo
+(JNIEnv *, jobject, jobjectArray);
+
+JNIEXPORT jstring JNICALL
+Java_sun_management_DiagnosticCommandImpl_executeDiagnosticCommand
+(JNIEnv *, jobject, jstring);
+
+JNIEXPORT jclass JNICALL Java_sun_reflect_Reflection_getCallerClass__
+(JNIEnv *, jclass);
+
+JNIEXPORT jclass JNICALL Java_sun_reflect_Reflection_getCallerClass__I
+(JNIEnv *, jclass, jint);
+
+JNIEXPORT jint JNICALL Java_sun_reflect_Reflection_getClassAccessFlags
+(JNIEnv *, jclass, jclass);
+
+JNIEXPORT jobject JNICALL Java_sun_reflect_NativeMethodAccessorImpl_invoke0
+(JNIEnv *, jclass, jobject, jobject, jobjectArray);
+
+JNIEXPORT jobject JNICALL Java_sun_reflect_NativeConstructorAccessorImpl_newInstance0
+(JNIEnv *, jclass, jobject, jobjectArray);
+
+JNIEXPORT jint JNICALL Java_sun_reflect_ConstantPool_getSize0
+(JNIEnv *, jobject, jobject);
+
+JNIEXPORT jclass JNICALL Java_sun_reflect_ConstantPool_getClassAt0
+(JNIEnv *, jobject, jobject, jint);
+
+JNIEXPORT jclass JNICALL Java_sun_reflect_ConstantPool_getClassAtIfLoaded0
+(JNIEnv *, jobject, jobject, jint);
+
+JNIEXPORT jobject JNICALL Java_sun_reflect_ConstantPool_getMethodAt0
+(JNIEnv *, jobject, jobject, jint);
+
+JNIEXPORT jobject JNICALL Java_sun_reflect_ConstantPool_getMethodAtIfLoaded0
+(JNIEnv *, jobject, jobject, jint);
+
+JNIEXPORT jobject JNICALL Java_sun_reflect_ConstantPool_getFieldAt0
+(JNIEnv *, jobject, jobject, jint);
+
+JNIEXPORT jobject JNICALL Java_sun_reflect_ConstantPool_getFieldAtIfLoaded0
+(JNIEnv *, jobject, jobject, jint);
+
+JNIEXPORT jobjectArray JNICALL Java_sun_reflect_ConstantPool_getMemberRefInfoAt0
+(JNIEnv *, jobject, jobject, jint);
+
+JNIEXPORT jint JNICALL Java_sun_reflect_ConstantPool_getIntAt0
+(JNIEnv *, jobject, jobject, jint);
+
+JNIEXPORT jlong JNICALL Java_sun_reflect_ConstantPool_getLongAt0
+(JNIEnv *, jobject, jobject, jint);
+
+JNIEXPORT jfloat JNICALL Java_sun_reflect_ConstantPool_getFloatAt0
+(JNIEnv *, jobject, jobject, jint);
+
+JNIEXPORT jdouble JNICALL Java_sun_reflect_ConstantPool_getDoubleAt0
+(JNIEnv *, jobject, jobject, jint);
+
+JNIEXPORT jstring JNICALL Java_sun_reflect_ConstantPool_getStringAt0
+(JNIEnv *, jobject, jobject, jint);
+
+JNIEXPORT jstring JNICALL Java_sun_reflect_ConstantPool_getUTF8At0
+(JNIEnv *, jobject, jobject, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_misc_Signal_findSignal(JNIEnv *, jclass, jstring);
+
+JNIEXPORT jlong JNICALL
+Java_sun_misc_Signal_handle0(JNIEnv *, jclass, jint, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_misc_Signal_raise0(JNIEnv *, jclass, jint);
+
+JNIEXPORT void JNICALL
+Java_sun_misc_VM_getThreadStateValues(JNIEnv *, jclass, jobjectArray, jobjectArray);
+
+JNIEXPORT jobject JNICALL
+Java_sun_misc_VM_latestUserDefinedLoader(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_sun_misc_VM_initialize(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_sun_misc_MessageUtils_toStderr(JNIEnv *, jclass, jstring);
+
+JNIEXPORT void JNICALL
+Java_sun_misc_MessageUtils_toStdout(JNIEnv *, jclass, jstring);
+
+JNIEXPORT void JNICALL
+Java_sun_misc_NativeSignalHandler_handle0(JNIEnv *, jclass, jint, jlong);
+
+JNIEXPORT jobject JNICALL
+Java_sun_misc_VMSupport_initAgentProperties(JNIEnv *, jclass, jobject);
+
+JNIEXPORT jstring JNICALL
+Java_sun_misc_VMSupport_getVMTemporaryDirectory(JNIEnv *, jclass);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_misc_URLClassPath_knownToNotExist0(JNIEnv *, jclass, jobject, jstring);
+
+JNIEXPORT jobjectArray JNICALL
+Java_sun_misc_URLClassPath_getLookupCacheURLs(JNIEnv *, jclass, jobject);
+
+JNIEXPORT jintArray JNICALL
+Java_sun_misc_URLClassPath_getLookupCacheForClassLoader(JNIEnv *, jclass, jobject, jstring);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_misc_Version_getJvmVersionInfo(JNIEnv *, jclass);
+
+JNIEXPORT jstring JNICALL
+Java_sun_misc_Version_getJvmSpecialVersion(JNIEnv *, jclass);
+
+JNIEXPORT void JNICALL
+Java_sun_misc_Version_getJdkVersionInfo(JNIEnv *, jclass);
+
+JNIEXPORT jstring JNICALL
+Java_sun_misc_Version_getJdkSpecialVersion(JNIEnv *, jclass);
+
+JNIEXPORT jlong JNICALL
+Java_sun_misc_GC_maxObjectInspectionAge(JNIEnv *, jclass);
+
+// BSD Native APIs
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_KQueueArrayWrapper_initStructSizes(JNIEnv*, jclass);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_KQueueArrayWrapper_init(JNIEnv*, jobject);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_KQueueArrayWrapper_register0(JNIEnv*, jobject, jint, jint, jint, jint);
+
+JNIEXPORT jint JNICALL
+Java_sun_nio_ch_KQueueArrayWrapper_kevent0(JNIEnv*, jobject, jint, jlong, jint, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_nio_ch_KQueueArrayWrapper_interrupt(JNIEnv*, jclass, jint);
+
+// Instrument
+JNIEXPORT jboolean JNICALL
+Java_sun_instrument_InstrumentationImpl_isModifiableClass0
+  (JNIEnv *, jobject, jlong, jclass);
+
+JNIEXPORT jboolean JNICALL
+Java_sun_instrument_InstrumentationImpl_isRetransformClassesSupported0
+  (JNIEnv *, jobject, jlong);
+
+JNIEXPORT void JNICALL
+Java_sun_instrument_InstrumentationImpl_setHasRetransformableTransformers
+  (JNIEnv *, jobject, jlong, jboolean);
+
+JNIEXPORT void JNICALL
+Java_sun_instrument_InstrumentationImpl_retransformClasses0
+  (JNIEnv *, jobject, jlong, jobjectArray);
+
+JNIEXPORT void JNICALL Java_sun_instrument_InstrumentationImpl_redefineClasses0
+  (JNIEnv *, jobject, jlong, jobjectArray);
+
+JNIEXPORT jobjectArray JNICALL Java_sun_instrument_InstrumentationImpl_getAllLoadedClasses0
+  (JNIEnv *, jobject, jlong);
+
+JNIEXPORT jobjectArray JNICALL Java_sun_instrument_InstrumentationImpl_getInitiatedClasses0
+  (JNIEnv *, jobject, jlong, jobject);
+
+JNIEXPORT jlong JNICALL Java_sun_instrument_InstrumentationImpl_getObjectSize0
+  (JNIEnv *, jobject, jlong, jobject);
+
+JNIEXPORT void JNICALL Java_sun_instrument_InstrumentationImpl_appendToClassLoaderSearch0
+  (JNIEnv *, jobject, jlong, jstring, jboolean);
+
+JNIEXPORT void JNICALL Java_sun_instrument_InstrumentationImpl_setNativeMethodPrefixes
+  (JNIEnv *, jobject, jlong, jobjectArray, jboolean);
+
+}
+
+#endif /*** __DLFCN_STATIC_H__ ***/
diff -ruN -x '.*' old/hotspot/src/share/vm/prims/perf.cpp new/hotspot/src/share/vm/prims/perf.cpp
--- old/hotspot/src/share/vm/prims/perf.cpp	2016-08-16 10:50:17.033051938 -0600
+++ new/hotspot/src/share/vm/prims/perf.cpp	2016-08-16 14:39:08.170689365 -0600
@@ -290,17 +290,17 @@
 #define FN_PTR(f) CAST_FROM_FN_PTR(void*, &f)
 #define BB "Ljava/nio/ByteBuffer;"
 #define JLS "Ljava/lang/String;"
-#define CL_ARGS     CC"("JLS"IIJ)"BB
-#define CBA_ARGS    CC"("JLS"II[BI)"BB
+#define CL_ARGS     CC "(" JLS "IIJ)" BB
+#define CBA_ARGS    CC "(" JLS "II[BI)" BB
 
 static JNINativeMethod perfmethods[] = {
 
-  {CC"attach",              CC"("JLS"II)"BB,  FN_PTR(Perf_Attach)},
-  {CC"detach",              CC"("BB")V",      FN_PTR(Perf_Detach)},
-  {CC"createLong",          CL_ARGS,          FN_PTR(Perf_CreateLong)},
-  {CC"createByteArray",     CBA_ARGS,         FN_PTR(Perf_CreateByteArray)},
-  {CC"highResCounter",      CC"()J",          FN_PTR(Perf_HighResCounter)},
-  {CC"highResFrequency",    CC"()J",          FN_PTR(Perf_HighResFrequency)}
+  {CC "attach",              CC "(" JLS "II)" BB,  FN_PTR(Perf_Attach)},
+  {CC "detach",              CC "(" BB ")V",      FN_PTR(Perf_Detach)},
+  {CC "createLong",          CL_ARGS,          FN_PTR(Perf_CreateLong)},
+  {CC "createByteArray",     CBA_ARGS,         FN_PTR(Perf_CreateByteArray)},
+  {CC "highResCounter",      CC "()J",          FN_PTR(Perf_HighResCounter)},
+  {CC "highResFrequency",    CC "()J",          FN_PTR(Perf_HighResFrequency)}
 };
 
 #undef CBA_ARGS
diff -ruN -x '.*' old/hotspot/src/share/vm/prims/unsafe.cpp new/hotspot/src/share/vm/prims/unsafe.cpp
--- old/hotspot/src/share/vm/prims/unsafe.cpp	2016-08-16 10:50:17.033051938 -0600
+++ new/hotspot/src/share/vm/prims/unsafe.cpp	2016-08-16 14:39:08.178689723 -0600
@@ -1009,7 +1009,7 @@
 UNSAFE_END
 
 
-#define DAC_Args CLS"[B["OBJ
+#define DAC_Args CLS "[B[" OBJ
 // define a class but do not make it known to the class loader or system dictionary
 // - host_class:  supplies context for linkage, access control, protection domain, and class loader
 // - data:  bytes of a class file, a raw memory address (length gives the number of bytes)
@@ -1374,47 +1374,47 @@
 
 #define LANG "Ljava/lang/"
 
-#define OBJ LANG"Object;"
-#define CLS LANG"Class;"
-#define CTR LANG"reflect/Constructor;"
-#define FLD LANG"reflect/Field;"
-#define MTH LANG"reflect/Method;"
-#define THR LANG"Throwable;"
+#define OBJ LANG "Object;"
+#define CLS LANG "Class;"
+#define CTR LANG "reflect/Constructor;"
+#define FLD LANG "reflect/Field;"
+#define MTH LANG "reflect/Method;"
+#define THR LANG "Throwable;"
 
-#define DC0_Args LANG"String;[BII"
-#define DC_Args  DC0_Args LANG"ClassLoader;" "Ljava/security/ProtectionDomain;"
+#define DC0_Args LANG "String;[BII"
+#define DC_Args  DC0_Args LANG "ClassLoader;" "Ljava/security/ProtectionDomain;"
 
 #define CC (char*)  /*cast a literal from (const char*)*/
 #define FN_PTR(f) CAST_FROM_FN_PTR(void*, &f)
 
 // define deprecated accessors for compabitility with 1.4.0
 #define DECLARE_GETSETOOP_140(Boolean, Z) \
-    {CC"get"#Boolean,      CC"("OBJ"I)"#Z,      FN_PTR(Unsafe_Get##Boolean##140)}, \
-    {CC"put"#Boolean,      CC"("OBJ"I"#Z")V",   FN_PTR(Unsafe_Set##Boolean##140)}
+    {CC "get" #Boolean,      CC "(" OBJ "I)" #Z,      FN_PTR(Unsafe_Get##Boolean##140)}, \
+    {CC "put" #Boolean,      CC "(" OBJ "I" #Z ")V",   FN_PTR(Unsafe_Set##Boolean##140)}
 
 // Note:  In 1.4.1, getObject and kin take both int and long offsets.
 #define DECLARE_GETSETOOP_141(Boolean, Z) \
-    {CC"get"#Boolean,      CC"("OBJ"J)"#Z,      FN_PTR(Unsafe_Get##Boolean)}, \
-    {CC"put"#Boolean,      CC"("OBJ"J"#Z")V",   FN_PTR(Unsafe_Set##Boolean)}
+    {CC "get" #Boolean,      CC "(" OBJ "J)" #Z,      FN_PTR(Unsafe_Get##Boolean)}, \
+    {CC "put" #Boolean,      CC "(" OBJ "J" #Z ")V",   FN_PTR(Unsafe_Set##Boolean)}
 
 // Note:  In 1.5.0, there are volatile versions too
 #define DECLARE_GETSETOOP(Boolean, Z) \
-    {CC"get"#Boolean,      CC"("OBJ"J)"#Z,      FN_PTR(Unsafe_Get##Boolean)}, \
-    {CC"put"#Boolean,      CC"("OBJ"J"#Z")V",   FN_PTR(Unsafe_Set##Boolean)}, \
-    {CC"get"#Boolean"Volatile",      CC"("OBJ"J)"#Z,      FN_PTR(Unsafe_Get##Boolean##Volatile)}, \
-    {CC"put"#Boolean"Volatile",      CC"("OBJ"J"#Z")V",   FN_PTR(Unsafe_Set##Boolean##Volatile)}
+    {CC "get" #Boolean,      CC "(" OBJ "J)" #Z,      FN_PTR(Unsafe_Get##Boolean)}, \
+    {CC "put" #Boolean,      CC "(" OBJ "J" #Z ")V",   FN_PTR(Unsafe_Set##Boolean)}, \
+    {CC "get" #Boolean "Volatile",      CC "(" OBJ "J)" #Z,      FN_PTR(Unsafe_Get##Boolean##Volatile)}, \
+    {CC "put" #Boolean "Volatile",      CC "(" OBJ "J" #Z ")V",   FN_PTR(Unsafe_Set##Boolean##Volatile)}
 
 
 #define DECLARE_GETSETNATIVE(Byte, B) \
-    {CC"get"#Byte,         CC"("ADR")"#B,       FN_PTR(Unsafe_GetNative##Byte)}, \
-    {CC"put"#Byte,         CC"("ADR#B")V",      FN_PTR(Unsafe_SetNative##Byte)}
+    {CC "get" #Byte,         CC "(" ADR ")" #B,       FN_PTR(Unsafe_GetNative##Byte)}, \
+    {CC "put" #Byte,         CC "(" ADR#B ")V",      FN_PTR(Unsafe_SetNative##Byte)}
 
 
 
 // These are the methods for 1.4.0
 static JNINativeMethod methods_140[] = {
-    {CC"getObject",        CC"("OBJ"I)"OBJ"",   FN_PTR(Unsafe_GetObject140)},
-    {CC"putObject",        CC"("OBJ"I"OBJ")V",  FN_PTR(Unsafe_SetObject140)},
+    {CC "getObject",        CC "(" OBJ "I)" OBJ "",   FN_PTR(Unsafe_GetObject140)},
+    {CC "putObject",        CC "(" OBJ "I" OBJ ")V",  FN_PTR(Unsafe_SetObject140)},
 
     DECLARE_GETSETOOP_140(Boolean, Z),
     DECLARE_GETSETOOP_140(Byte, B),
@@ -1433,33 +1433,33 @@
     DECLARE_GETSETNATIVE(Float, F),
     DECLARE_GETSETNATIVE(Double, D),
 
-    {CC"getAddress",         CC"("ADR")"ADR,             FN_PTR(Unsafe_GetNativeAddress)},
-    {CC"putAddress",         CC"("ADR""ADR")V",          FN_PTR(Unsafe_SetNativeAddress)},
+    {CC "getAddress",         CC "(" ADR ")" ADR,             FN_PTR(Unsafe_GetNativeAddress)},
+    {CC "putAddress",         CC "(" ADR "" ADR ")V",          FN_PTR(Unsafe_SetNativeAddress)},
 
-    {CC"allocateMemory",     CC"(J)"ADR,                 FN_PTR(Unsafe_AllocateMemory)},
-    {CC"reallocateMemory",   CC"("ADR"J)"ADR,            FN_PTR(Unsafe_ReallocateMemory)},
-    {CC"freeMemory",         CC"("ADR")V",               FN_PTR(Unsafe_FreeMemory)},
-
-    {CC"fieldOffset",        CC"("FLD")I",               FN_PTR(Unsafe_FieldOffset)},
-    {CC"staticFieldBase",    CC"("CLS")"OBJ,             FN_PTR(Unsafe_StaticFieldBaseFromClass)},
-    {CC"ensureClassInitialized",CC"("CLS")V",            FN_PTR(Unsafe_EnsureClassInitialized)},
-    {CC"arrayBaseOffset",    CC"("CLS")I",               FN_PTR(Unsafe_ArrayBaseOffset)},
-    {CC"arrayIndexScale",    CC"("CLS")I",               FN_PTR(Unsafe_ArrayIndexScale)},
-    {CC"addressSize",        CC"()I",                    FN_PTR(Unsafe_AddressSize)},
-    {CC"pageSize",           CC"()I",                    FN_PTR(Unsafe_PageSize)},
-
-    {CC"defineClass",        CC"("DC0_Args")"CLS,        FN_PTR(Unsafe_DefineClass0)},
-    {CC"defineClass",        CC"("DC_Args")"CLS,         FN_PTR(Unsafe_DefineClass)},
-    {CC"allocateInstance",   CC"("CLS")"OBJ,             FN_PTR(Unsafe_AllocateInstance)},
-    {CC"monitorEnter",       CC"("OBJ")V",               FN_PTR(Unsafe_MonitorEnter)},
-    {CC"monitorExit",        CC"("OBJ")V",               FN_PTR(Unsafe_MonitorExit)},
-    {CC"throwException",     CC"("THR")V",               FN_PTR(Unsafe_ThrowException)}
+    {CC "allocateMemory",     CC "(J)" ADR,                 FN_PTR(Unsafe_AllocateMemory)},
+    {CC "reallocateMemory",   CC "(" ADR "J)" ADR,            FN_PTR(Unsafe_ReallocateMemory)},
+    {CC "freeMemory",         CC "(" ADR ")V",               FN_PTR(Unsafe_FreeMemory)},
+
+    {CC "fieldOffset",        CC "(" FLD ")I",               FN_PTR(Unsafe_FieldOffset)},
+    {CC "staticFieldBase",    CC "(" CLS ")" OBJ,             FN_PTR(Unsafe_StaticFieldBaseFromClass)},
+    {CC "ensureClassInitialized",CC "(" CLS ")V",            FN_PTR(Unsafe_EnsureClassInitialized)},
+    {CC "arrayBaseOffset",    CC "(" CLS ")I",               FN_PTR(Unsafe_ArrayBaseOffset)},
+    {CC "arrayIndexScale",    CC "(" CLS ")I",               FN_PTR(Unsafe_ArrayIndexScale)},
+    {CC "addressSize",        CC "()I",                    FN_PTR(Unsafe_AddressSize)},
+    {CC "pageSize",           CC "()I",                    FN_PTR(Unsafe_PageSize)},
+
+    {CC "defineClass",        CC "(" DC0_Args ")" CLS,        FN_PTR(Unsafe_DefineClass0)},
+    {CC "defineClass",        CC "(" DC_Args ")" CLS,         FN_PTR(Unsafe_DefineClass)},
+    {CC "allocateInstance",   CC "(" CLS ")" OBJ,             FN_PTR(Unsafe_AllocateInstance)},
+    {CC "monitorEnter",       CC "(" OBJ ")V",               FN_PTR(Unsafe_MonitorEnter)},
+    {CC "monitorExit",        CC "(" OBJ ")V",               FN_PTR(Unsafe_MonitorExit)},
+    {CC "throwException",     CC "(" THR ")V",               FN_PTR(Unsafe_ThrowException)}
 };
 
 // These are the methods prior to the JSR 166 changes in 1.5.0
 static JNINativeMethod methods_141[] = {
-    {CC"getObject",        CC"("OBJ"J)"OBJ"",   FN_PTR(Unsafe_GetObject)},
-    {CC"putObject",        CC"("OBJ"J"OBJ")V",  FN_PTR(Unsafe_SetObject)},
+    {CC "getObject",        CC "(" OBJ "J)" OBJ "",   FN_PTR(Unsafe_GetObject)},
+    {CC "putObject",        CC "(" OBJ "J" OBJ ")V",  FN_PTR(Unsafe_SetObject)},
 
     DECLARE_GETSETOOP_141(Boolean, Z),
     DECLARE_GETSETOOP_141(Byte, B),
@@ -1478,37 +1478,37 @@
     DECLARE_GETSETNATIVE(Float, F),
     DECLARE_GETSETNATIVE(Double, D),
 
-    {CC"getAddress",         CC"("ADR")"ADR,             FN_PTR(Unsafe_GetNativeAddress)},
-    {CC"putAddress",         CC"("ADR""ADR")V",          FN_PTR(Unsafe_SetNativeAddress)},
+    {CC "getAddress",         CC "(" ADR ")" ADR,             FN_PTR(Unsafe_GetNativeAddress)},
+    {CC "putAddress",         CC "(" ADR "" ADR ")V",          FN_PTR(Unsafe_SetNativeAddress)},
 
-    {CC"allocateMemory",     CC"(J)"ADR,                 FN_PTR(Unsafe_AllocateMemory)},
-    {CC"reallocateMemory",   CC"("ADR"J)"ADR,            FN_PTR(Unsafe_ReallocateMemory)},
-    {CC"freeMemory",         CC"("ADR")V",               FN_PTR(Unsafe_FreeMemory)},
-
-    {CC"objectFieldOffset",  CC"("FLD")J",               FN_PTR(Unsafe_ObjectFieldOffset)},
-    {CC"staticFieldOffset",  CC"("FLD")J",               FN_PTR(Unsafe_StaticFieldOffset)},
-    {CC"staticFieldBase",    CC"("FLD")"OBJ,             FN_PTR(Unsafe_StaticFieldBaseFromField)},
-    {CC"ensureClassInitialized",CC"("CLS")V",            FN_PTR(Unsafe_EnsureClassInitialized)},
-    {CC"arrayBaseOffset",    CC"("CLS")I",               FN_PTR(Unsafe_ArrayBaseOffset)},
-    {CC"arrayIndexScale",    CC"("CLS")I",               FN_PTR(Unsafe_ArrayIndexScale)},
-    {CC"addressSize",        CC"()I",                    FN_PTR(Unsafe_AddressSize)},
-    {CC"pageSize",           CC"()I",                    FN_PTR(Unsafe_PageSize)},
-
-    {CC"defineClass",        CC"("DC0_Args")"CLS,        FN_PTR(Unsafe_DefineClass0)},
-    {CC"defineClass",        CC"("DC_Args")"CLS,         FN_PTR(Unsafe_DefineClass)},
-    {CC"allocateInstance",   CC"("CLS")"OBJ,             FN_PTR(Unsafe_AllocateInstance)},
-    {CC"monitorEnter",       CC"("OBJ")V",               FN_PTR(Unsafe_MonitorEnter)},
-    {CC"monitorExit",        CC"("OBJ")V",               FN_PTR(Unsafe_MonitorExit)},
-    {CC"throwException",     CC"("THR")V",               FN_PTR(Unsafe_ThrowException)}
+    {CC "allocateMemory",     CC "(J)" ADR,                 FN_PTR(Unsafe_AllocateMemory)},
+    {CC "reallocateMemory",   CC "(" ADR "J)" ADR,            FN_PTR(Unsafe_ReallocateMemory)},
+    {CC "freeMemory",         CC "(" ADR ")V",               FN_PTR(Unsafe_FreeMemory)},
+
+    {CC "objectFieldOffset",  CC "(" FLD ")J",               FN_PTR(Unsafe_ObjectFieldOffset)},
+    {CC "staticFieldOffset",  CC "(" FLD ")J",               FN_PTR(Unsafe_StaticFieldOffset)},
+    {CC "staticFieldBase",    CC "(" FLD ")" OBJ,             FN_PTR(Unsafe_StaticFieldBaseFromField)},
+    {CC "ensureClassInitialized",CC "(" CLS ")V",            FN_PTR(Unsafe_EnsureClassInitialized)},
+    {CC "arrayBaseOffset",    CC "(" CLS ")I",               FN_PTR(Unsafe_ArrayBaseOffset)},
+    {CC "arrayIndexScale",    CC "(" CLS ")I",               FN_PTR(Unsafe_ArrayIndexScale)},
+    {CC "addressSize",        CC "()I",                    FN_PTR(Unsafe_AddressSize)},
+    {CC "pageSize",           CC "()I",                    FN_PTR(Unsafe_PageSize)},
+
+    {CC "defineClass",        CC "(" DC0_Args ")" CLS,        FN_PTR(Unsafe_DefineClass0)},
+    {CC "defineClass",        CC "(" DC_Args ")" CLS,         FN_PTR(Unsafe_DefineClass)},
+    {CC "allocateInstance",   CC "(" CLS ")" OBJ,             FN_PTR(Unsafe_AllocateInstance)},
+    {CC "monitorEnter",       CC "(" OBJ ")V",               FN_PTR(Unsafe_MonitorEnter)},
+    {CC "monitorExit",        CC "(" OBJ ")V",               FN_PTR(Unsafe_MonitorExit)},
+    {CC "throwException",     CC "(" THR ")V",               FN_PTR(Unsafe_ThrowException)}
 
 };
 
 // These are the methods prior to the JSR 166 changes in 1.6.0
 static JNINativeMethod methods_15[] = {
-    {CC"getObject",        CC"("OBJ"J)"OBJ"",   FN_PTR(Unsafe_GetObject)},
-    {CC"putObject",        CC"("OBJ"J"OBJ")V",  FN_PTR(Unsafe_SetObject)},
-    {CC"getObjectVolatile",CC"("OBJ"J)"OBJ"",   FN_PTR(Unsafe_GetObjectVolatile)},
-    {CC"putObjectVolatile",CC"("OBJ"J"OBJ")V",  FN_PTR(Unsafe_SetObjectVolatile)},
+    {CC "getObject",        CC "(" OBJ "J)" OBJ "",   FN_PTR(Unsafe_GetObject)},
+    {CC "putObject",        CC "(" OBJ "J" OBJ ")V",  FN_PTR(Unsafe_SetObject)},
+    {CC "getObjectVolatile",CC "(" OBJ "J)" OBJ "",   FN_PTR(Unsafe_GetObjectVolatile)},
+    {CC "putObjectVolatile",CC "(" OBJ "J" OBJ ")V",  FN_PTR(Unsafe_SetObjectVolatile)},
 
 
     DECLARE_GETSETOOP(Boolean, Z),
@@ -1528,42 +1528,42 @@
     DECLARE_GETSETNATIVE(Float, F),
     DECLARE_GETSETNATIVE(Double, D),
 
-    {CC"getAddress",         CC"("ADR")"ADR,             FN_PTR(Unsafe_GetNativeAddress)},
-    {CC"putAddress",         CC"("ADR""ADR")V",          FN_PTR(Unsafe_SetNativeAddress)},
+    {CC "getAddress",         CC "(" ADR ")" ADR,             FN_PTR(Unsafe_GetNativeAddress)},
+    {CC "putAddress",         CC "(" ADR "" ADR ")V",          FN_PTR(Unsafe_SetNativeAddress)},
 
-    {CC"allocateMemory",     CC"(J)"ADR,                 FN_PTR(Unsafe_AllocateMemory)},
-    {CC"reallocateMemory",   CC"("ADR"J)"ADR,            FN_PTR(Unsafe_ReallocateMemory)},
-    {CC"freeMemory",         CC"("ADR")V",               FN_PTR(Unsafe_FreeMemory)},
-
-    {CC"objectFieldOffset",  CC"("FLD")J",               FN_PTR(Unsafe_ObjectFieldOffset)},
-    {CC"staticFieldOffset",  CC"("FLD")J",               FN_PTR(Unsafe_StaticFieldOffset)},
-    {CC"staticFieldBase",    CC"("FLD")"OBJ,             FN_PTR(Unsafe_StaticFieldBaseFromField)},
-    {CC"ensureClassInitialized",CC"("CLS")V",            FN_PTR(Unsafe_EnsureClassInitialized)},
-    {CC"arrayBaseOffset",    CC"("CLS")I",               FN_PTR(Unsafe_ArrayBaseOffset)},
-    {CC"arrayIndexScale",    CC"("CLS")I",               FN_PTR(Unsafe_ArrayIndexScale)},
-    {CC"addressSize",        CC"()I",                    FN_PTR(Unsafe_AddressSize)},
-    {CC"pageSize",           CC"()I",                    FN_PTR(Unsafe_PageSize)},
-
-    {CC"defineClass",        CC"("DC0_Args")"CLS,        FN_PTR(Unsafe_DefineClass0)},
-    {CC"defineClass",        CC"("DC_Args")"CLS,         FN_PTR(Unsafe_DefineClass)},
-    {CC"allocateInstance",   CC"("CLS")"OBJ,             FN_PTR(Unsafe_AllocateInstance)},
-    {CC"monitorEnter",       CC"("OBJ")V",               FN_PTR(Unsafe_MonitorEnter)},
-    {CC"monitorExit",        CC"("OBJ")V",               FN_PTR(Unsafe_MonitorExit)},
-    {CC"throwException",     CC"("THR")V",               FN_PTR(Unsafe_ThrowException)},
-    {CC"compareAndSwapObject", CC"("OBJ"J"OBJ""OBJ")Z",  FN_PTR(Unsafe_CompareAndSwapObject)},
-    {CC"compareAndSwapInt",  CC"("OBJ"J""I""I"")Z",      FN_PTR(Unsafe_CompareAndSwapInt)},
-    {CC"compareAndSwapLong", CC"("OBJ"J""J""J"")Z",      FN_PTR(Unsafe_CompareAndSwapLong)},
-    {CC"park",               CC"(ZJ)V",                  FN_PTR(Unsafe_Park)},
-    {CC"unpark",             CC"("OBJ")V",               FN_PTR(Unsafe_Unpark)}
+    {CC "allocateMemory",     CC "(J)" ADR,                 FN_PTR(Unsafe_AllocateMemory)},
+    {CC "reallocateMemory",   CC "(" ADR "J)" ADR,            FN_PTR(Unsafe_ReallocateMemory)},
+    {CC "freeMemory",         CC "(" ADR ")V",               FN_PTR(Unsafe_FreeMemory)},
+
+    {CC "objectFieldOffset",  CC "(" FLD ")J",               FN_PTR(Unsafe_ObjectFieldOffset)},
+    {CC "staticFieldOffset",  CC "(" FLD ")J",               FN_PTR(Unsafe_StaticFieldOffset)},
+    {CC "staticFieldBase",    CC "(" FLD ")" OBJ,             FN_PTR(Unsafe_StaticFieldBaseFromField)},
+    {CC "ensureClassInitialized",CC "(" CLS ")V",            FN_PTR(Unsafe_EnsureClassInitialized)},
+    {CC "arrayBaseOffset",    CC "(" CLS ")I",               FN_PTR(Unsafe_ArrayBaseOffset)},
+    {CC "arrayIndexScale",    CC "(" CLS ")I",               FN_PTR(Unsafe_ArrayIndexScale)},
+    {CC "addressSize",        CC "()I",                    FN_PTR(Unsafe_AddressSize)},
+    {CC "pageSize",           CC "()I",                    FN_PTR(Unsafe_PageSize)},
+
+    {CC "defineClass",        CC "(" DC0_Args ")" CLS,        FN_PTR(Unsafe_DefineClass0)},
+    {CC "defineClass",        CC "(" DC_Args ")" CLS,         FN_PTR(Unsafe_DefineClass)},
+    {CC "allocateInstance",   CC "(" CLS ")" OBJ,             FN_PTR(Unsafe_AllocateInstance)},
+    {CC "monitorEnter",       CC "(" OBJ ")V",               FN_PTR(Unsafe_MonitorEnter)},
+    {CC "monitorExit",        CC "(" OBJ ")V",               FN_PTR(Unsafe_MonitorExit)},
+    {CC "throwException",     CC "(" THR ")V",               FN_PTR(Unsafe_ThrowException)},
+    {CC "compareAndSwapObject", CC "(" OBJ "J" OBJ "" OBJ ")Z",  FN_PTR(Unsafe_CompareAndSwapObject)},
+    {CC "compareAndSwapInt",  CC "(" OBJ "J"  "I"  "I"  ")Z",      FN_PTR(Unsafe_CompareAndSwapInt)},
+    {CC "compareAndSwapLong", CC "(" OBJ "J"  "J"  "J"  ")Z",      FN_PTR(Unsafe_CompareAndSwapLong)},
+    {CC "park",               CC "(ZJ)V",                  FN_PTR(Unsafe_Park)},
+    {CC "unpark",             CC "(" OBJ ")V",               FN_PTR(Unsafe_Unpark)}
 
 };
 
 // These are the methods for 1.6.0 and 1.7.0
 static JNINativeMethod methods_16[] = {
-    {CC"getObject",        CC"("OBJ"J)"OBJ"",   FN_PTR(Unsafe_GetObject)},
-    {CC"putObject",        CC"("OBJ"J"OBJ")V",  FN_PTR(Unsafe_SetObject)},
-    {CC"getObjectVolatile",CC"("OBJ"J)"OBJ"",   FN_PTR(Unsafe_GetObjectVolatile)},
-    {CC"putObjectVolatile",CC"("OBJ"J"OBJ")V",  FN_PTR(Unsafe_SetObjectVolatile)},
+    {CC "getObject",        CC "(" OBJ "J)" OBJ "",   FN_PTR(Unsafe_GetObject)},
+    {CC "putObject",        CC "(" OBJ "J" OBJ ")V",  FN_PTR(Unsafe_SetObject)},
+    {CC "getObjectVolatile",CC "(" OBJ "J)" OBJ "",   FN_PTR(Unsafe_GetObjectVolatile)},
+    {CC "putObjectVolatile",CC "(" OBJ "J" OBJ ")V",  FN_PTR(Unsafe_SetObjectVolatile)},
 
     DECLARE_GETSETOOP(Boolean, Z),
     DECLARE_GETSETOOP(Byte, B),
@@ -1582,45 +1582,45 @@
     DECLARE_GETSETNATIVE(Float, F),
     DECLARE_GETSETNATIVE(Double, D),
 
-    {CC"getAddress",         CC"("ADR")"ADR,             FN_PTR(Unsafe_GetNativeAddress)},
-    {CC"putAddress",         CC"("ADR""ADR")V",          FN_PTR(Unsafe_SetNativeAddress)},
+    {CC "getAddress",         CC "(" ADR ")" ADR,             FN_PTR(Unsafe_GetNativeAddress)},
+    {CC "putAddress",         CC "(" ADR "" ADR ")V",          FN_PTR(Unsafe_SetNativeAddress)},
 
-    {CC"allocateMemory",     CC"(J)"ADR,                 FN_PTR(Unsafe_AllocateMemory)},
-    {CC"reallocateMemory",   CC"("ADR"J)"ADR,            FN_PTR(Unsafe_ReallocateMemory)},
-    {CC"freeMemory",         CC"("ADR")V",               FN_PTR(Unsafe_FreeMemory)},
-
-    {CC"objectFieldOffset",  CC"("FLD")J",               FN_PTR(Unsafe_ObjectFieldOffset)},
-    {CC"staticFieldOffset",  CC"("FLD")J",               FN_PTR(Unsafe_StaticFieldOffset)},
-    {CC"staticFieldBase",    CC"("FLD")"OBJ,             FN_PTR(Unsafe_StaticFieldBaseFromField)},
-    {CC"ensureClassInitialized",CC"("CLS")V",            FN_PTR(Unsafe_EnsureClassInitialized)},
-    {CC"arrayBaseOffset",    CC"("CLS")I",               FN_PTR(Unsafe_ArrayBaseOffset)},
-    {CC"arrayIndexScale",    CC"("CLS")I",               FN_PTR(Unsafe_ArrayIndexScale)},
-    {CC"addressSize",        CC"()I",                    FN_PTR(Unsafe_AddressSize)},
-    {CC"pageSize",           CC"()I",                    FN_PTR(Unsafe_PageSize)},
-
-    {CC"defineClass",        CC"("DC0_Args")"CLS,        FN_PTR(Unsafe_DefineClass0)},
-    {CC"defineClass",        CC"("DC_Args")"CLS,         FN_PTR(Unsafe_DefineClass)},
-    {CC"allocateInstance",   CC"("CLS")"OBJ,             FN_PTR(Unsafe_AllocateInstance)},
-    {CC"monitorEnter",       CC"("OBJ")V",               FN_PTR(Unsafe_MonitorEnter)},
-    {CC"monitorExit",        CC"("OBJ")V",               FN_PTR(Unsafe_MonitorExit)},
-    {CC"tryMonitorEnter",    CC"("OBJ")Z",               FN_PTR(Unsafe_TryMonitorEnter)},
-    {CC"throwException",     CC"("THR")V",               FN_PTR(Unsafe_ThrowException)},
-    {CC"compareAndSwapObject", CC"("OBJ"J"OBJ""OBJ")Z",  FN_PTR(Unsafe_CompareAndSwapObject)},
-    {CC"compareAndSwapInt",  CC"("OBJ"J""I""I"")Z",      FN_PTR(Unsafe_CompareAndSwapInt)},
-    {CC"compareAndSwapLong", CC"("OBJ"J""J""J"")Z",      FN_PTR(Unsafe_CompareAndSwapLong)},
-    {CC"putOrderedObject",   CC"("OBJ"J"OBJ")V",         FN_PTR(Unsafe_SetOrderedObject)},
-    {CC"putOrderedInt",      CC"("OBJ"JI)V",             FN_PTR(Unsafe_SetOrderedInt)},
-    {CC"putOrderedLong",     CC"("OBJ"JJ)V",             FN_PTR(Unsafe_SetOrderedLong)},
-    {CC"park",               CC"(ZJ)V",                  FN_PTR(Unsafe_Park)},
-    {CC"unpark",             CC"("OBJ")V",               FN_PTR(Unsafe_Unpark)}
+    {CC "allocateMemory",     CC "(J)" ADR,                 FN_PTR(Unsafe_AllocateMemory)},
+    {CC "reallocateMemory",   CC "(" ADR "J)" ADR,            FN_PTR(Unsafe_ReallocateMemory)},
+    {CC "freeMemory",         CC "(" ADR ")V",               FN_PTR(Unsafe_FreeMemory)},
+
+    {CC "objectFieldOffset",  CC "(" FLD ")J",               FN_PTR(Unsafe_ObjectFieldOffset)},
+    {CC "staticFieldOffset",  CC "(" FLD ")J",               FN_PTR(Unsafe_StaticFieldOffset)},
+    {CC "staticFieldBase",    CC "(" FLD ")" OBJ,             FN_PTR(Unsafe_StaticFieldBaseFromField)},
+    {CC "ensureClassInitialized",CC "(" CLS ")V",            FN_PTR(Unsafe_EnsureClassInitialized)},
+    {CC "arrayBaseOffset",    CC "(" CLS ")I",               FN_PTR(Unsafe_ArrayBaseOffset)},
+    {CC "arrayIndexScale",    CC "(" CLS ")I",               FN_PTR(Unsafe_ArrayIndexScale)},
+    {CC "addressSize",        CC "()I",                    FN_PTR(Unsafe_AddressSize)},
+    {CC "pageSize",           CC "()I",                    FN_PTR(Unsafe_PageSize)},
+
+    {CC "defineClass",        CC "(" DC0_Args ")" CLS,        FN_PTR(Unsafe_DefineClass0)},
+    {CC "defineClass",        CC "(" DC_Args ")" CLS,         FN_PTR(Unsafe_DefineClass)},
+    {CC "allocateInstance",   CC "(" CLS ")" OBJ,             FN_PTR(Unsafe_AllocateInstance)},
+    {CC "monitorEnter",       CC "(" OBJ ")V",               FN_PTR(Unsafe_MonitorEnter)},
+    {CC "monitorExit",        CC "(" OBJ ")V",               FN_PTR(Unsafe_MonitorExit)},
+    {CC "tryMonitorEnter",    CC "(" OBJ ")Z",               FN_PTR(Unsafe_TryMonitorEnter)},
+    {CC "throwException",     CC "(" THR ")V",               FN_PTR(Unsafe_ThrowException)},
+    {CC "compareAndSwapObject", CC "(" OBJ "J" OBJ "" OBJ ")Z",  FN_PTR(Unsafe_CompareAndSwapObject)},
+    {CC "compareAndSwapInt",  CC "(" OBJ "J"  "I"  "I"  ")Z",      FN_PTR(Unsafe_CompareAndSwapInt)},
+    {CC "compareAndSwapLong", CC "(" OBJ "J"  "J"  "J"  ")Z",      FN_PTR(Unsafe_CompareAndSwapLong)},
+    {CC "putOrderedObject",   CC "(" OBJ "J" OBJ ")V",         FN_PTR(Unsafe_SetOrderedObject)},
+    {CC "putOrderedInt",      CC "(" OBJ "JI)V",             FN_PTR(Unsafe_SetOrderedInt)},
+    {CC "putOrderedLong",     CC "(" OBJ "JJ)V",             FN_PTR(Unsafe_SetOrderedLong)},
+    {CC "park",               CC "(ZJ)V",                  FN_PTR(Unsafe_Park)},
+    {CC "unpark",             CC "(" OBJ ")V",               FN_PTR(Unsafe_Unpark)}
 };
 
 // These are the methods for 1.8.0
 static JNINativeMethod methods_18[] = {
-    {CC"getObject",        CC"("OBJ"J)"OBJ"",   FN_PTR(Unsafe_GetObject)},
-    {CC"putObject",        CC"("OBJ"J"OBJ")V",  FN_PTR(Unsafe_SetObject)},
-    {CC"getObjectVolatile",CC"("OBJ"J)"OBJ"",   FN_PTR(Unsafe_GetObjectVolatile)},
-    {CC"putObjectVolatile",CC"("OBJ"J"OBJ")V",  FN_PTR(Unsafe_SetObjectVolatile)},
+    {CC "getObject",        CC "(" OBJ "J)" OBJ "",   FN_PTR(Unsafe_GetObject)},
+    {CC "putObject",        CC "(" OBJ "J" OBJ ")V",  FN_PTR(Unsafe_SetObject)},
+    {CC "getObjectVolatile",CC "(" OBJ "J)" OBJ "",   FN_PTR(Unsafe_GetObjectVolatile)},
+    {CC "putObjectVolatile",CC "(" OBJ "J" OBJ ")V",  FN_PTR(Unsafe_SetObjectVolatile)},
 
     DECLARE_GETSETOOP(Boolean, Z),
     DECLARE_GETSETOOP(Byte, B),
@@ -1639,71 +1639,71 @@
     DECLARE_GETSETNATIVE(Float, F),
     DECLARE_GETSETNATIVE(Double, D),
 
-    {CC"getAddress",         CC"("ADR")"ADR,             FN_PTR(Unsafe_GetNativeAddress)},
-    {CC"putAddress",         CC"("ADR""ADR")V",          FN_PTR(Unsafe_SetNativeAddress)},
+    {CC "getAddress",         CC "(" ADR ")" ADR,             FN_PTR(Unsafe_GetNativeAddress)},
+    {CC "putAddress",         CC "(" ADR "" ADR ")V",          FN_PTR(Unsafe_SetNativeAddress)},
 
-    {CC"allocateMemory",     CC"(J)"ADR,                 FN_PTR(Unsafe_AllocateMemory)},
-    {CC"reallocateMemory",   CC"("ADR"J)"ADR,            FN_PTR(Unsafe_ReallocateMemory)},
-    {CC"freeMemory",         CC"("ADR")V",               FN_PTR(Unsafe_FreeMemory)},
-
-    {CC"objectFieldOffset",  CC"("FLD")J",               FN_PTR(Unsafe_ObjectFieldOffset)},
-    {CC"staticFieldOffset",  CC"("FLD")J",               FN_PTR(Unsafe_StaticFieldOffset)},
-    {CC"staticFieldBase",    CC"("FLD")"OBJ,             FN_PTR(Unsafe_StaticFieldBaseFromField)},
-    {CC"ensureClassInitialized",CC"("CLS")V",            FN_PTR(Unsafe_EnsureClassInitialized)},
-    {CC"arrayBaseOffset",    CC"("CLS")I",               FN_PTR(Unsafe_ArrayBaseOffset)},
-    {CC"arrayIndexScale",    CC"("CLS")I",               FN_PTR(Unsafe_ArrayIndexScale)},
-    {CC"addressSize",        CC"()I",                    FN_PTR(Unsafe_AddressSize)},
-    {CC"pageSize",           CC"()I",                    FN_PTR(Unsafe_PageSize)},
-
-    {CC"defineClass",        CC"("DC_Args")"CLS,         FN_PTR(Unsafe_DefineClass)},
-    {CC"allocateInstance",   CC"("CLS")"OBJ,             FN_PTR(Unsafe_AllocateInstance)},
-    {CC"monitorEnter",       CC"("OBJ")V",               FN_PTR(Unsafe_MonitorEnter)},
-    {CC"monitorExit",        CC"("OBJ")V",               FN_PTR(Unsafe_MonitorExit)},
-    {CC"tryMonitorEnter",    CC"("OBJ")Z",               FN_PTR(Unsafe_TryMonitorEnter)},
-    {CC"throwException",     CC"("THR")V",               FN_PTR(Unsafe_ThrowException)},
-    {CC"compareAndSwapObject", CC"("OBJ"J"OBJ""OBJ")Z",  FN_PTR(Unsafe_CompareAndSwapObject)},
-    {CC"compareAndSwapInt",  CC"("OBJ"J""I""I"")Z",      FN_PTR(Unsafe_CompareAndSwapInt)},
-    {CC"compareAndSwapLong", CC"("OBJ"J""J""J"")Z",      FN_PTR(Unsafe_CompareAndSwapLong)},
-    {CC"putOrderedObject",   CC"("OBJ"J"OBJ")V",         FN_PTR(Unsafe_SetOrderedObject)},
-    {CC"putOrderedInt",      CC"("OBJ"JI)V",             FN_PTR(Unsafe_SetOrderedInt)},
-    {CC"putOrderedLong",     CC"("OBJ"JJ)V",             FN_PTR(Unsafe_SetOrderedLong)},
-    {CC"park",               CC"(ZJ)V",                  FN_PTR(Unsafe_Park)},
-    {CC"unpark",             CC"("OBJ")V",               FN_PTR(Unsafe_Unpark)}
+    {CC "allocateMemory",     CC "(J)" ADR,                 FN_PTR(Unsafe_AllocateMemory)},
+    {CC "reallocateMemory",   CC "(" ADR "J)" ADR,            FN_PTR(Unsafe_ReallocateMemory)},
+    {CC "freeMemory",         CC "(" ADR ")V",               FN_PTR(Unsafe_FreeMemory)},
+
+    {CC "objectFieldOffset",  CC "(" FLD ")J",               FN_PTR(Unsafe_ObjectFieldOffset)},
+    {CC "staticFieldOffset",  CC "(" FLD ")J",               FN_PTR(Unsafe_StaticFieldOffset)},
+    {CC "staticFieldBase",    CC "(" FLD ")" OBJ,             FN_PTR(Unsafe_StaticFieldBaseFromField)},
+    {CC "ensureClassInitialized",CC "(" CLS ")V",            FN_PTR(Unsafe_EnsureClassInitialized)},
+    {CC "arrayBaseOffset",    CC "(" CLS ")I",               FN_PTR(Unsafe_ArrayBaseOffset)},
+    {CC "arrayIndexScale",    CC "(" CLS ")I",               FN_PTR(Unsafe_ArrayIndexScale)},
+    {CC "addressSize",        CC "()I",                    FN_PTR(Unsafe_AddressSize)},
+    {CC "pageSize",           CC "()I",                    FN_PTR(Unsafe_PageSize)},
+
+    {CC "defineClass",        CC "(" DC_Args ")" CLS,         FN_PTR(Unsafe_DefineClass)},
+    {CC "allocateInstance",   CC "(" CLS ")" OBJ,             FN_PTR(Unsafe_AllocateInstance)},
+    {CC "monitorEnter",       CC "(" OBJ ")V",               FN_PTR(Unsafe_MonitorEnter)},
+    {CC "monitorExit",        CC "(" OBJ ")V",               FN_PTR(Unsafe_MonitorExit)},
+    {CC "tryMonitorEnter",    CC "(" OBJ ")Z",               FN_PTR(Unsafe_TryMonitorEnter)},
+    {CC "throwException",     CC "(" THR ")V",               FN_PTR(Unsafe_ThrowException)},
+    {CC "compareAndSwapObject", CC "(" OBJ "J" OBJ "" OBJ ")Z",  FN_PTR(Unsafe_CompareAndSwapObject)},
+    {CC "compareAndSwapInt",  CC "(" OBJ "J"  "I"  "I"  ")Z",      FN_PTR(Unsafe_CompareAndSwapInt)},
+    {CC "compareAndSwapLong", CC "(" OBJ "J"  "J"  "J"  ")Z",      FN_PTR(Unsafe_CompareAndSwapLong)},
+    {CC "putOrderedObject",   CC "(" OBJ "J" OBJ ")V",         FN_PTR(Unsafe_SetOrderedObject)},
+    {CC "putOrderedInt",      CC "(" OBJ "JI)V",             FN_PTR(Unsafe_SetOrderedInt)},
+    {CC "putOrderedLong",     CC "(" OBJ "JJ)V",             FN_PTR(Unsafe_SetOrderedLong)},
+    {CC "park",               CC "(ZJ)V",                  FN_PTR(Unsafe_Park)},
+    {CC "unpark",             CC "(" OBJ ")V",               FN_PTR(Unsafe_Unpark)}
 };
 
 JNINativeMethod loadavg_method[] = {
-    {CC"getLoadAverage",     CC"([DI)I",                 FN_PTR(Unsafe_Loadavg)}
+    {CC "getLoadAverage",     CC "([DI)I",                 FN_PTR(Unsafe_Loadavg)}
 };
 
 JNINativeMethod prefetch_methods[] = {
-    {CC"prefetchRead",       CC"("OBJ"J)V",              FN_PTR(Unsafe_PrefetchRead)},
-    {CC"prefetchWrite",      CC"("OBJ"J)V",              FN_PTR(Unsafe_PrefetchWrite)},
-    {CC"prefetchReadStatic", CC"("OBJ"J)V",              FN_PTR(Unsafe_PrefetchRead)},
-    {CC"prefetchWriteStatic",CC"("OBJ"J)V",              FN_PTR(Unsafe_PrefetchWrite)}
+    {CC "prefetchRead",       CC "(" OBJ "J)V",              FN_PTR(Unsafe_PrefetchRead)},
+    {CC "prefetchWrite",      CC "(" OBJ "J)V",              FN_PTR(Unsafe_PrefetchWrite)},
+    {CC "prefetchReadStatic", CC "(" OBJ "J)V",              FN_PTR(Unsafe_PrefetchRead)},
+    {CC "prefetchWriteStatic",CC "(" OBJ "J)V",              FN_PTR(Unsafe_PrefetchWrite)}
 };
 
 JNINativeMethod memcopy_methods_17[] = {
-    {CC"copyMemory",         CC"("OBJ"J"OBJ"JJ)V",       FN_PTR(Unsafe_CopyMemory2)},
-    {CC"setMemory",          CC"("OBJ"JJB)V",            FN_PTR(Unsafe_SetMemory2)}
+    {CC "copyMemory",         CC "(" OBJ "J" OBJ "JJ)V",       FN_PTR(Unsafe_CopyMemory2)},
+    {CC "setMemory",          CC "(" OBJ "JJB)V",            FN_PTR(Unsafe_SetMemory2)}
 };
 
 JNINativeMethod memcopy_methods_15[] = {
-    {CC"setMemory",          CC"("ADR"JB)V",             FN_PTR(Unsafe_SetMemory)},
-    {CC"copyMemory",         CC"("ADR ADR"J)V",          FN_PTR(Unsafe_CopyMemory)}
+    {CC "setMemory",          CC "(" ADR "JB)V",             FN_PTR(Unsafe_SetMemory)},
+    {CC "copyMemory",         CC "(" ADR ADR "J)V",          FN_PTR(Unsafe_CopyMemory)}
 };
 
 JNINativeMethod anonk_methods[] = {
-    {CC"defineAnonymousClass", CC"("DAC_Args")"CLS,      FN_PTR(Unsafe_DefineAnonymousClass)},
+    {CC "defineAnonymousClass", CC "(" DAC_Args ")" CLS,      FN_PTR(Unsafe_DefineAnonymousClass)},
 };
 
 JNINativeMethod lform_methods[] = {
-    {CC"shouldBeInitialized",CC"("CLS")Z",               FN_PTR(Unsafe_ShouldBeInitialized)},
+    {CC "shouldBeInitialized",CC "(" CLS ")Z",               FN_PTR(Unsafe_ShouldBeInitialized)},
 };
 
 JNINativeMethod fence_methods[] = {
-    {CC"loadFence",          CC"()V",                    FN_PTR(Unsafe_LoadFence)},
-    {CC"storeFence",         CC"()V",                    FN_PTR(Unsafe_StoreFence)},
-    {CC"fullFence",          CC"()V",                    FN_PTR(Unsafe_FullFence)},
+    {CC "loadFence",          CC "()V",                    FN_PTR(Unsafe_LoadFence)},
+    {CC "storeFence",         CC "()V",                    FN_PTR(Unsafe_StoreFence)},
+    {CC "fullFence",          CC "()V",                    FN_PTR(Unsafe_FullFence)},
 };
 
 #undef CC
diff -ruN -x '.*' old/hotspot/src/share/vm/prims/whitebox.cpp new/hotspot/src/share/vm/prims/whitebox.cpp
--- old/hotspot/src/share/vm/prims/whitebox.cpp	2016-08-16 10:50:17.033051938 -0600
+++ new/hotspot/src/share/vm/prims/whitebox.cpp	2016-08-16 14:39:08.178689723 -0600
@@ -1013,114 +1013,114 @@
 #define CC (char*)
 
 static JNINativeMethod methods[] = {
-  {CC"getObjectAddress",   CC"(Ljava/lang/Object;)J", (void*)&WB_GetObjectAddress  },
-  {CC"getObjectSize",      CC"(Ljava/lang/Object;)J", (void*)&WB_GetObjectSize     },
-  {CC"isObjectInOldGen",   CC"(Ljava/lang/Object;)Z", (void*)&WB_isObjectInOldGen  },
-  {CC"getHeapOopSize",     CC"()I",                   (void*)&WB_GetHeapOopSize    },
-  {CC"getVMPageSize",      CC"()I",                   (void*)&WB_GetVMPageSize     },
-  {CC"getVMLargePageSize", CC"()J",                   (void*)&WB_GetVMLargePageSize},
-  {CC"isClassAlive0",      CC"(Ljava/lang/String;)Z", (void*)&WB_IsClassAlive      },
-  {CC"classKnownToNotExist",
-                           CC"(Ljava/lang/ClassLoader;Ljava/lang/String;)Z",(void*)&WB_ClassKnownToNotExist},
-  {CC"getLookupCacheURLs", CC"(Ljava/lang/ClassLoader;)[Ljava/net/URL;",    (void*)&WB_GetLookupCacheURLs},
-  {CC"getLookupCacheMatches", CC"(Ljava/lang/ClassLoader;Ljava/lang/String;)[I",
+  {CC "getObjectAddress",   CC "(Ljava/lang/Object;)J", (void*)&WB_GetObjectAddress  },
+  {CC "getObjectSize",      CC "(Ljava/lang/Object;)J", (void*)&WB_GetObjectSize     },
+  {CC "isObjectInOldGen",   CC "(Ljava/lang/Object;)Z", (void*)&WB_isObjectInOldGen  },
+  {CC "getHeapOopSize",     CC "()I",                   (void*)&WB_GetHeapOopSize    },
+  {CC "getVMPageSize",      CC "()I",                   (void*)&WB_GetVMPageSize     },
+  {CC "getVMLargePageSize", CC "()J",                   (void*)&WB_GetVMLargePageSize},
+  {CC "isClassAlive0",      CC "(Ljava/lang/String;)Z", (void*)&WB_IsClassAlive      },
+  {CC "classKnownToNotExist",
+                           CC "(Ljava/lang/ClassLoader;Ljava/lang/String;)Z",(void*)&WB_ClassKnownToNotExist},
+  {CC "getLookupCacheURLs", CC "(Ljava/lang/ClassLoader;)[Ljava/net/URL;",    (void*)&WB_GetLookupCacheURLs},
+  {CC "getLookupCacheMatches", CC "(Ljava/lang/ClassLoader;Ljava/lang/String;)[I",
                                                       (void*)&WB_GetLookupCacheMatches},
-  {CC"parseCommandLine",
-      CC"(Ljava/lang/String;[Lsun/hotspot/parser/DiagnosticCommand;)[Ljava/lang/Object;",
+  {CC "parseCommandLine",
+      CC "(Ljava/lang/String;[Lsun/hotspot/parser/DiagnosticCommand;)[Ljava/lang/Object;",
       (void*) &WB_ParseCommandLine
   },
-  {CC"addToBootstrapClassLoaderSearch", CC"(Ljava/lang/String;)V",
+  {CC "addToBootstrapClassLoaderSearch", CC "(Ljava/lang/String;)V",
                                                       (void*)&WB_AddToBootstrapClassLoaderSearch},
-  {CC"addToSystemClassLoaderSearch",    CC"(Ljava/lang/String;)V",
+  {CC "addToSystemClassLoaderSearch",    CC "(Ljava/lang/String;)V",
                                                       (void*)&WB_AddToSystemClassLoaderSearch},
-  {CC"getCompressedOopsMaxHeapSize", CC"()J",
+  {CC "getCompressedOopsMaxHeapSize", CC "()J",
       (void*)&WB_GetCompressedOopsMaxHeapSize},
-  {CC"printHeapSizes",     CC"()V",                   (void*)&WB_PrintHeapSizes    },
-  {CC"runMemoryUnitTests", CC"()V",                   (void*)&WB_RunMemoryUnitTests},
-  {CC"readFromNoaccessArea",CC"()V",                  (void*)&WB_ReadFromNoaccessArea},
-  {CC"stressVirtualSpaceResize",CC"(JJJ)I",           (void*)&WB_StressVirtualSpaceResize},
-  {CC"isSharedClass", CC"(Ljava/lang/Class;)Z",       (void*)&WB_IsSharedClass },
+  {CC "printHeapSizes",     CC "()V",                   (void*)&WB_PrintHeapSizes    },
+  {CC "runMemoryUnitTests", CC "()V",                   (void*)&WB_RunMemoryUnitTests},
+  {CC "readFromNoaccessArea",CC "()V",                  (void*)&WB_ReadFromNoaccessArea},
+  {CC "stressVirtualSpaceResize",CC "(JJJ)I",           (void*)&WB_StressVirtualSpaceResize},
+  {CC "isSharedClass", CC "(Ljava/lang/Class;)Z",       (void*)&WB_IsSharedClass },
 #if INCLUDE_ALL_GCS
-  {CC"g1InConcurrentMark", CC"()Z",                   (void*)&WB_G1InConcurrentMark},
-  {CC"g1IsHumongous",      CC"(Ljava/lang/Object;)Z", (void*)&WB_G1IsHumongous     },
-  {CC"g1NumMaxRegions",    CC"()J",                   (void*)&WB_G1NumMaxRegions  },
-  {CC"g1NumFreeRegions",   CC"()J",                   (void*)&WB_G1NumFreeRegions  },
-  {CC"g1RegionSize",       CC"()I",                   (void*)&WB_G1RegionSize      },
-  {CC"g1StartConcMarkCycle",       CC"()Z",           (void*)&WB_G1StartMarkCycle  },
-  {CC"g1AuxiliaryMemoryUsage", CC"()Ljava/lang/management/MemoryUsage;",
+  {CC "g1InConcurrentMark", CC "()Z",                   (void*)&WB_G1InConcurrentMark},
+  {CC "g1IsHumongous",      CC "(Ljava/lang/Object;)Z", (void*)&WB_G1IsHumongous     },
+  {CC "g1NumMaxRegions",    CC "()J",                   (void*)&WB_G1NumMaxRegions  },
+  {CC "g1NumFreeRegions",   CC "()J",                   (void*)&WB_G1NumFreeRegions  },
+  {CC "g1RegionSize",       CC "()I",                   (void*)&WB_G1RegionSize      },
+  {CC "g1StartConcMarkCycle",       CC "()Z",           (void*)&WB_G1StartMarkCycle  },
+  {CC "g1AuxiliaryMemoryUsage", CC "()Ljava/lang/management/MemoryUsage;",
                                                       (void*)&WB_G1AuxiliaryMemoryUsage  },
 #endif // INCLUDE_ALL_GCS
 #if INCLUDE_NMT
-  {CC"NMTMalloc",           CC"(J)J",                 (void*)&WB_NMTMalloc          },
-  {CC"NMTMallocWithPseudoStack", CC"(JI)J",           (void*)&WB_NMTMallocWithPseudoStack},
-  {CC"NMTFree",             CC"(J)V",                 (void*)&WB_NMTFree            },
-  {CC"NMTReserveMemory",    CC"(J)J",                 (void*)&WB_NMTReserveMemory   },
-  {CC"NMTCommitMemory",     CC"(JJ)V",                (void*)&WB_NMTCommitMemory    },
-  {CC"NMTUncommitMemory",   CC"(JJ)V",                (void*)&WB_NMTUncommitMemory  },
-  {CC"NMTReleaseMemory",    CC"(JJ)V",                (void*)&WB_NMTReleaseMemory   },
-  {CC"NMTIsDetailSupported",CC"()Z",                  (void*)&WB_NMTIsDetailSupported},
-  {CC"NMTChangeTrackingLevel", CC"()Z",               (void*)&WB_NMTChangeTrackingLevel},
-  {CC"NMTGetHashSize",      CC"()I",                  (void*)&WB_NMTGetHashSize     },
+  {CC "NMTMalloc",           CC "(J)J",                 (void*)&WB_NMTMalloc          },
+  {CC "NMTMallocWithPseudoStack", CC "(JI)J",           (void*)&WB_NMTMallocWithPseudoStack},
+  {CC "NMTFree",             CC "(J)V",                 (void*)&WB_NMTFree            },
+  {CC "NMTReserveMemory",    CC "(J)J",                 (void*)&WB_NMTReserveMemory   },
+  {CC "NMTCommitMemory",     CC "(JJ)V",                (void*)&WB_NMTCommitMemory    },
+  {CC "NMTUncommitMemory",   CC "(JJ)V",                (void*)&WB_NMTUncommitMemory  },
+  {CC "NMTReleaseMemory",    CC "(JJ)V",                (void*)&WB_NMTReleaseMemory   },
+  {CC "NMTIsDetailSupported",CC "()Z",                  (void*)&WB_NMTIsDetailSupported},
+  {CC "NMTChangeTrackingLevel", CC "()Z",               (void*)&WB_NMTChangeTrackingLevel},
+  {CC "NMTGetHashSize",      CC "()I",                  (void*)&WB_NMTGetHashSize     },
 #endif // INCLUDE_NMT
-  {CC"deoptimizeAll",      CC"()V",                   (void*)&WB_DeoptimizeAll     },
-  {CC"deoptimizeMethod",   CC"(Ljava/lang/reflect/Executable;Z)I",
+  {CC "deoptimizeAll",      CC "()V",                   (void*)&WB_DeoptimizeAll     },
+  {CC "deoptimizeMethod",   CC "(Ljava/lang/reflect/Executable;Z)I",
                                                       (void*)&WB_DeoptimizeMethod  },
-  {CC"isMethodCompiled",   CC"(Ljava/lang/reflect/Executable;Z)Z",
+  {CC "isMethodCompiled",   CC "(Ljava/lang/reflect/Executable;Z)Z",
                                                       (void*)&WB_IsMethodCompiled  },
-  {CC"isMethodCompilable", CC"(Ljava/lang/reflect/Executable;IZ)Z",
+  {CC "isMethodCompilable", CC "(Ljava/lang/reflect/Executable;IZ)Z",
                                                       (void*)&WB_IsMethodCompilable},
-  {CC"isMethodQueuedForCompilation",
-      CC"(Ljava/lang/reflect/Executable;)Z",          (void*)&WB_IsMethodQueuedForCompilation},
-  {CC"makeMethodNotCompilable",
-      CC"(Ljava/lang/reflect/Executable;IZ)V",        (void*)&WB_MakeMethodNotCompilable},
-  {CC"testSetDontInlineMethod",
-      CC"(Ljava/lang/reflect/Executable;Z)Z",         (void*)&WB_TestSetDontInlineMethod},
-  {CC"getMethodCompilationLevel",
-      CC"(Ljava/lang/reflect/Executable;Z)I",         (void*)&WB_GetMethodCompilationLevel},
-  {CC"getMethodEntryBci",
-      CC"(Ljava/lang/reflect/Executable;)I",          (void*)&WB_GetMethodEntryBci},
-  {CC"getCompileQueueSize",
-      CC"(I)I",                                       (void*)&WB_GetCompileQueueSize},
-  {CC"testSetForceInlineMethod",
-      CC"(Ljava/lang/reflect/Executable;Z)Z",         (void*)&WB_TestSetForceInlineMethod},
-  {CC"enqueueMethodForCompilation",
-      CC"(Ljava/lang/reflect/Executable;II)Z",        (void*)&WB_EnqueueMethodForCompilation},
-  {CC"clearMethodState",
-      CC"(Ljava/lang/reflect/Executable;)V",          (void*)&WB_ClearMethodState},
-  {CC"setBooleanVMFlag",   CC"(Ljava/lang/String;Z)V",(void*)&WB_SetBooleanVMFlag},
-  {CC"setIntxVMFlag",      CC"(Ljava/lang/String;J)V",(void*)&WB_SetIntxVMFlag},
-  {CC"setUintxVMFlag",     CC"(Ljava/lang/String;J)V",(void*)&WB_SetUintxVMFlag},
-  {CC"setUint64VMFlag",    CC"(Ljava/lang/String;J)V",(void*)&WB_SetUint64VMFlag},
-  {CC"setDoubleVMFlag",    CC"(Ljava/lang/String;D)V",(void*)&WB_SetDoubleVMFlag},
-  {CC"setStringVMFlag",    CC"(Ljava/lang/String;Ljava/lang/String;)V",
+  {CC "isMethodQueuedForCompilation",
+      CC "(Ljava/lang/reflect/Executable;)Z",          (void*)&WB_IsMethodQueuedForCompilation},
+  {CC "makeMethodNotCompilable",
+      CC "(Ljava/lang/reflect/Executable;IZ)V",        (void*)&WB_MakeMethodNotCompilable},
+  {CC "testSetDontInlineMethod",
+      CC "(Ljava/lang/reflect/Executable;Z)Z",         (void*)&WB_TestSetDontInlineMethod},
+  {CC "getMethodCompilationLevel",
+      CC "(Ljava/lang/reflect/Executable;Z)I",         (void*)&WB_GetMethodCompilationLevel},
+  {CC "getMethodEntryBci",
+      CC "(Ljava/lang/reflect/Executable;)I",          (void*)&WB_GetMethodEntryBci},
+  {CC "getCompileQueueSize",
+      CC "(I)I",                                       (void*)&WB_GetCompileQueueSize},
+  {CC "testSetForceInlineMethod",
+      CC "(Ljava/lang/reflect/Executable;Z)Z",         (void*)&WB_TestSetForceInlineMethod},
+  {CC "enqueueMethodForCompilation",
+      CC "(Ljava/lang/reflect/Executable;II)Z",        (void*)&WB_EnqueueMethodForCompilation},
+  {CC "clearMethodState",
+      CC "(Ljava/lang/reflect/Executable;)V",          (void*)&WB_ClearMethodState},
+  {CC "setBooleanVMFlag",   CC "(Ljava/lang/String;Z)V",(void*)&WB_SetBooleanVMFlag},
+  {CC "setIntxVMFlag",      CC "(Ljava/lang/String;J)V",(void*)&WB_SetIntxVMFlag},
+  {CC "setUintxVMFlag",     CC "(Ljava/lang/String;J)V",(void*)&WB_SetUintxVMFlag},
+  {CC "setUint64VMFlag",    CC "(Ljava/lang/String;J)V",(void*)&WB_SetUint64VMFlag},
+  {CC "setDoubleVMFlag",    CC "(Ljava/lang/String;D)V",(void*)&WB_SetDoubleVMFlag},
+  {CC "setStringVMFlag",    CC "(Ljava/lang/String;Ljava/lang/String;)V",
                                                       (void*)&WB_SetStringVMFlag},
-  {CC"getBooleanVMFlag",   CC"(Ljava/lang/String;)Ljava/lang/Boolean;",
+  {CC "getBooleanVMFlag",   CC "(Ljava/lang/String;)Ljava/lang/Boolean;",
                                                       (void*)&WB_GetBooleanVMFlag},
-  {CC"getIntxVMFlag",      CC"(Ljava/lang/String;)Ljava/lang/Long;",
+  {CC "getIntxVMFlag",      CC "(Ljava/lang/String;)Ljava/lang/Long;",
                                                       (void*)&WB_GetIntxVMFlag},
-  {CC"getUintxVMFlag",     CC"(Ljava/lang/String;)Ljava/lang/Long;",
+  {CC "getUintxVMFlag",     CC "(Ljava/lang/String;)Ljava/lang/Long;",
                                                       (void*)&WB_GetUintxVMFlag},
-  {CC"getUint64VMFlag",    CC"(Ljava/lang/String;)Ljava/lang/Long;",
+  {CC "getUint64VMFlag",    CC "(Ljava/lang/String;)Ljava/lang/Long;",
                                                       (void*)&WB_GetUint64VMFlag},
-  {CC"getDoubleVMFlag",    CC"(Ljava/lang/String;)Ljava/lang/Double;",
+  {CC "getDoubleVMFlag",    CC "(Ljava/lang/String;)Ljava/lang/Double;",
                                                       (void*)&WB_GetDoubleVMFlag},
-  {CC"getStringVMFlag",    CC"(Ljava/lang/String;)Ljava/lang/String;",
+  {CC "getStringVMFlag",    CC "(Ljava/lang/String;)Ljava/lang/String;",
                                                       (void*)&WB_GetStringVMFlag},
-  {CC"isInStringTable",    CC"(Ljava/lang/String;)Z", (void*)&WB_IsInStringTable  },
-  {CC"fullGC",   CC"()V",                             (void*)&WB_FullGC },
-  {CC"youngGC",  CC"()V",                             (void*)&WB_YoungGC },
-  {CC"readReservedMemory", CC"()V",                   (void*)&WB_ReadReservedMemory },
-  {CC"allocateMetaspace",
-     CC"(Ljava/lang/ClassLoader;J)J",                 (void*)&WB_AllocateMetaspace },
-  {CC"freeMetaspace",
-     CC"(Ljava/lang/ClassLoader;JJ)V",                (void*)&WB_FreeMetaspace },
-  {CC"incMetaspaceCapacityUntilGC", CC"(J)J",         (void*)&WB_IncMetaspaceCapacityUntilGC },
-  {CC"metaspaceCapacityUntilGC", CC"()J",             (void*)&WB_MetaspaceCapacityUntilGC },
-  {CC"getCPUFeatures",     CC"()Ljava/lang/String;",  (void*)&WB_GetCPUFeatures     },
-  {CC"getNMethod",         CC"(Ljava/lang/reflect/Executable;Z)[Ljava/lang/Object;",
+  {CC "isInStringTable",    CC "(Ljava/lang/String;)Z", (void*)&WB_IsInStringTable  },
+  {CC "fullGC",   CC "()V",                             (void*)&WB_FullGC },
+  {CC "youngGC",  CC "()V",                             (void*)&WB_YoungGC },
+  {CC "readReservedMemory", CC "()V",                   (void*)&WB_ReadReservedMemory },
+  {CC "allocateMetaspace",
+     CC "(Ljava/lang/ClassLoader;J)J",                 (void*)&WB_AllocateMetaspace },
+  {CC "freeMetaspace",
+     CC "(Ljava/lang/ClassLoader;JJ)V",                (void*)&WB_FreeMetaspace },
+  {CC "incMetaspaceCapacityUntilGC", CC "(J)J",         (void*)&WB_IncMetaspaceCapacityUntilGC },
+  {CC "metaspaceCapacityUntilGC", CC "()J",             (void*)&WB_MetaspaceCapacityUntilGC },
+  {CC "getCPUFeatures",     CC "()Ljava/lang/String;",  (void*)&WB_GetCPUFeatures     },
+  {CC "getNMethod",         CC "(Ljava/lang/reflect/Executable;Z)[Ljava/lang/Object;",
                                                       (void*)&WB_GetNMethod         },
-  {CC"isMonitorInflated",  CC"(Ljava/lang/Object;)Z", (void*)&WB_IsMonitorInflated  },
-  {CC"forceSafepoint",     CC"()V",                   (void*)&WB_ForceSafepoint     },
+  {CC "isMonitorInflated",  CC "(Ljava/lang/Object;)Z", (void*)&WB_IsMonitorInflated  },
+  {CC "forceSafepoint",     CC "()V",                   (void*)&WB_ForceSafepoint     },
 };
 
 #undef CC
diff -ruN -x '.*' old/hotspot/src/share/vm/utilities/globalDefinitions_gcc.hpp new/hotspot/src/share/vm/utilities/globalDefinitions_gcc.hpp
--- old/hotspot/src/share/vm/utilities/globalDefinitions_gcc.hpp	2016-08-16 10:50:16.829045930 -0600
+++ new/hotspot/src/share/vm/utilities/globalDefinitions_gcc.hpp	2016-08-16 14:39:07.866675768 -0600
@@ -51,7 +51,9 @@
 #include <math.h>
 #include <time.h>
 #include <fcntl.h>
+#ifndef STATIC_BUILD
 #include <dlfcn.h>
+#endif
 #include <pthread.h>
 
 #ifdef SOLARIS
diff -ruN -x '.*' old/hotspot/src/share/vm/utilities/globalDefinitions_sparcWorks.hpp new/hotspot/src/share/vm/utilities/globalDefinitions_sparcWorks.hpp
--- old/hotspot/src/share/vm/utilities/globalDefinitions_sparcWorks.hpp	2016-08-16 10:50:16.829045930 -0600
+++ new/hotspot/src/share/vm/utilities/globalDefinitions_sparcWorks.hpp	2016-08-16 14:39:07.874676126 -0600
@@ -50,7 +50,11 @@
 # include <math.h>
 # include <time.h>
 # include <fcntl.h>
-# include <dlfcn.h>
+#ifndef STATIC_BUILD
+#include <dlfcn.h>
+#else
+#include "dlfcn_static.h"
+#endif
 # include <pthread.h>
 #ifdef SOLARIS
 # include <thread.h>
diff -ruN -x '.*' old/hotspot/src/share/vm/utilities/globalDefinitions_xlc.hpp new/hotspot/src/share/vm/utilities/globalDefinitions_xlc.hpp
--- old/hotspot/src/share/vm/utilities/globalDefinitions_xlc.hpp	2016-08-16 10:50:16.829045930 -0600
+++ new/hotspot/src/share/vm/utilities/globalDefinitions_xlc.hpp	2016-08-16 14:39:07.874676126 -0600
@@ -43,7 +43,11 @@
 #include <math.h>
 #include <time.h>
 #include <fcntl.h>
+#ifndef STATIC_BUILD
 #include <dlfcn.h>
+#else
+#include "dlfcn_static.h"
+#endif
 #include <pthread.h>
 
 #include <limits.h>
